// Code generated by ent, DO NOT EDIT.

package generated

import (
	"context"
	"errors"
	"fmt"
	"shared/ent/generated/election"
	"shared/ent/generated/electionsettings"
	"shared/ent/generated/predicate"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// ElectionSettingsUpdate is the builder for updating ElectionSettings entities.
type ElectionSettingsUpdate struct {
	config
	hooks    []Hook
	mutation *ElectionSettingsMutation
}

// Where appends a list predicates to the ElectionSettingsUpdate builder.
func (esu *ElectionSettingsUpdate) Where(ps ...predicate.ElectionSettings) *ElectionSettingsUpdate {
	esu.mutation.Where(ps...)
	return esu
}

// SetIsActive sets the "is_active" field.
func (esu *ElectionSettingsUpdate) SetIsActive(b bool) *ElectionSettingsUpdate {
	esu.mutation.SetIsActive(b)
	return esu
}

// SetNillableIsActive sets the "is_active" field if the given value is not nil.
func (esu *ElectionSettingsUpdate) SetNillableIsActive(b *bool) *ElectionSettingsUpdate {
	if b != nil {
		esu.SetIsActive(*b)
	}
	return esu
}

// SetIsAnonymous sets the "is_anonymous" field.
func (esu *ElectionSettingsUpdate) SetIsAnonymous(b bool) *ElectionSettingsUpdate {
	esu.mutation.SetIsAnonymous(b)
	return esu
}

// SetNillableIsAnonymous sets the "is_anonymous" field if the given value is not nil.
func (esu *ElectionSettingsUpdate) SetNillableIsAnonymous(b *bool) *ElectionSettingsUpdate {
	if b != nil {
		esu.SetIsAnonymous(*b)
	}
	return esu
}

// SetAllowComments sets the "allow_comments" field.
func (esu *ElectionSettingsUpdate) SetAllowComments(b bool) *ElectionSettingsUpdate {
	esu.mutation.SetAllowComments(b)
	return esu
}

// SetNillableAllowComments sets the "allow_comments" field if the given value is not nil.
func (esu *ElectionSettingsUpdate) SetNillableAllowComments(b *bool) *ElectionSettingsUpdate {
	if b != nil {
		esu.SetAllowComments(*b)
	}
	return esu
}

// SetMaxVotes sets the "max_votes" field.
func (esu *ElectionSettingsUpdate) SetMaxVotes(i int) *ElectionSettingsUpdate {
	esu.mutation.ResetMaxVotes()
	esu.mutation.SetMaxVotes(i)
	return esu
}

// SetNillableMaxVotes sets the "max_votes" field if the given value is not nil.
func (esu *ElectionSettingsUpdate) SetNillableMaxVotes(i *int) *ElectionSettingsUpdate {
	if i != nil {
		esu.SetMaxVotes(*i)
	}
	return esu
}

// AddMaxVotes adds i to the "max_votes" field.
func (esu *ElectionSettingsUpdate) AddMaxVotes(i int) *ElectionSettingsUpdate {
	esu.mutation.AddMaxVotes(i)
	return esu
}

// SetDuration sets the "duration" field.
func (esu *ElectionSettingsUpdate) SetDuration(t time.Time) *ElectionSettingsUpdate {
	esu.mutation.SetDuration(t)
	return esu
}

// SetNillableDuration sets the "duration" field if the given value is not nil.
func (esu *ElectionSettingsUpdate) SetNillableDuration(t *time.Time) *ElectionSettingsUpdate {
	if t != nil {
		esu.SetDuration(*t)
	}
	return esu
}

// SetElectionID sets the "election" edge to the Election entity by ID.
func (esu *ElectionSettingsUpdate) SetElectionID(id int) *ElectionSettingsUpdate {
	esu.mutation.SetElectionID(id)
	return esu
}

// SetElection sets the "election" edge to the Election entity.
func (esu *ElectionSettingsUpdate) SetElection(e *Election) *ElectionSettingsUpdate {
	return esu.SetElectionID(e.ID)
}

// Mutation returns the ElectionSettingsMutation object of the builder.
func (esu *ElectionSettingsUpdate) Mutation() *ElectionSettingsMutation {
	return esu.mutation
}

// ClearElection clears the "election" edge to the Election entity.
func (esu *ElectionSettingsUpdate) ClearElection() *ElectionSettingsUpdate {
	esu.mutation.ClearElection()
	return esu
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (esu *ElectionSettingsUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, esu.sqlSave, esu.mutation, esu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (esu *ElectionSettingsUpdate) SaveX(ctx context.Context) int {
	affected, err := esu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (esu *ElectionSettingsUpdate) Exec(ctx context.Context) error {
	_, err := esu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (esu *ElectionSettingsUpdate) ExecX(ctx context.Context) {
	if err := esu.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (esu *ElectionSettingsUpdate) check() error {
	if v, ok := esu.mutation.MaxVotes(); ok {
		if err := electionsettings.MaxVotesValidator(v); err != nil {
			return &ValidationError{Name: "max_votes", err: fmt.Errorf(`generated: validator failed for field "ElectionSettings.max_votes": %w`, err)}
		}
	}
	if esu.mutation.ElectionCleared() && len(esu.mutation.ElectionIDs()) > 0 {
		return errors.New(`generated: clearing a required unique edge "ElectionSettings.election"`)
	}
	return nil
}

func (esu *ElectionSettingsUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := esu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(electionsettings.Table, electionsettings.Columns, sqlgraph.NewFieldSpec(electionsettings.FieldID, field.TypeInt))
	if ps := esu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := esu.mutation.IsActive(); ok {
		_spec.SetField(electionsettings.FieldIsActive, field.TypeBool, value)
	}
	if value, ok := esu.mutation.IsAnonymous(); ok {
		_spec.SetField(electionsettings.FieldIsAnonymous, field.TypeBool, value)
	}
	if value, ok := esu.mutation.AllowComments(); ok {
		_spec.SetField(electionsettings.FieldAllowComments, field.TypeBool, value)
	}
	if value, ok := esu.mutation.MaxVotes(); ok {
		_spec.SetField(electionsettings.FieldMaxVotes, field.TypeInt, value)
	}
	if value, ok := esu.mutation.AddedMaxVotes(); ok {
		_spec.AddField(electionsettings.FieldMaxVotes, field.TypeInt, value)
	}
	if value, ok := esu.mutation.Duration(); ok {
		_spec.SetField(electionsettings.FieldDuration, field.TypeTime, value)
	}
	if esu.mutation.ElectionCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   electionsettings.ElectionTable,
			Columns: []string{electionsettings.ElectionColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(election.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := esu.mutation.ElectionIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   electionsettings.ElectionTable,
			Columns: []string{electionsettings.ElectionColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(election.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, esu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{electionsettings.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	esu.mutation.done = true
	return n, nil
}

// ElectionSettingsUpdateOne is the builder for updating a single ElectionSettings entity.
type ElectionSettingsUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *ElectionSettingsMutation
}

// SetIsActive sets the "is_active" field.
func (esuo *ElectionSettingsUpdateOne) SetIsActive(b bool) *ElectionSettingsUpdateOne {
	esuo.mutation.SetIsActive(b)
	return esuo
}

// SetNillableIsActive sets the "is_active" field if the given value is not nil.
func (esuo *ElectionSettingsUpdateOne) SetNillableIsActive(b *bool) *ElectionSettingsUpdateOne {
	if b != nil {
		esuo.SetIsActive(*b)
	}
	return esuo
}

// SetIsAnonymous sets the "is_anonymous" field.
func (esuo *ElectionSettingsUpdateOne) SetIsAnonymous(b bool) *ElectionSettingsUpdateOne {
	esuo.mutation.SetIsAnonymous(b)
	return esuo
}

// SetNillableIsAnonymous sets the "is_anonymous" field if the given value is not nil.
func (esuo *ElectionSettingsUpdateOne) SetNillableIsAnonymous(b *bool) *ElectionSettingsUpdateOne {
	if b != nil {
		esuo.SetIsAnonymous(*b)
	}
	return esuo
}

// SetAllowComments sets the "allow_comments" field.
func (esuo *ElectionSettingsUpdateOne) SetAllowComments(b bool) *ElectionSettingsUpdateOne {
	esuo.mutation.SetAllowComments(b)
	return esuo
}

// SetNillableAllowComments sets the "allow_comments" field if the given value is not nil.
func (esuo *ElectionSettingsUpdateOne) SetNillableAllowComments(b *bool) *ElectionSettingsUpdateOne {
	if b != nil {
		esuo.SetAllowComments(*b)
	}
	return esuo
}

// SetMaxVotes sets the "max_votes" field.
func (esuo *ElectionSettingsUpdateOne) SetMaxVotes(i int) *ElectionSettingsUpdateOne {
	esuo.mutation.ResetMaxVotes()
	esuo.mutation.SetMaxVotes(i)
	return esuo
}

// SetNillableMaxVotes sets the "max_votes" field if the given value is not nil.
func (esuo *ElectionSettingsUpdateOne) SetNillableMaxVotes(i *int) *ElectionSettingsUpdateOne {
	if i != nil {
		esuo.SetMaxVotes(*i)
	}
	return esuo
}

// AddMaxVotes adds i to the "max_votes" field.
func (esuo *ElectionSettingsUpdateOne) AddMaxVotes(i int) *ElectionSettingsUpdateOne {
	esuo.mutation.AddMaxVotes(i)
	return esuo
}

// SetDuration sets the "duration" field.
func (esuo *ElectionSettingsUpdateOne) SetDuration(t time.Time) *ElectionSettingsUpdateOne {
	esuo.mutation.SetDuration(t)
	return esuo
}

// SetNillableDuration sets the "duration" field if the given value is not nil.
func (esuo *ElectionSettingsUpdateOne) SetNillableDuration(t *time.Time) *ElectionSettingsUpdateOne {
	if t != nil {
		esuo.SetDuration(*t)
	}
	return esuo
}

// SetElectionID sets the "election" edge to the Election entity by ID.
func (esuo *ElectionSettingsUpdateOne) SetElectionID(id int) *ElectionSettingsUpdateOne {
	esuo.mutation.SetElectionID(id)
	return esuo
}

// SetElection sets the "election" edge to the Election entity.
func (esuo *ElectionSettingsUpdateOne) SetElection(e *Election) *ElectionSettingsUpdateOne {
	return esuo.SetElectionID(e.ID)
}

// Mutation returns the ElectionSettingsMutation object of the builder.
func (esuo *ElectionSettingsUpdateOne) Mutation() *ElectionSettingsMutation {
	return esuo.mutation
}

// ClearElection clears the "election" edge to the Election entity.
func (esuo *ElectionSettingsUpdateOne) ClearElection() *ElectionSettingsUpdateOne {
	esuo.mutation.ClearElection()
	return esuo
}

// Where appends a list predicates to the ElectionSettingsUpdate builder.
func (esuo *ElectionSettingsUpdateOne) Where(ps ...predicate.ElectionSettings) *ElectionSettingsUpdateOne {
	esuo.mutation.Where(ps...)
	return esuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (esuo *ElectionSettingsUpdateOne) Select(field string, fields ...string) *ElectionSettingsUpdateOne {
	esuo.fields = append([]string{field}, fields...)
	return esuo
}

// Save executes the query and returns the updated ElectionSettings entity.
func (esuo *ElectionSettingsUpdateOne) Save(ctx context.Context) (*ElectionSettings, error) {
	return withHooks(ctx, esuo.sqlSave, esuo.mutation, esuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (esuo *ElectionSettingsUpdateOne) SaveX(ctx context.Context) *ElectionSettings {
	node, err := esuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (esuo *ElectionSettingsUpdateOne) Exec(ctx context.Context) error {
	_, err := esuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (esuo *ElectionSettingsUpdateOne) ExecX(ctx context.Context) {
	if err := esuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (esuo *ElectionSettingsUpdateOne) check() error {
	if v, ok := esuo.mutation.MaxVotes(); ok {
		if err := electionsettings.MaxVotesValidator(v); err != nil {
			return &ValidationError{Name: "max_votes", err: fmt.Errorf(`generated: validator failed for field "ElectionSettings.max_votes": %w`, err)}
		}
	}
	if esuo.mutation.ElectionCleared() && len(esuo.mutation.ElectionIDs()) > 0 {
		return errors.New(`generated: clearing a required unique edge "ElectionSettings.election"`)
	}
	return nil
}

func (esuo *ElectionSettingsUpdateOne) sqlSave(ctx context.Context) (_node *ElectionSettings, err error) {
	if err := esuo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(electionsettings.Table, electionsettings.Columns, sqlgraph.NewFieldSpec(electionsettings.FieldID, field.TypeInt))
	id, ok := esuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`generated: missing "ElectionSettings.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := esuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, electionsettings.FieldID)
		for _, f := range fields {
			if !electionsettings.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("generated: invalid field %q for query", f)}
			}
			if f != electionsettings.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := esuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := esuo.mutation.IsActive(); ok {
		_spec.SetField(electionsettings.FieldIsActive, field.TypeBool, value)
	}
	if value, ok := esuo.mutation.IsAnonymous(); ok {
		_spec.SetField(electionsettings.FieldIsAnonymous, field.TypeBool, value)
	}
	if value, ok := esuo.mutation.AllowComments(); ok {
		_spec.SetField(electionsettings.FieldAllowComments, field.TypeBool, value)
	}
	if value, ok := esuo.mutation.MaxVotes(); ok {
		_spec.SetField(electionsettings.FieldMaxVotes, field.TypeInt, value)
	}
	if value, ok := esuo.mutation.AddedMaxVotes(); ok {
		_spec.AddField(electionsettings.FieldMaxVotes, field.TypeInt, value)
	}
	if value, ok := esuo.mutation.Duration(); ok {
		_spec.SetField(electionsettings.FieldDuration, field.TypeTime, value)
	}
	if esuo.mutation.ElectionCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   electionsettings.ElectionTable,
			Columns: []string{electionsettings.ElectionColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(election.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := esuo.mutation.ElectionIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   electionsettings.ElectionTable,
			Columns: []string{electionsettings.ElectionColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(election.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &ElectionSettings{config: esuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, esuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{electionsettings.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	esuo.mutation.done = true
	return _node, nil
}
