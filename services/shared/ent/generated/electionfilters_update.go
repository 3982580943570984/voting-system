// Code generated by ent, DO NOT EDIT.

package generated

import (
	"context"
	"errors"
	"fmt"
	"shared/ent/generated/election"
	"shared/ent/generated/electionfilters"
	"shared/ent/generated/predicate"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// ElectionFiltersUpdate is the builder for updating ElectionFilters entities.
type ElectionFiltersUpdate struct {
	config
	hooks    []Hook
	mutation *ElectionFiltersMutation
}

// Where appends a list predicates to the ElectionFiltersUpdate builder.
func (efu *ElectionFiltersUpdate) Where(ps ...predicate.ElectionFilters) *ElectionFiltersUpdate {
	efu.mutation.Where(ps...)
	return efu
}

// SetHasFirstName sets the "has_first_name" field.
func (efu *ElectionFiltersUpdate) SetHasFirstName(b bool) *ElectionFiltersUpdate {
	efu.mutation.SetHasFirstName(b)
	return efu
}

// SetNillableHasFirstName sets the "has_first_name" field if the given value is not nil.
func (efu *ElectionFiltersUpdate) SetNillableHasFirstName(b *bool) *ElectionFiltersUpdate {
	if b != nil {
		efu.SetHasFirstName(*b)
	}
	return efu
}

// SetHasLastName sets the "has_last_name" field.
func (efu *ElectionFiltersUpdate) SetHasLastName(b bool) *ElectionFiltersUpdate {
	efu.mutation.SetHasLastName(b)
	return efu
}

// SetNillableHasLastName sets the "has_last_name" field if the given value is not nil.
func (efu *ElectionFiltersUpdate) SetNillableHasLastName(b *bool) *ElectionFiltersUpdate {
	if b != nil {
		efu.SetHasLastName(*b)
	}
	return efu
}

// SetHasBirthdate sets the "has_birthdate" field.
func (efu *ElectionFiltersUpdate) SetHasBirthdate(b bool) *ElectionFiltersUpdate {
	efu.mutation.SetHasBirthdate(b)
	return efu
}

// SetNillableHasBirthdate sets the "has_birthdate" field if the given value is not nil.
func (efu *ElectionFiltersUpdate) SetNillableHasBirthdate(b *bool) *ElectionFiltersUpdate {
	if b != nil {
		efu.SetHasBirthdate(*b)
	}
	return efu
}

// SetHasPhoneNumber sets the "has_phone_number" field.
func (efu *ElectionFiltersUpdate) SetHasPhoneNumber(b bool) *ElectionFiltersUpdate {
	efu.mutation.SetHasPhoneNumber(b)
	return efu
}

// SetNillableHasPhoneNumber sets the "has_phone_number" field if the given value is not nil.
func (efu *ElectionFiltersUpdate) SetNillableHasPhoneNumber(b *bool) *ElectionFiltersUpdate {
	if b != nil {
		efu.SetHasPhoneNumber(*b)
	}
	return efu
}

// SetHasBio sets the "has_bio" field.
func (efu *ElectionFiltersUpdate) SetHasBio(b bool) *ElectionFiltersUpdate {
	efu.mutation.SetHasBio(b)
	return efu
}

// SetNillableHasBio sets the "has_bio" field if the given value is not nil.
func (efu *ElectionFiltersUpdate) SetNillableHasBio(b *bool) *ElectionFiltersUpdate {
	if b != nil {
		efu.SetHasBio(*b)
	}
	return efu
}

// SetHasAddress sets the "has_address" field.
func (efu *ElectionFiltersUpdate) SetHasAddress(b bool) *ElectionFiltersUpdate {
	efu.mutation.SetHasAddress(b)
	return efu
}

// SetNillableHasAddress sets the "has_address" field if the given value is not nil.
func (efu *ElectionFiltersUpdate) SetNillableHasAddress(b *bool) *ElectionFiltersUpdate {
	if b != nil {
		efu.SetHasAddress(*b)
	}
	return efu
}

// SetHasPhotoURL sets the "has_photo_url" field.
func (efu *ElectionFiltersUpdate) SetHasPhotoURL(b bool) *ElectionFiltersUpdate {
	efu.mutation.SetHasPhotoURL(b)
	return efu
}

// SetNillableHasPhotoURL sets the "has_photo_url" field if the given value is not nil.
func (efu *ElectionFiltersUpdate) SetNillableHasPhotoURL(b *bool) *ElectionFiltersUpdate {
	if b != nil {
		efu.SetHasPhotoURL(*b)
	}
	return efu
}

// SetElectionID sets the "election" edge to the Election entity by ID.
func (efu *ElectionFiltersUpdate) SetElectionID(id int) *ElectionFiltersUpdate {
	efu.mutation.SetElectionID(id)
	return efu
}

// SetElection sets the "election" edge to the Election entity.
func (efu *ElectionFiltersUpdate) SetElection(e *Election) *ElectionFiltersUpdate {
	return efu.SetElectionID(e.ID)
}

// Mutation returns the ElectionFiltersMutation object of the builder.
func (efu *ElectionFiltersUpdate) Mutation() *ElectionFiltersMutation {
	return efu.mutation
}

// ClearElection clears the "election" edge to the Election entity.
func (efu *ElectionFiltersUpdate) ClearElection() *ElectionFiltersUpdate {
	efu.mutation.ClearElection()
	return efu
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (efu *ElectionFiltersUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, efu.sqlSave, efu.mutation, efu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (efu *ElectionFiltersUpdate) SaveX(ctx context.Context) int {
	affected, err := efu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (efu *ElectionFiltersUpdate) Exec(ctx context.Context) error {
	_, err := efu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (efu *ElectionFiltersUpdate) ExecX(ctx context.Context) {
	if err := efu.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (efu *ElectionFiltersUpdate) check() error {
	if efu.mutation.ElectionCleared() && len(efu.mutation.ElectionIDs()) > 0 {
		return errors.New(`generated: clearing a required unique edge "ElectionFilters.election"`)
	}
	return nil
}

func (efu *ElectionFiltersUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := efu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(electionfilters.Table, electionfilters.Columns, sqlgraph.NewFieldSpec(electionfilters.FieldID, field.TypeInt))
	if ps := efu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := efu.mutation.HasFirstName(); ok {
		_spec.SetField(electionfilters.FieldHasFirstName, field.TypeBool, value)
	}
	if value, ok := efu.mutation.HasLastName(); ok {
		_spec.SetField(electionfilters.FieldHasLastName, field.TypeBool, value)
	}
	if value, ok := efu.mutation.HasBirthdate(); ok {
		_spec.SetField(electionfilters.FieldHasBirthdate, field.TypeBool, value)
	}
	if value, ok := efu.mutation.HasPhoneNumber(); ok {
		_spec.SetField(electionfilters.FieldHasPhoneNumber, field.TypeBool, value)
	}
	if value, ok := efu.mutation.HasBio(); ok {
		_spec.SetField(electionfilters.FieldHasBio, field.TypeBool, value)
	}
	if value, ok := efu.mutation.HasAddress(); ok {
		_spec.SetField(electionfilters.FieldHasAddress, field.TypeBool, value)
	}
	if value, ok := efu.mutation.HasPhotoURL(); ok {
		_spec.SetField(electionfilters.FieldHasPhotoURL, field.TypeBool, value)
	}
	if efu.mutation.ElectionCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   electionfilters.ElectionTable,
			Columns: []string{electionfilters.ElectionColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(election.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := efu.mutation.ElectionIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   electionfilters.ElectionTable,
			Columns: []string{electionfilters.ElectionColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(election.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, efu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{electionfilters.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	efu.mutation.done = true
	return n, nil
}

// ElectionFiltersUpdateOne is the builder for updating a single ElectionFilters entity.
type ElectionFiltersUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *ElectionFiltersMutation
}

// SetHasFirstName sets the "has_first_name" field.
func (efuo *ElectionFiltersUpdateOne) SetHasFirstName(b bool) *ElectionFiltersUpdateOne {
	efuo.mutation.SetHasFirstName(b)
	return efuo
}

// SetNillableHasFirstName sets the "has_first_name" field if the given value is not nil.
func (efuo *ElectionFiltersUpdateOne) SetNillableHasFirstName(b *bool) *ElectionFiltersUpdateOne {
	if b != nil {
		efuo.SetHasFirstName(*b)
	}
	return efuo
}

// SetHasLastName sets the "has_last_name" field.
func (efuo *ElectionFiltersUpdateOne) SetHasLastName(b bool) *ElectionFiltersUpdateOne {
	efuo.mutation.SetHasLastName(b)
	return efuo
}

// SetNillableHasLastName sets the "has_last_name" field if the given value is not nil.
func (efuo *ElectionFiltersUpdateOne) SetNillableHasLastName(b *bool) *ElectionFiltersUpdateOne {
	if b != nil {
		efuo.SetHasLastName(*b)
	}
	return efuo
}

// SetHasBirthdate sets the "has_birthdate" field.
func (efuo *ElectionFiltersUpdateOne) SetHasBirthdate(b bool) *ElectionFiltersUpdateOne {
	efuo.mutation.SetHasBirthdate(b)
	return efuo
}

// SetNillableHasBirthdate sets the "has_birthdate" field if the given value is not nil.
func (efuo *ElectionFiltersUpdateOne) SetNillableHasBirthdate(b *bool) *ElectionFiltersUpdateOne {
	if b != nil {
		efuo.SetHasBirthdate(*b)
	}
	return efuo
}

// SetHasPhoneNumber sets the "has_phone_number" field.
func (efuo *ElectionFiltersUpdateOne) SetHasPhoneNumber(b bool) *ElectionFiltersUpdateOne {
	efuo.mutation.SetHasPhoneNumber(b)
	return efuo
}

// SetNillableHasPhoneNumber sets the "has_phone_number" field if the given value is not nil.
func (efuo *ElectionFiltersUpdateOne) SetNillableHasPhoneNumber(b *bool) *ElectionFiltersUpdateOne {
	if b != nil {
		efuo.SetHasPhoneNumber(*b)
	}
	return efuo
}

// SetHasBio sets the "has_bio" field.
func (efuo *ElectionFiltersUpdateOne) SetHasBio(b bool) *ElectionFiltersUpdateOne {
	efuo.mutation.SetHasBio(b)
	return efuo
}

// SetNillableHasBio sets the "has_bio" field if the given value is not nil.
func (efuo *ElectionFiltersUpdateOne) SetNillableHasBio(b *bool) *ElectionFiltersUpdateOne {
	if b != nil {
		efuo.SetHasBio(*b)
	}
	return efuo
}

// SetHasAddress sets the "has_address" field.
func (efuo *ElectionFiltersUpdateOne) SetHasAddress(b bool) *ElectionFiltersUpdateOne {
	efuo.mutation.SetHasAddress(b)
	return efuo
}

// SetNillableHasAddress sets the "has_address" field if the given value is not nil.
func (efuo *ElectionFiltersUpdateOne) SetNillableHasAddress(b *bool) *ElectionFiltersUpdateOne {
	if b != nil {
		efuo.SetHasAddress(*b)
	}
	return efuo
}

// SetHasPhotoURL sets the "has_photo_url" field.
func (efuo *ElectionFiltersUpdateOne) SetHasPhotoURL(b bool) *ElectionFiltersUpdateOne {
	efuo.mutation.SetHasPhotoURL(b)
	return efuo
}

// SetNillableHasPhotoURL sets the "has_photo_url" field if the given value is not nil.
func (efuo *ElectionFiltersUpdateOne) SetNillableHasPhotoURL(b *bool) *ElectionFiltersUpdateOne {
	if b != nil {
		efuo.SetHasPhotoURL(*b)
	}
	return efuo
}

// SetElectionID sets the "election" edge to the Election entity by ID.
func (efuo *ElectionFiltersUpdateOne) SetElectionID(id int) *ElectionFiltersUpdateOne {
	efuo.mutation.SetElectionID(id)
	return efuo
}

// SetElection sets the "election" edge to the Election entity.
func (efuo *ElectionFiltersUpdateOne) SetElection(e *Election) *ElectionFiltersUpdateOne {
	return efuo.SetElectionID(e.ID)
}

// Mutation returns the ElectionFiltersMutation object of the builder.
func (efuo *ElectionFiltersUpdateOne) Mutation() *ElectionFiltersMutation {
	return efuo.mutation
}

// ClearElection clears the "election" edge to the Election entity.
func (efuo *ElectionFiltersUpdateOne) ClearElection() *ElectionFiltersUpdateOne {
	efuo.mutation.ClearElection()
	return efuo
}

// Where appends a list predicates to the ElectionFiltersUpdate builder.
func (efuo *ElectionFiltersUpdateOne) Where(ps ...predicate.ElectionFilters) *ElectionFiltersUpdateOne {
	efuo.mutation.Where(ps...)
	return efuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (efuo *ElectionFiltersUpdateOne) Select(field string, fields ...string) *ElectionFiltersUpdateOne {
	efuo.fields = append([]string{field}, fields...)
	return efuo
}

// Save executes the query and returns the updated ElectionFilters entity.
func (efuo *ElectionFiltersUpdateOne) Save(ctx context.Context) (*ElectionFilters, error) {
	return withHooks(ctx, efuo.sqlSave, efuo.mutation, efuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (efuo *ElectionFiltersUpdateOne) SaveX(ctx context.Context) *ElectionFilters {
	node, err := efuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (efuo *ElectionFiltersUpdateOne) Exec(ctx context.Context) error {
	_, err := efuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (efuo *ElectionFiltersUpdateOne) ExecX(ctx context.Context) {
	if err := efuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (efuo *ElectionFiltersUpdateOne) check() error {
	if efuo.mutation.ElectionCleared() && len(efuo.mutation.ElectionIDs()) > 0 {
		return errors.New(`generated: clearing a required unique edge "ElectionFilters.election"`)
	}
	return nil
}

func (efuo *ElectionFiltersUpdateOne) sqlSave(ctx context.Context) (_node *ElectionFilters, err error) {
	if err := efuo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(electionfilters.Table, electionfilters.Columns, sqlgraph.NewFieldSpec(electionfilters.FieldID, field.TypeInt))
	id, ok := efuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`generated: missing "ElectionFilters.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := efuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, electionfilters.FieldID)
		for _, f := range fields {
			if !electionfilters.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("generated: invalid field %q for query", f)}
			}
			if f != electionfilters.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := efuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := efuo.mutation.HasFirstName(); ok {
		_spec.SetField(electionfilters.FieldHasFirstName, field.TypeBool, value)
	}
	if value, ok := efuo.mutation.HasLastName(); ok {
		_spec.SetField(electionfilters.FieldHasLastName, field.TypeBool, value)
	}
	if value, ok := efuo.mutation.HasBirthdate(); ok {
		_spec.SetField(electionfilters.FieldHasBirthdate, field.TypeBool, value)
	}
	if value, ok := efuo.mutation.HasPhoneNumber(); ok {
		_spec.SetField(electionfilters.FieldHasPhoneNumber, field.TypeBool, value)
	}
	if value, ok := efuo.mutation.HasBio(); ok {
		_spec.SetField(electionfilters.FieldHasBio, field.TypeBool, value)
	}
	if value, ok := efuo.mutation.HasAddress(); ok {
		_spec.SetField(electionfilters.FieldHasAddress, field.TypeBool, value)
	}
	if value, ok := efuo.mutation.HasPhotoURL(); ok {
		_spec.SetField(electionfilters.FieldHasPhotoURL, field.TypeBool, value)
	}
	if efuo.mutation.ElectionCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   electionfilters.ElectionTable,
			Columns: []string{electionfilters.ElectionColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(election.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := efuo.mutation.ElectionIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   electionfilters.ElectionTable,
			Columns: []string{electionfilters.ElectionColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(election.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &ElectionFilters{config: efuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, efuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{electionfilters.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	efuo.mutation.done = true
	return _node, nil
}
