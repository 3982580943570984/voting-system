// Code generated by ent, DO NOT EDIT.

package electionfilters

import (
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

const (
	// Label holds the string label denoting the electionfilters type in the database.
	Label = "election_filters"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldHasFirstName holds the string denoting the has_first_name field in the database.
	FieldHasFirstName = "has_first_name"
	// FieldHasLastName holds the string denoting the has_last_name field in the database.
	FieldHasLastName = "has_last_name"
	// FieldHasBirthdate holds the string denoting the has_birthdate field in the database.
	FieldHasBirthdate = "has_birthdate"
	// FieldHasPhoneNumber holds the string denoting the has_phone_number field in the database.
	FieldHasPhoneNumber = "has_phone_number"
	// FieldHasBio holds the string denoting the has_bio field in the database.
	FieldHasBio = "has_bio"
	// FieldHasAddress holds the string denoting the has_address field in the database.
	FieldHasAddress = "has_address"
	// FieldHasPhotoURL holds the string denoting the has_photo_url field in the database.
	FieldHasPhotoURL = "has_photo_url"
	// EdgeElection holds the string denoting the election edge name in mutations.
	EdgeElection = "election"
	// Table holds the table name of the electionfilters in the database.
	Table = "election_filters"
	// ElectionTable is the table that holds the election relation/edge.
	ElectionTable = "election_filters"
	// ElectionInverseTable is the table name for the Election entity.
	// It exists in this package in order to avoid circular dependency with the "election" package.
	ElectionInverseTable = "elections"
	// ElectionColumn is the table column denoting the election relation/edge.
	ElectionColumn = "election_filters"
)

// Columns holds all SQL columns for electionfilters fields.
var Columns = []string{
	FieldID,
	FieldHasFirstName,
	FieldHasLastName,
	FieldHasBirthdate,
	FieldHasPhoneNumber,
	FieldHasBio,
	FieldHasAddress,
	FieldHasPhotoURL,
}

// ForeignKeys holds the SQL foreign-keys that are owned by the "election_filters"
// table and are not defined as standalone fields in the schema.
var ForeignKeys = []string{
	"election_filters",
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	for i := range ForeignKeys {
		if column == ForeignKeys[i] {
			return true
		}
	}
	return false
}

var (
	// DefaultHasFirstName holds the default value on creation for the "has_first_name" field.
	DefaultHasFirstName bool
	// DefaultHasLastName holds the default value on creation for the "has_last_name" field.
	DefaultHasLastName bool
	// DefaultHasBirthdate holds the default value on creation for the "has_birthdate" field.
	DefaultHasBirthdate bool
	// DefaultHasPhoneNumber holds the default value on creation for the "has_phone_number" field.
	DefaultHasPhoneNumber bool
	// DefaultHasBio holds the default value on creation for the "has_bio" field.
	DefaultHasBio bool
	// DefaultHasAddress holds the default value on creation for the "has_address" field.
	DefaultHasAddress bool
	// DefaultHasPhotoURL holds the default value on creation for the "has_photo_url" field.
	DefaultHasPhotoURL bool
)

// OrderOption defines the ordering options for the ElectionFilters queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByHasFirstName orders the results by the has_first_name field.
func ByHasFirstName(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldHasFirstName, opts...).ToFunc()
}

// ByHasLastName orders the results by the has_last_name field.
func ByHasLastName(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldHasLastName, opts...).ToFunc()
}

// ByHasBirthdate orders the results by the has_birthdate field.
func ByHasBirthdate(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldHasBirthdate, opts...).ToFunc()
}

// ByHasPhoneNumber orders the results by the has_phone_number field.
func ByHasPhoneNumber(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldHasPhoneNumber, opts...).ToFunc()
}

// ByHasBio orders the results by the has_bio field.
func ByHasBio(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldHasBio, opts...).ToFunc()
}

// ByHasAddress orders the results by the has_address field.
func ByHasAddress(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldHasAddress, opts...).ToFunc()
}

// ByHasPhotoURL orders the results by the has_photo_url field.
func ByHasPhotoURL(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldHasPhotoURL, opts...).ToFunc()
}

// ByElectionField orders the results by election field.
func ByElectionField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newElectionStep(), sql.OrderByField(field, opts...))
	}
}
func newElectionStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(ElectionInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2O, true, ElectionTable, ElectionColumn),
	)
}
