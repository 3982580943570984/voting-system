// Code generated by ent, DO NOT EDIT.

package electionfilters

import (
	"shared/ent/generated/predicate"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

// ID filters vertices based on their ID field.
func ID(id int) predicate.ElectionFilters {
	return predicate.ElectionFilters(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.ElectionFilters {
	return predicate.ElectionFilters(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.ElectionFilters {
	return predicate.ElectionFilters(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.ElectionFilters {
	return predicate.ElectionFilters(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.ElectionFilters {
	return predicate.ElectionFilters(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.ElectionFilters {
	return predicate.ElectionFilters(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.ElectionFilters {
	return predicate.ElectionFilters(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.ElectionFilters {
	return predicate.ElectionFilters(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.ElectionFilters {
	return predicate.ElectionFilters(sql.FieldLTE(FieldID, id))
}

// HasFirstName applies equality check predicate on the "has_first_name" field. It's identical to HasFirstNameEQ.
func HasFirstName(v bool) predicate.ElectionFilters {
	return predicate.ElectionFilters(sql.FieldEQ(FieldHasFirstName, v))
}

// HasLastName applies equality check predicate on the "has_last_name" field. It's identical to HasLastNameEQ.
func HasLastName(v bool) predicate.ElectionFilters {
	return predicate.ElectionFilters(sql.FieldEQ(FieldHasLastName, v))
}

// HasBirthdate applies equality check predicate on the "has_birthdate" field. It's identical to HasBirthdateEQ.
func HasBirthdate(v bool) predicate.ElectionFilters {
	return predicate.ElectionFilters(sql.FieldEQ(FieldHasBirthdate, v))
}

// HasPhoneNumber applies equality check predicate on the "has_phone_number" field. It's identical to HasPhoneNumberEQ.
func HasPhoneNumber(v bool) predicate.ElectionFilters {
	return predicate.ElectionFilters(sql.FieldEQ(FieldHasPhoneNumber, v))
}

// HasBio applies equality check predicate on the "has_bio" field. It's identical to HasBioEQ.
func HasBio(v bool) predicate.ElectionFilters {
	return predicate.ElectionFilters(sql.FieldEQ(FieldHasBio, v))
}

// HasAddress applies equality check predicate on the "has_address" field. It's identical to HasAddressEQ.
func HasAddress(v bool) predicate.ElectionFilters {
	return predicate.ElectionFilters(sql.FieldEQ(FieldHasAddress, v))
}

// HasPhotoURL applies equality check predicate on the "has_photo_url" field. It's identical to HasPhotoURLEQ.
func HasPhotoURL(v bool) predicate.ElectionFilters {
	return predicate.ElectionFilters(sql.FieldEQ(FieldHasPhotoURL, v))
}

// HasFirstNameEQ applies the EQ predicate on the "has_first_name" field.
func HasFirstNameEQ(v bool) predicate.ElectionFilters {
	return predicate.ElectionFilters(sql.FieldEQ(FieldHasFirstName, v))
}

// HasFirstNameNEQ applies the NEQ predicate on the "has_first_name" field.
func HasFirstNameNEQ(v bool) predicate.ElectionFilters {
	return predicate.ElectionFilters(sql.FieldNEQ(FieldHasFirstName, v))
}

// HasLastNameEQ applies the EQ predicate on the "has_last_name" field.
func HasLastNameEQ(v bool) predicate.ElectionFilters {
	return predicate.ElectionFilters(sql.FieldEQ(FieldHasLastName, v))
}

// HasLastNameNEQ applies the NEQ predicate on the "has_last_name" field.
func HasLastNameNEQ(v bool) predicate.ElectionFilters {
	return predicate.ElectionFilters(sql.FieldNEQ(FieldHasLastName, v))
}

// HasBirthdateEQ applies the EQ predicate on the "has_birthdate" field.
func HasBirthdateEQ(v bool) predicate.ElectionFilters {
	return predicate.ElectionFilters(sql.FieldEQ(FieldHasBirthdate, v))
}

// HasBirthdateNEQ applies the NEQ predicate on the "has_birthdate" field.
func HasBirthdateNEQ(v bool) predicate.ElectionFilters {
	return predicate.ElectionFilters(sql.FieldNEQ(FieldHasBirthdate, v))
}

// HasPhoneNumberEQ applies the EQ predicate on the "has_phone_number" field.
func HasPhoneNumberEQ(v bool) predicate.ElectionFilters {
	return predicate.ElectionFilters(sql.FieldEQ(FieldHasPhoneNumber, v))
}

// HasPhoneNumberNEQ applies the NEQ predicate on the "has_phone_number" field.
func HasPhoneNumberNEQ(v bool) predicate.ElectionFilters {
	return predicate.ElectionFilters(sql.FieldNEQ(FieldHasPhoneNumber, v))
}

// HasBioEQ applies the EQ predicate on the "has_bio" field.
func HasBioEQ(v bool) predicate.ElectionFilters {
	return predicate.ElectionFilters(sql.FieldEQ(FieldHasBio, v))
}

// HasBioNEQ applies the NEQ predicate on the "has_bio" field.
func HasBioNEQ(v bool) predicate.ElectionFilters {
	return predicate.ElectionFilters(sql.FieldNEQ(FieldHasBio, v))
}

// HasAddressEQ applies the EQ predicate on the "has_address" field.
func HasAddressEQ(v bool) predicate.ElectionFilters {
	return predicate.ElectionFilters(sql.FieldEQ(FieldHasAddress, v))
}

// HasAddressNEQ applies the NEQ predicate on the "has_address" field.
func HasAddressNEQ(v bool) predicate.ElectionFilters {
	return predicate.ElectionFilters(sql.FieldNEQ(FieldHasAddress, v))
}

// HasPhotoURLEQ applies the EQ predicate on the "has_photo_url" field.
func HasPhotoURLEQ(v bool) predicate.ElectionFilters {
	return predicate.ElectionFilters(sql.FieldEQ(FieldHasPhotoURL, v))
}

// HasPhotoURLNEQ applies the NEQ predicate on the "has_photo_url" field.
func HasPhotoURLNEQ(v bool) predicate.ElectionFilters {
	return predicate.ElectionFilters(sql.FieldNEQ(FieldHasPhotoURL, v))
}

// HasElection applies the HasEdge predicate on the "election" edge.
func HasElection() predicate.ElectionFilters {
	return predicate.ElectionFilters(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2O, true, ElectionTable, ElectionColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasElectionWith applies the HasEdge predicate on the "election" edge with a given conditions (other predicates).
func HasElectionWith(preds ...predicate.Election) predicate.ElectionFilters {
	return predicate.ElectionFilters(func(s *sql.Selector) {
		step := newElectionStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.ElectionFilters) predicate.ElectionFilters {
	return predicate.ElectionFilters(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.ElectionFilters) predicate.ElectionFilters {
	return predicate.ElectionFilters(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.ElectionFilters) predicate.ElectionFilters {
	return predicate.ElectionFilters(sql.NotPredicates(p))
}
