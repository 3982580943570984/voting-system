// Code generated by ent, DO NOT EDIT.

package generated

import (
	"fmt"
	"shared/ent/generated/election"
	"shared/ent/generated/electionsettings"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
)

// ElectionSettings is the model entity for the ElectionSettings schema.
type ElectionSettings struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// CreateTime holds the value of the "create_time" field.
	CreateTime time.Time `json:"create_time,omitempty"`
	// IsActive holds the value of the "is_active" field.
	IsActive bool `json:"is_active,omitempty"`
	// IsAnonymous holds the value of the "is_anonymous" field.
	IsAnonymous bool `json:"is_anonymous,omitempty"`
	// AllowComments holds the value of the "allow_comments" field.
	AllowComments bool `json:"allow_comments,omitempty"`
	// MaxVotes holds the value of the "max_votes" field.
	MaxVotes int `json:"max_votes,omitempty"`
	// Duration holds the value of the "duration" field.
	Duration time.Time `json:"duration,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the ElectionSettingsQuery when eager-loading is set.
	Edges             ElectionSettingsEdges `json:"edges"`
	election_settings *int
	selectValues      sql.SelectValues
}

// ElectionSettingsEdges holds the relations/edges for other nodes in the graph.
type ElectionSettingsEdges struct {
	// Election holds the value of the election edge.
	Election *Election `json:"election,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
}

// ElectionOrErr returns the Election value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e ElectionSettingsEdges) ElectionOrErr() (*Election, error) {
	if e.Election != nil {
		return e.Election, nil
	} else if e.loadedTypes[0] {
		return nil, &NotFoundError{label: election.Label}
	}
	return nil, &NotLoadedError{edge: "election"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*ElectionSettings) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case electionsettings.FieldIsActive, electionsettings.FieldIsAnonymous, electionsettings.FieldAllowComments:
			values[i] = new(sql.NullBool)
		case electionsettings.FieldID, electionsettings.FieldMaxVotes:
			values[i] = new(sql.NullInt64)
		case electionsettings.FieldCreateTime, electionsettings.FieldDuration:
			values[i] = new(sql.NullTime)
		case electionsettings.ForeignKeys[0]: // election_settings
			values[i] = new(sql.NullInt64)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the ElectionSettings fields.
func (es *ElectionSettings) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case electionsettings.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			es.ID = int(value.Int64)
		case electionsettings.FieldCreateTime:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field create_time", values[i])
			} else if value.Valid {
				es.CreateTime = value.Time
			}
		case electionsettings.FieldIsActive:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field is_active", values[i])
			} else if value.Valid {
				es.IsActive = value.Bool
			}
		case electionsettings.FieldIsAnonymous:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field is_anonymous", values[i])
			} else if value.Valid {
				es.IsAnonymous = value.Bool
			}
		case electionsettings.FieldAllowComments:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field allow_comments", values[i])
			} else if value.Valid {
				es.AllowComments = value.Bool
			}
		case electionsettings.FieldMaxVotes:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field max_votes", values[i])
			} else if value.Valid {
				es.MaxVotes = int(value.Int64)
			}
		case electionsettings.FieldDuration:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field duration", values[i])
			} else if value.Valid {
				es.Duration = value.Time
			}
		case electionsettings.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field election_settings", value)
			} else if value.Valid {
				es.election_settings = new(int)
				*es.election_settings = int(value.Int64)
			}
		default:
			es.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the ElectionSettings.
// This includes values selected through modifiers, order, etc.
func (es *ElectionSettings) Value(name string) (ent.Value, error) {
	return es.selectValues.Get(name)
}

// QueryElection queries the "election" edge of the ElectionSettings entity.
func (es *ElectionSettings) QueryElection() *ElectionQuery {
	return NewElectionSettingsClient(es.config).QueryElection(es)
}

// Update returns a builder for updating this ElectionSettings.
// Note that you need to call ElectionSettings.Unwrap() before calling this method if this ElectionSettings
// was returned from a transaction, and the transaction was committed or rolled back.
func (es *ElectionSettings) Update() *ElectionSettingsUpdateOne {
	return NewElectionSettingsClient(es.config).UpdateOne(es)
}

// Unwrap unwraps the ElectionSettings entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (es *ElectionSettings) Unwrap() *ElectionSettings {
	_tx, ok := es.config.driver.(*txDriver)
	if !ok {
		panic("generated: ElectionSettings is not a transactional entity")
	}
	es.config.driver = _tx.drv
	return es
}

// String implements the fmt.Stringer.
func (es *ElectionSettings) String() string {
	var builder strings.Builder
	builder.WriteString("ElectionSettings(")
	builder.WriteString(fmt.Sprintf("id=%v, ", es.ID))
	builder.WriteString("create_time=")
	builder.WriteString(es.CreateTime.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("is_active=")
	builder.WriteString(fmt.Sprintf("%v", es.IsActive))
	builder.WriteString(", ")
	builder.WriteString("is_anonymous=")
	builder.WriteString(fmt.Sprintf("%v", es.IsAnonymous))
	builder.WriteString(", ")
	builder.WriteString("allow_comments=")
	builder.WriteString(fmt.Sprintf("%v", es.AllowComments))
	builder.WriteString(", ")
	builder.WriteString("max_votes=")
	builder.WriteString(fmt.Sprintf("%v", es.MaxVotes))
	builder.WriteString(", ")
	builder.WriteString("duration=")
	builder.WriteString(es.Duration.Format(time.ANSIC))
	builder.WriteByte(')')
	return builder.String()
}

// ElectionSettingsSlice is a parsable slice of ElectionSettings.
type ElectionSettingsSlice []*ElectionSettings
