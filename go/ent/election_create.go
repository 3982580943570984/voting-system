// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"
	"voting-system/ent/election"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// ElectionCreate is the builder for creating a Election entity.
type ElectionCreate struct {
	config
	mutation *ElectionMutation
	hooks    []Hook
}

// SetTitle sets the "title" field.
func (ec *ElectionCreate) SetTitle(s string) *ElectionCreate {
	ec.mutation.SetTitle(s)
	return ec
}

// SetDescription sets the "description" field.
func (ec *ElectionCreate) SetDescription(s string) *ElectionCreate {
	ec.mutation.SetDescription(s)
	return ec
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (ec *ElectionCreate) SetNillableDescription(s *string) *ElectionCreate {
	if s != nil {
		ec.SetDescription(*s)
	}
	return ec
}

// SetStartDate sets the "start_date" field.
func (ec *ElectionCreate) SetStartDate(t time.Time) *ElectionCreate {
	ec.mutation.SetStartDate(t)
	return ec
}

// SetNillableStartDate sets the "start_date" field if the given value is not nil.
func (ec *ElectionCreate) SetNillableStartDate(t *time.Time) *ElectionCreate {
	if t != nil {
		ec.SetStartDate(*t)
	}
	return ec
}

// SetEndDate sets the "end_date" field.
func (ec *ElectionCreate) SetEndDate(t time.Time) *ElectionCreate {
	ec.mutation.SetEndDate(t)
	return ec
}

// SetNillableEndDate sets the "end_date" field if the given value is not nil.
func (ec *ElectionCreate) SetNillableEndDate(t *time.Time) *ElectionCreate {
	if t != nil {
		ec.SetEndDate(*t)
	}
	return ec
}

// SetIsActive sets the "is_active" field.
func (ec *ElectionCreate) SetIsActive(b bool) *ElectionCreate {
	ec.mutation.SetIsActive(b)
	return ec
}

// SetNillableIsActive sets the "is_active" field if the given value is not nil.
func (ec *ElectionCreate) SetNillableIsActive(b *bool) *ElectionCreate {
	if b != nil {
		ec.SetIsActive(*b)
	}
	return ec
}

// Mutation returns the ElectionMutation object of the builder.
func (ec *ElectionCreate) Mutation() *ElectionMutation {
	return ec.mutation
}

// Save creates the Election in the database.
func (ec *ElectionCreate) Save(ctx context.Context) (*Election, error) {
	ec.defaults()
	return withHooks(ctx, ec.sqlSave, ec.mutation, ec.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (ec *ElectionCreate) SaveX(ctx context.Context) *Election {
	v, err := ec.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (ec *ElectionCreate) Exec(ctx context.Context) error {
	_, err := ec.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ec *ElectionCreate) ExecX(ctx context.Context) {
	if err := ec.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (ec *ElectionCreate) defaults() {
	if _, ok := ec.mutation.IsActive(); !ok {
		v := election.DefaultIsActive
		ec.mutation.SetIsActive(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (ec *ElectionCreate) check() error {
	if _, ok := ec.mutation.Title(); !ok {
		return &ValidationError{Name: "title", err: errors.New(`ent: missing required field "Election.title"`)}
	}
	if v, ok := ec.mutation.Title(); ok {
		if err := election.TitleValidator(v); err != nil {
			return &ValidationError{Name: "title", err: fmt.Errorf(`ent: validator failed for field "Election.title": %w`, err)}
		}
	}
	if _, ok := ec.mutation.IsActive(); !ok {
		return &ValidationError{Name: "is_active", err: errors.New(`ent: missing required field "Election.is_active"`)}
	}
	return nil
}

func (ec *ElectionCreate) sqlSave(ctx context.Context) (*Election, error) {
	if err := ec.check(); err != nil {
		return nil, err
	}
	_node, _spec := ec.createSpec()
	if err := sqlgraph.CreateNode(ctx, ec.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	ec.mutation.id = &_node.ID
	ec.mutation.done = true
	return _node, nil
}

func (ec *ElectionCreate) createSpec() (*Election, *sqlgraph.CreateSpec) {
	var (
		_node = &Election{config: ec.config}
		_spec = sqlgraph.NewCreateSpec(election.Table, sqlgraph.NewFieldSpec(election.FieldID, field.TypeInt))
	)
	if value, ok := ec.mutation.Title(); ok {
		_spec.SetField(election.FieldTitle, field.TypeString, value)
		_node.Title = value
	}
	if value, ok := ec.mutation.Description(); ok {
		_spec.SetField(election.FieldDescription, field.TypeString, value)
		_node.Description = value
	}
	if value, ok := ec.mutation.StartDate(); ok {
		_spec.SetField(election.FieldStartDate, field.TypeTime, value)
		_node.StartDate = value
	}
	if value, ok := ec.mutation.EndDate(); ok {
		_spec.SetField(election.FieldEndDate, field.TypeTime, value)
		_node.EndDate = value
	}
	if value, ok := ec.mutation.IsActive(); ok {
		_spec.SetField(election.FieldIsActive, field.TypeBool, value)
		_node.IsActive = value
	}
	return _node, _spec
}

// ElectionCreateBulk is the builder for creating many Election entities in bulk.
type ElectionCreateBulk struct {
	config
	err      error
	builders []*ElectionCreate
}

// Save creates the Election entities in the database.
func (ecb *ElectionCreateBulk) Save(ctx context.Context) ([]*Election, error) {
	if ecb.err != nil {
		return nil, ecb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(ecb.builders))
	nodes := make([]*Election, len(ecb.builders))
	mutators := make([]Mutator, len(ecb.builders))
	for i := range ecb.builders {
		func(i int, root context.Context) {
			builder := ecb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*ElectionMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, ecb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, ecb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, ecb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (ecb *ElectionCreateBulk) SaveX(ctx context.Context) []*Election {
	v, err := ecb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (ecb *ElectionCreateBulk) Exec(ctx context.Context) error {
	_, err := ecb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ecb *ElectionCreateBulk) ExecX(ctx context.Context) {
	if err := ecb.Exec(ctx); err != nil {
		panic(err)
	}
}
