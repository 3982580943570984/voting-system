// Code generated by ent, DO NOT EDIT.

package migrate

import (
	"entgo.io/ent/dialect/sql/schema"
	"entgo.io/ent/schema/field"
)

var (
	// CandidatesColumns holds the columns for the "candidates" table.
	CandidatesColumns = []*schema.Column{
		{Name: "id", Type: field.TypeInt, Increment: true},
	}
	// CandidatesTable holds the schema information for the "candidates" table.
	CandidatesTable = &schema.Table{
		Name:       "candidates",
		Columns:    CandidatesColumns,
		PrimaryKey: []*schema.Column{CandidatesColumns[0]},
	}
	// CommentsColumns holds the columns for the "comments" table.
	CommentsColumns = []*schema.Column{
		{Name: "id", Type: field.TypeInt, Increment: true},
	}
	// CommentsTable holds the schema information for the "comments" table.
	CommentsTable = &schema.Table{
		Name:       "comments",
		Columns:    CommentsColumns,
		PrimaryKey: []*schema.Column{CommentsColumns[0]},
	}
	// ComplaintsColumns holds the columns for the "complaints" table.
	ComplaintsColumns = []*schema.Column{
		{Name: "id", Type: field.TypeInt, Increment: true},
	}
	// ComplaintsTable holds the schema information for the "complaints" table.
	ComplaintsTable = &schema.Table{
		Name:       "complaints",
		Columns:    ComplaintsColumns,
		PrimaryKey: []*schema.Column{ComplaintsColumns[0]},
	}
	// ElectionsColumns holds the columns for the "elections" table.
	ElectionsColumns = []*schema.Column{
		{Name: "id", Type: field.TypeInt, Increment: true},
		{Name: "title", Type: field.TypeString, Size: 255},
		{Name: "description", Type: field.TypeString, Nullable: true},
		{Name: "start_date", Type: field.TypeTime, Nullable: true, SchemaType: map[string]string{"postgres": "date"}},
		{Name: "end_date", Type: field.TypeTime, Nullable: true, SchemaType: map[string]string{"postgres": "date"}},
		{Name: "is_active", Type: field.TypeBool, Default: true},
	}
	// ElectionsTable holds the schema information for the "elections" table.
	ElectionsTable = &schema.Table{
		Name:       "elections",
		Columns:    ElectionsColumns,
		PrimaryKey: []*schema.Column{ElectionsColumns[0]},
	}
	// FaQsColumns holds the columns for the "fa_qs" table.
	FaQsColumns = []*schema.Column{
		{Name: "id", Type: field.TypeInt, Increment: true},
	}
	// FaQsTable holds the schema information for the "fa_qs" table.
	FaQsTable = &schema.Table{
		Name:       "fa_qs",
		Columns:    FaQsColumns,
		PrimaryKey: []*schema.Column{FaQsColumns[0]},
	}
	// FeedbacksColumns holds the columns for the "feedbacks" table.
	FeedbacksColumns = []*schema.Column{
		{Name: "id", Type: field.TypeInt, Increment: true},
	}
	// FeedbacksTable holds the schema information for the "feedbacks" table.
	FeedbacksTable = &schema.Table{
		Name:       "feedbacks",
		Columns:    FeedbacksColumns,
		PrimaryKey: []*schema.Column{FeedbacksColumns[0]},
	}
	// OrganizersColumns holds the columns for the "organizers" table.
	OrganizersColumns = []*schema.Column{
		{Name: "id", Type: field.TypeInt, Increment: true},
	}
	// OrganizersTable holds the schema information for the "organizers" table.
	OrganizersTable = &schema.Table{
		Name:       "organizers",
		Columns:    OrganizersColumns,
		PrimaryKey: []*schema.Column{OrganizersColumns[0]},
	}
	// ProfilesColumns holds the columns for the "profiles" table.
	ProfilesColumns = []*schema.Column{
		{Name: "id", Type: field.TypeInt, Increment: true},
		{Name: "first_name", Type: field.TypeString, Size: 100},
		{Name: "last_name", Type: field.TypeString, Size: 100},
		{Name: "birthdate", Type: field.TypeTime, Nullable: true},
		{Name: "user_profile", Type: field.TypeInt, Unique: true},
	}
	// ProfilesTable holds the schema information for the "profiles" table.
	ProfilesTable = &schema.Table{
		Name:       "profiles",
		Columns:    ProfilesColumns,
		PrimaryKey: []*schema.Column{ProfilesColumns[0]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "profiles_users_profile",
				Columns:    []*schema.Column{ProfilesColumns[4]},
				RefColumns: []*schema.Column{UsersColumns[0]},
				OnDelete:   schema.Cascade,
			},
		},
	}
	// ResultsColumns holds the columns for the "results" table.
	ResultsColumns = []*schema.Column{
		{Name: "id", Type: field.TypeInt, Increment: true},
	}
	// ResultsTable holds the schema information for the "results" table.
	ResultsTable = &schema.Table{
		Name:       "results",
		Columns:    ResultsColumns,
		PrimaryKey: []*schema.Column{ResultsColumns[0]},
	}
	// SettingsColumns holds the columns for the "settings" table.
	SettingsColumns = []*schema.Column{
		{Name: "id", Type: field.TypeInt, Increment: true},
	}
	// SettingsTable holds the schema information for the "settings" table.
	SettingsTable = &schema.Table{
		Name:       "settings",
		Columns:    SettingsColumns,
		PrimaryKey: []*schema.Column{SettingsColumns[0]},
	}
	// TagsColumns holds the columns for the "tags" table.
	TagsColumns = []*schema.Column{
		{Name: "id", Type: field.TypeInt, Increment: true},
	}
	// TagsTable holds the schema information for the "tags" table.
	TagsTable = &schema.Table{
		Name:       "tags",
		Columns:    TagsColumns,
		PrimaryKey: []*schema.Column{TagsColumns[0]},
	}
	// UsersColumns holds the columns for the "users" table.
	UsersColumns = []*schema.Column{
		{Name: "id", Type: field.TypeInt, Increment: true},
		{Name: "email", Type: field.TypeString, Unique: true},
		{Name: "password", Type: field.TypeString},
		{Name: "is_active", Type: field.TypeBool, Default: true},
	}
	// UsersTable holds the schema information for the "users" table.
	UsersTable = &schema.Table{
		Name:       "users",
		Columns:    UsersColumns,
		PrimaryKey: []*schema.Column{UsersColumns[0]},
		Indexes: []*schema.Index{
			{
				Name:    "user_email",
				Unique:  true,
				Columns: []*schema.Column{UsersColumns[1]},
			},
		},
	}
	// VotesColumns holds the columns for the "votes" table.
	VotesColumns = []*schema.Column{
		{Name: "id", Type: field.TypeInt, Increment: true},
	}
	// VotesTable holds the schema information for the "votes" table.
	VotesTable = &schema.Table{
		Name:       "votes",
		Columns:    VotesColumns,
		PrimaryKey: []*schema.Column{VotesColumns[0]},
	}
	// VotersColumns holds the columns for the "voters" table.
	VotersColumns = []*schema.Column{
		{Name: "id", Type: field.TypeInt, Increment: true},
	}
	// VotersTable holds the schema information for the "voters" table.
	VotersTable = &schema.Table{
		Name:       "voters",
		Columns:    VotersColumns,
		PrimaryKey: []*schema.Column{VotersColumns[0]},
	}
	// Tables holds all the tables in the schema.
	Tables = []*schema.Table{
		CandidatesTable,
		CommentsTable,
		ComplaintsTable,
		ElectionsTable,
		FaQsTable,
		FeedbacksTable,
		OrganizersTable,
		ProfilesTable,
		ResultsTable,
		SettingsTable,
		TagsTable,
		UsersTable,
		VotesTable,
		VotersTable,
	}
)

func init() {
	ProfilesTable.ForeignKeys[0].RefTable = UsersTable
}
