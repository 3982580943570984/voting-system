// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"
	"voting-system/ent/election"
	"voting-system/ent/predicate"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// ElectionUpdate is the builder for updating Election entities.
type ElectionUpdate struct {
	config
	hooks    []Hook
	mutation *ElectionMutation
}

// Where appends a list predicates to the ElectionUpdate builder.
func (eu *ElectionUpdate) Where(ps ...predicate.Election) *ElectionUpdate {
	eu.mutation.Where(ps...)
	return eu
}

// SetTitle sets the "title" field.
func (eu *ElectionUpdate) SetTitle(s string) *ElectionUpdate {
	eu.mutation.SetTitle(s)
	return eu
}

// SetNillableTitle sets the "title" field if the given value is not nil.
func (eu *ElectionUpdate) SetNillableTitle(s *string) *ElectionUpdate {
	if s != nil {
		eu.SetTitle(*s)
	}
	return eu
}

// SetDescription sets the "description" field.
func (eu *ElectionUpdate) SetDescription(s string) *ElectionUpdate {
	eu.mutation.SetDescription(s)
	return eu
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (eu *ElectionUpdate) SetNillableDescription(s *string) *ElectionUpdate {
	if s != nil {
		eu.SetDescription(*s)
	}
	return eu
}

// ClearDescription clears the value of the "description" field.
func (eu *ElectionUpdate) ClearDescription() *ElectionUpdate {
	eu.mutation.ClearDescription()
	return eu
}

// SetStartDate sets the "start_date" field.
func (eu *ElectionUpdate) SetStartDate(t time.Time) *ElectionUpdate {
	eu.mutation.SetStartDate(t)
	return eu
}

// SetNillableStartDate sets the "start_date" field if the given value is not nil.
func (eu *ElectionUpdate) SetNillableStartDate(t *time.Time) *ElectionUpdate {
	if t != nil {
		eu.SetStartDate(*t)
	}
	return eu
}

// ClearStartDate clears the value of the "start_date" field.
func (eu *ElectionUpdate) ClearStartDate() *ElectionUpdate {
	eu.mutation.ClearStartDate()
	return eu
}

// SetEndDate sets the "end_date" field.
func (eu *ElectionUpdate) SetEndDate(t time.Time) *ElectionUpdate {
	eu.mutation.SetEndDate(t)
	return eu
}

// SetNillableEndDate sets the "end_date" field if the given value is not nil.
func (eu *ElectionUpdate) SetNillableEndDate(t *time.Time) *ElectionUpdate {
	if t != nil {
		eu.SetEndDate(*t)
	}
	return eu
}

// ClearEndDate clears the value of the "end_date" field.
func (eu *ElectionUpdate) ClearEndDate() *ElectionUpdate {
	eu.mutation.ClearEndDate()
	return eu
}

// SetIsActive sets the "is_active" field.
func (eu *ElectionUpdate) SetIsActive(b bool) *ElectionUpdate {
	eu.mutation.SetIsActive(b)
	return eu
}

// SetNillableIsActive sets the "is_active" field if the given value is not nil.
func (eu *ElectionUpdate) SetNillableIsActive(b *bool) *ElectionUpdate {
	if b != nil {
		eu.SetIsActive(*b)
	}
	return eu
}

// Mutation returns the ElectionMutation object of the builder.
func (eu *ElectionUpdate) Mutation() *ElectionMutation {
	return eu.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (eu *ElectionUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, eu.sqlSave, eu.mutation, eu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (eu *ElectionUpdate) SaveX(ctx context.Context) int {
	affected, err := eu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (eu *ElectionUpdate) Exec(ctx context.Context) error {
	_, err := eu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (eu *ElectionUpdate) ExecX(ctx context.Context) {
	if err := eu.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (eu *ElectionUpdate) check() error {
	if v, ok := eu.mutation.Title(); ok {
		if err := election.TitleValidator(v); err != nil {
			return &ValidationError{Name: "title", err: fmt.Errorf(`ent: validator failed for field "Election.title": %w`, err)}
		}
	}
	return nil
}

func (eu *ElectionUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := eu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(election.Table, election.Columns, sqlgraph.NewFieldSpec(election.FieldID, field.TypeInt))
	if ps := eu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := eu.mutation.Title(); ok {
		_spec.SetField(election.FieldTitle, field.TypeString, value)
	}
	if value, ok := eu.mutation.Description(); ok {
		_spec.SetField(election.FieldDescription, field.TypeString, value)
	}
	if eu.mutation.DescriptionCleared() {
		_spec.ClearField(election.FieldDescription, field.TypeString)
	}
	if value, ok := eu.mutation.StartDate(); ok {
		_spec.SetField(election.FieldStartDate, field.TypeTime, value)
	}
	if eu.mutation.StartDateCleared() {
		_spec.ClearField(election.FieldStartDate, field.TypeTime)
	}
	if value, ok := eu.mutation.EndDate(); ok {
		_spec.SetField(election.FieldEndDate, field.TypeTime, value)
	}
	if eu.mutation.EndDateCleared() {
		_spec.ClearField(election.FieldEndDate, field.TypeTime)
	}
	if value, ok := eu.mutation.IsActive(); ok {
		_spec.SetField(election.FieldIsActive, field.TypeBool, value)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, eu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{election.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	eu.mutation.done = true
	return n, nil
}

// ElectionUpdateOne is the builder for updating a single Election entity.
type ElectionUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *ElectionMutation
}

// SetTitle sets the "title" field.
func (euo *ElectionUpdateOne) SetTitle(s string) *ElectionUpdateOne {
	euo.mutation.SetTitle(s)
	return euo
}

// SetNillableTitle sets the "title" field if the given value is not nil.
func (euo *ElectionUpdateOne) SetNillableTitle(s *string) *ElectionUpdateOne {
	if s != nil {
		euo.SetTitle(*s)
	}
	return euo
}

// SetDescription sets the "description" field.
func (euo *ElectionUpdateOne) SetDescription(s string) *ElectionUpdateOne {
	euo.mutation.SetDescription(s)
	return euo
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (euo *ElectionUpdateOne) SetNillableDescription(s *string) *ElectionUpdateOne {
	if s != nil {
		euo.SetDescription(*s)
	}
	return euo
}

// ClearDescription clears the value of the "description" field.
func (euo *ElectionUpdateOne) ClearDescription() *ElectionUpdateOne {
	euo.mutation.ClearDescription()
	return euo
}

// SetStartDate sets the "start_date" field.
func (euo *ElectionUpdateOne) SetStartDate(t time.Time) *ElectionUpdateOne {
	euo.mutation.SetStartDate(t)
	return euo
}

// SetNillableStartDate sets the "start_date" field if the given value is not nil.
func (euo *ElectionUpdateOne) SetNillableStartDate(t *time.Time) *ElectionUpdateOne {
	if t != nil {
		euo.SetStartDate(*t)
	}
	return euo
}

// ClearStartDate clears the value of the "start_date" field.
func (euo *ElectionUpdateOne) ClearStartDate() *ElectionUpdateOne {
	euo.mutation.ClearStartDate()
	return euo
}

// SetEndDate sets the "end_date" field.
func (euo *ElectionUpdateOne) SetEndDate(t time.Time) *ElectionUpdateOne {
	euo.mutation.SetEndDate(t)
	return euo
}

// SetNillableEndDate sets the "end_date" field if the given value is not nil.
func (euo *ElectionUpdateOne) SetNillableEndDate(t *time.Time) *ElectionUpdateOne {
	if t != nil {
		euo.SetEndDate(*t)
	}
	return euo
}

// ClearEndDate clears the value of the "end_date" field.
func (euo *ElectionUpdateOne) ClearEndDate() *ElectionUpdateOne {
	euo.mutation.ClearEndDate()
	return euo
}

// SetIsActive sets the "is_active" field.
func (euo *ElectionUpdateOne) SetIsActive(b bool) *ElectionUpdateOne {
	euo.mutation.SetIsActive(b)
	return euo
}

// SetNillableIsActive sets the "is_active" field if the given value is not nil.
func (euo *ElectionUpdateOne) SetNillableIsActive(b *bool) *ElectionUpdateOne {
	if b != nil {
		euo.SetIsActive(*b)
	}
	return euo
}

// Mutation returns the ElectionMutation object of the builder.
func (euo *ElectionUpdateOne) Mutation() *ElectionMutation {
	return euo.mutation
}

// Where appends a list predicates to the ElectionUpdate builder.
func (euo *ElectionUpdateOne) Where(ps ...predicate.Election) *ElectionUpdateOne {
	euo.mutation.Where(ps...)
	return euo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (euo *ElectionUpdateOne) Select(field string, fields ...string) *ElectionUpdateOne {
	euo.fields = append([]string{field}, fields...)
	return euo
}

// Save executes the query and returns the updated Election entity.
func (euo *ElectionUpdateOne) Save(ctx context.Context) (*Election, error) {
	return withHooks(ctx, euo.sqlSave, euo.mutation, euo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (euo *ElectionUpdateOne) SaveX(ctx context.Context) *Election {
	node, err := euo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (euo *ElectionUpdateOne) Exec(ctx context.Context) error {
	_, err := euo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (euo *ElectionUpdateOne) ExecX(ctx context.Context) {
	if err := euo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (euo *ElectionUpdateOne) check() error {
	if v, ok := euo.mutation.Title(); ok {
		if err := election.TitleValidator(v); err != nil {
			return &ValidationError{Name: "title", err: fmt.Errorf(`ent: validator failed for field "Election.title": %w`, err)}
		}
	}
	return nil
}

func (euo *ElectionUpdateOne) sqlSave(ctx context.Context) (_node *Election, err error) {
	if err := euo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(election.Table, election.Columns, sqlgraph.NewFieldSpec(election.FieldID, field.TypeInt))
	id, ok := euo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Election.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := euo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, election.FieldID)
		for _, f := range fields {
			if !election.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != election.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := euo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := euo.mutation.Title(); ok {
		_spec.SetField(election.FieldTitle, field.TypeString, value)
	}
	if value, ok := euo.mutation.Description(); ok {
		_spec.SetField(election.FieldDescription, field.TypeString, value)
	}
	if euo.mutation.DescriptionCleared() {
		_spec.ClearField(election.FieldDescription, field.TypeString)
	}
	if value, ok := euo.mutation.StartDate(); ok {
		_spec.SetField(election.FieldStartDate, field.TypeTime, value)
	}
	if euo.mutation.StartDateCleared() {
		_spec.ClearField(election.FieldStartDate, field.TypeTime)
	}
	if value, ok := euo.mutation.EndDate(); ok {
		_spec.SetField(election.FieldEndDate, field.TypeTime, value)
	}
	if euo.mutation.EndDateCleared() {
		_spec.ClearField(election.FieldEndDate, field.TypeTime)
	}
	if value, ok := euo.mutation.IsActive(); ok {
		_spec.SetField(election.FieldIsActive, field.TypeBool, value)
	}
	_node = &Election{config: euo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, euo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{election.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	euo.mutation.done = true
	return _node, nil
}
