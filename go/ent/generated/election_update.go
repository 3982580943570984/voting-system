// Code generated by ent, DO NOT EDIT.

package generated

import (
	"context"
	"errors"
	"fmt"
	"voting-system/ent/generated/candidate"
	"voting-system/ent/generated/comment"
	"voting-system/ent/generated/election"
	"voting-system/ent/generated/electionfilters"
	"voting-system/ent/generated/electionsettings"
	"voting-system/ent/generated/predicate"
	"voting-system/ent/generated/tag"
	"voting-system/ent/generated/user"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// ElectionUpdate is the builder for updating Election entities.
type ElectionUpdate struct {
	config
	hooks    []Hook
	mutation *ElectionMutation
}

// Where appends a list predicates to the ElectionUpdate builder.
func (eu *ElectionUpdate) Where(ps ...predicate.Election) *ElectionUpdate {
	eu.mutation.Where(ps...)
	return eu
}

// SetTitle sets the "title" field.
func (eu *ElectionUpdate) SetTitle(s string) *ElectionUpdate {
	eu.mutation.SetTitle(s)
	return eu
}

// SetNillableTitle sets the "title" field if the given value is not nil.
func (eu *ElectionUpdate) SetNillableTitle(s *string) *ElectionUpdate {
	if s != nil {
		eu.SetTitle(*s)
	}
	return eu
}

// SetDescription sets the "description" field.
func (eu *ElectionUpdate) SetDescription(s string) *ElectionUpdate {
	eu.mutation.SetDescription(s)
	return eu
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (eu *ElectionUpdate) SetNillableDescription(s *string) *ElectionUpdate {
	if s != nil {
		eu.SetDescription(*s)
	}
	return eu
}

// SetUserID sets the "user" edge to the User entity by ID.
func (eu *ElectionUpdate) SetUserID(id int) *ElectionUpdate {
	eu.mutation.SetUserID(id)
	return eu
}

// SetNillableUserID sets the "user" edge to the User entity by ID if the given value is not nil.
func (eu *ElectionUpdate) SetNillableUserID(id *int) *ElectionUpdate {
	if id != nil {
		eu = eu.SetUserID(*id)
	}
	return eu
}

// SetUser sets the "user" edge to the User entity.
func (eu *ElectionUpdate) SetUser(u *User) *ElectionUpdate {
	return eu.SetUserID(u.ID)
}

// AddTagIDs adds the "tags" edge to the Tag entity by IDs.
func (eu *ElectionUpdate) AddTagIDs(ids ...int) *ElectionUpdate {
	eu.mutation.AddTagIDs(ids...)
	return eu
}

// AddTags adds the "tags" edges to the Tag entity.
func (eu *ElectionUpdate) AddTags(t ...*Tag) *ElectionUpdate {
	ids := make([]int, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return eu.AddTagIDs(ids...)
}

// AddCommentIDs adds the "comments" edge to the Comment entity by IDs.
func (eu *ElectionUpdate) AddCommentIDs(ids ...int) *ElectionUpdate {
	eu.mutation.AddCommentIDs(ids...)
	return eu
}

// AddComments adds the "comments" edges to the Comment entity.
func (eu *ElectionUpdate) AddComments(c ...*Comment) *ElectionUpdate {
	ids := make([]int, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return eu.AddCommentIDs(ids...)
}

// AddCandidateIDs adds the "candidates" edge to the Candidate entity by IDs.
func (eu *ElectionUpdate) AddCandidateIDs(ids ...int) *ElectionUpdate {
	eu.mutation.AddCandidateIDs(ids...)
	return eu
}

// AddCandidates adds the "candidates" edges to the Candidate entity.
func (eu *ElectionUpdate) AddCandidates(c ...*Candidate) *ElectionUpdate {
	ids := make([]int, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return eu.AddCandidateIDs(ids...)
}

// SetSettingsID sets the "settings" edge to the ElectionSettings entity by ID.
func (eu *ElectionUpdate) SetSettingsID(id int) *ElectionUpdate {
	eu.mutation.SetSettingsID(id)
	return eu
}

// SetNillableSettingsID sets the "settings" edge to the ElectionSettings entity by ID if the given value is not nil.
func (eu *ElectionUpdate) SetNillableSettingsID(id *int) *ElectionUpdate {
	if id != nil {
		eu = eu.SetSettingsID(*id)
	}
	return eu
}

// SetSettings sets the "settings" edge to the ElectionSettings entity.
func (eu *ElectionUpdate) SetSettings(e *ElectionSettings) *ElectionUpdate {
	return eu.SetSettingsID(e.ID)
}

// SetFiltersID sets the "filters" edge to the ElectionFilters entity by ID.
func (eu *ElectionUpdate) SetFiltersID(id int) *ElectionUpdate {
	eu.mutation.SetFiltersID(id)
	return eu
}

// SetNillableFiltersID sets the "filters" edge to the ElectionFilters entity by ID if the given value is not nil.
func (eu *ElectionUpdate) SetNillableFiltersID(id *int) *ElectionUpdate {
	if id != nil {
		eu = eu.SetFiltersID(*id)
	}
	return eu
}

// SetFilters sets the "filters" edge to the ElectionFilters entity.
func (eu *ElectionUpdate) SetFilters(e *ElectionFilters) *ElectionUpdate {
	return eu.SetFiltersID(e.ID)
}

// Mutation returns the ElectionMutation object of the builder.
func (eu *ElectionUpdate) Mutation() *ElectionMutation {
	return eu.mutation
}

// ClearUser clears the "user" edge to the User entity.
func (eu *ElectionUpdate) ClearUser() *ElectionUpdate {
	eu.mutation.ClearUser()
	return eu
}

// ClearTags clears all "tags" edges to the Tag entity.
func (eu *ElectionUpdate) ClearTags() *ElectionUpdate {
	eu.mutation.ClearTags()
	return eu
}

// RemoveTagIDs removes the "tags" edge to Tag entities by IDs.
func (eu *ElectionUpdate) RemoveTagIDs(ids ...int) *ElectionUpdate {
	eu.mutation.RemoveTagIDs(ids...)
	return eu
}

// RemoveTags removes "tags" edges to Tag entities.
func (eu *ElectionUpdate) RemoveTags(t ...*Tag) *ElectionUpdate {
	ids := make([]int, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return eu.RemoveTagIDs(ids...)
}

// ClearComments clears all "comments" edges to the Comment entity.
func (eu *ElectionUpdate) ClearComments() *ElectionUpdate {
	eu.mutation.ClearComments()
	return eu
}

// RemoveCommentIDs removes the "comments" edge to Comment entities by IDs.
func (eu *ElectionUpdate) RemoveCommentIDs(ids ...int) *ElectionUpdate {
	eu.mutation.RemoveCommentIDs(ids...)
	return eu
}

// RemoveComments removes "comments" edges to Comment entities.
func (eu *ElectionUpdate) RemoveComments(c ...*Comment) *ElectionUpdate {
	ids := make([]int, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return eu.RemoveCommentIDs(ids...)
}

// ClearCandidates clears all "candidates" edges to the Candidate entity.
func (eu *ElectionUpdate) ClearCandidates() *ElectionUpdate {
	eu.mutation.ClearCandidates()
	return eu
}

// RemoveCandidateIDs removes the "candidates" edge to Candidate entities by IDs.
func (eu *ElectionUpdate) RemoveCandidateIDs(ids ...int) *ElectionUpdate {
	eu.mutation.RemoveCandidateIDs(ids...)
	return eu
}

// RemoveCandidates removes "candidates" edges to Candidate entities.
func (eu *ElectionUpdate) RemoveCandidates(c ...*Candidate) *ElectionUpdate {
	ids := make([]int, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return eu.RemoveCandidateIDs(ids...)
}

// ClearSettings clears the "settings" edge to the ElectionSettings entity.
func (eu *ElectionUpdate) ClearSettings() *ElectionUpdate {
	eu.mutation.ClearSettings()
	return eu
}

// ClearFilters clears the "filters" edge to the ElectionFilters entity.
func (eu *ElectionUpdate) ClearFilters() *ElectionUpdate {
	eu.mutation.ClearFilters()
	return eu
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (eu *ElectionUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, eu.sqlSave, eu.mutation, eu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (eu *ElectionUpdate) SaveX(ctx context.Context) int {
	affected, err := eu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (eu *ElectionUpdate) Exec(ctx context.Context) error {
	_, err := eu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (eu *ElectionUpdate) ExecX(ctx context.Context) {
	if err := eu.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (eu *ElectionUpdate) check() error {
	if v, ok := eu.mutation.Title(); ok {
		if err := election.TitleValidator(v); err != nil {
			return &ValidationError{Name: "title", err: fmt.Errorf(`generated: validator failed for field "Election.title": %w`, err)}
		}
	}
	if v, ok := eu.mutation.Description(); ok {
		if err := election.DescriptionValidator(v); err != nil {
			return &ValidationError{Name: "description", err: fmt.Errorf(`generated: validator failed for field "Election.description": %w`, err)}
		}
	}
	return nil
}

func (eu *ElectionUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := eu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(election.Table, election.Columns, sqlgraph.NewFieldSpec(election.FieldID, field.TypeInt))
	if ps := eu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := eu.mutation.Title(); ok {
		_spec.SetField(election.FieldTitle, field.TypeString, value)
	}
	if value, ok := eu.mutation.Description(); ok {
		_spec.SetField(election.FieldDescription, field.TypeString, value)
	}
	if eu.mutation.UserCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   election.UserTable,
			Columns: []string{election.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := eu.mutation.UserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   election.UserTable,
			Columns: []string{election.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if eu.mutation.TagsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   election.TagsTable,
			Columns: election.TagsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(tag.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := eu.mutation.RemovedTagsIDs(); len(nodes) > 0 && !eu.mutation.TagsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   election.TagsTable,
			Columns: election.TagsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(tag.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := eu.mutation.TagsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   election.TagsTable,
			Columns: election.TagsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(tag.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if eu.mutation.CommentsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   election.CommentsTable,
			Columns: []string{election.CommentsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(comment.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := eu.mutation.RemovedCommentsIDs(); len(nodes) > 0 && !eu.mutation.CommentsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   election.CommentsTable,
			Columns: []string{election.CommentsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(comment.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := eu.mutation.CommentsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   election.CommentsTable,
			Columns: []string{election.CommentsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(comment.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if eu.mutation.CandidatesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   election.CandidatesTable,
			Columns: []string{election.CandidatesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(candidate.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := eu.mutation.RemovedCandidatesIDs(); len(nodes) > 0 && !eu.mutation.CandidatesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   election.CandidatesTable,
			Columns: []string{election.CandidatesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(candidate.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := eu.mutation.CandidatesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   election.CandidatesTable,
			Columns: []string{election.CandidatesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(candidate.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if eu.mutation.SettingsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   election.SettingsTable,
			Columns: []string{election.SettingsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(electionsettings.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := eu.mutation.SettingsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   election.SettingsTable,
			Columns: []string{election.SettingsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(electionsettings.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if eu.mutation.FiltersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   election.FiltersTable,
			Columns: []string{election.FiltersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(electionfilters.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := eu.mutation.FiltersIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   election.FiltersTable,
			Columns: []string{election.FiltersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(electionfilters.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, eu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{election.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	eu.mutation.done = true
	return n, nil
}

// ElectionUpdateOne is the builder for updating a single Election entity.
type ElectionUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *ElectionMutation
}

// SetTitle sets the "title" field.
func (euo *ElectionUpdateOne) SetTitle(s string) *ElectionUpdateOne {
	euo.mutation.SetTitle(s)
	return euo
}

// SetNillableTitle sets the "title" field if the given value is not nil.
func (euo *ElectionUpdateOne) SetNillableTitle(s *string) *ElectionUpdateOne {
	if s != nil {
		euo.SetTitle(*s)
	}
	return euo
}

// SetDescription sets the "description" field.
func (euo *ElectionUpdateOne) SetDescription(s string) *ElectionUpdateOne {
	euo.mutation.SetDescription(s)
	return euo
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (euo *ElectionUpdateOne) SetNillableDescription(s *string) *ElectionUpdateOne {
	if s != nil {
		euo.SetDescription(*s)
	}
	return euo
}

// SetUserID sets the "user" edge to the User entity by ID.
func (euo *ElectionUpdateOne) SetUserID(id int) *ElectionUpdateOne {
	euo.mutation.SetUserID(id)
	return euo
}

// SetNillableUserID sets the "user" edge to the User entity by ID if the given value is not nil.
func (euo *ElectionUpdateOne) SetNillableUserID(id *int) *ElectionUpdateOne {
	if id != nil {
		euo = euo.SetUserID(*id)
	}
	return euo
}

// SetUser sets the "user" edge to the User entity.
func (euo *ElectionUpdateOne) SetUser(u *User) *ElectionUpdateOne {
	return euo.SetUserID(u.ID)
}

// AddTagIDs adds the "tags" edge to the Tag entity by IDs.
func (euo *ElectionUpdateOne) AddTagIDs(ids ...int) *ElectionUpdateOne {
	euo.mutation.AddTagIDs(ids...)
	return euo
}

// AddTags adds the "tags" edges to the Tag entity.
func (euo *ElectionUpdateOne) AddTags(t ...*Tag) *ElectionUpdateOne {
	ids := make([]int, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return euo.AddTagIDs(ids...)
}

// AddCommentIDs adds the "comments" edge to the Comment entity by IDs.
func (euo *ElectionUpdateOne) AddCommentIDs(ids ...int) *ElectionUpdateOne {
	euo.mutation.AddCommentIDs(ids...)
	return euo
}

// AddComments adds the "comments" edges to the Comment entity.
func (euo *ElectionUpdateOne) AddComments(c ...*Comment) *ElectionUpdateOne {
	ids := make([]int, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return euo.AddCommentIDs(ids...)
}

// AddCandidateIDs adds the "candidates" edge to the Candidate entity by IDs.
func (euo *ElectionUpdateOne) AddCandidateIDs(ids ...int) *ElectionUpdateOne {
	euo.mutation.AddCandidateIDs(ids...)
	return euo
}

// AddCandidates adds the "candidates" edges to the Candidate entity.
func (euo *ElectionUpdateOne) AddCandidates(c ...*Candidate) *ElectionUpdateOne {
	ids := make([]int, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return euo.AddCandidateIDs(ids...)
}

// SetSettingsID sets the "settings" edge to the ElectionSettings entity by ID.
func (euo *ElectionUpdateOne) SetSettingsID(id int) *ElectionUpdateOne {
	euo.mutation.SetSettingsID(id)
	return euo
}

// SetNillableSettingsID sets the "settings" edge to the ElectionSettings entity by ID if the given value is not nil.
func (euo *ElectionUpdateOne) SetNillableSettingsID(id *int) *ElectionUpdateOne {
	if id != nil {
		euo = euo.SetSettingsID(*id)
	}
	return euo
}

// SetSettings sets the "settings" edge to the ElectionSettings entity.
func (euo *ElectionUpdateOne) SetSettings(e *ElectionSettings) *ElectionUpdateOne {
	return euo.SetSettingsID(e.ID)
}

// SetFiltersID sets the "filters" edge to the ElectionFilters entity by ID.
func (euo *ElectionUpdateOne) SetFiltersID(id int) *ElectionUpdateOne {
	euo.mutation.SetFiltersID(id)
	return euo
}

// SetNillableFiltersID sets the "filters" edge to the ElectionFilters entity by ID if the given value is not nil.
func (euo *ElectionUpdateOne) SetNillableFiltersID(id *int) *ElectionUpdateOne {
	if id != nil {
		euo = euo.SetFiltersID(*id)
	}
	return euo
}

// SetFilters sets the "filters" edge to the ElectionFilters entity.
func (euo *ElectionUpdateOne) SetFilters(e *ElectionFilters) *ElectionUpdateOne {
	return euo.SetFiltersID(e.ID)
}

// Mutation returns the ElectionMutation object of the builder.
func (euo *ElectionUpdateOne) Mutation() *ElectionMutation {
	return euo.mutation
}

// ClearUser clears the "user" edge to the User entity.
func (euo *ElectionUpdateOne) ClearUser() *ElectionUpdateOne {
	euo.mutation.ClearUser()
	return euo
}

// ClearTags clears all "tags" edges to the Tag entity.
func (euo *ElectionUpdateOne) ClearTags() *ElectionUpdateOne {
	euo.mutation.ClearTags()
	return euo
}

// RemoveTagIDs removes the "tags" edge to Tag entities by IDs.
func (euo *ElectionUpdateOne) RemoveTagIDs(ids ...int) *ElectionUpdateOne {
	euo.mutation.RemoveTagIDs(ids...)
	return euo
}

// RemoveTags removes "tags" edges to Tag entities.
func (euo *ElectionUpdateOne) RemoveTags(t ...*Tag) *ElectionUpdateOne {
	ids := make([]int, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return euo.RemoveTagIDs(ids...)
}

// ClearComments clears all "comments" edges to the Comment entity.
func (euo *ElectionUpdateOne) ClearComments() *ElectionUpdateOne {
	euo.mutation.ClearComments()
	return euo
}

// RemoveCommentIDs removes the "comments" edge to Comment entities by IDs.
func (euo *ElectionUpdateOne) RemoveCommentIDs(ids ...int) *ElectionUpdateOne {
	euo.mutation.RemoveCommentIDs(ids...)
	return euo
}

// RemoveComments removes "comments" edges to Comment entities.
func (euo *ElectionUpdateOne) RemoveComments(c ...*Comment) *ElectionUpdateOne {
	ids := make([]int, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return euo.RemoveCommentIDs(ids...)
}

// ClearCandidates clears all "candidates" edges to the Candidate entity.
func (euo *ElectionUpdateOne) ClearCandidates() *ElectionUpdateOne {
	euo.mutation.ClearCandidates()
	return euo
}

// RemoveCandidateIDs removes the "candidates" edge to Candidate entities by IDs.
func (euo *ElectionUpdateOne) RemoveCandidateIDs(ids ...int) *ElectionUpdateOne {
	euo.mutation.RemoveCandidateIDs(ids...)
	return euo
}

// RemoveCandidates removes "candidates" edges to Candidate entities.
func (euo *ElectionUpdateOne) RemoveCandidates(c ...*Candidate) *ElectionUpdateOne {
	ids := make([]int, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return euo.RemoveCandidateIDs(ids...)
}

// ClearSettings clears the "settings" edge to the ElectionSettings entity.
func (euo *ElectionUpdateOne) ClearSettings() *ElectionUpdateOne {
	euo.mutation.ClearSettings()
	return euo
}

// ClearFilters clears the "filters" edge to the ElectionFilters entity.
func (euo *ElectionUpdateOne) ClearFilters() *ElectionUpdateOne {
	euo.mutation.ClearFilters()
	return euo
}

// Where appends a list predicates to the ElectionUpdate builder.
func (euo *ElectionUpdateOne) Where(ps ...predicate.Election) *ElectionUpdateOne {
	euo.mutation.Where(ps...)
	return euo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (euo *ElectionUpdateOne) Select(field string, fields ...string) *ElectionUpdateOne {
	euo.fields = append([]string{field}, fields...)
	return euo
}

// Save executes the query and returns the updated Election entity.
func (euo *ElectionUpdateOne) Save(ctx context.Context) (*Election, error) {
	return withHooks(ctx, euo.sqlSave, euo.mutation, euo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (euo *ElectionUpdateOne) SaveX(ctx context.Context) *Election {
	node, err := euo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (euo *ElectionUpdateOne) Exec(ctx context.Context) error {
	_, err := euo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (euo *ElectionUpdateOne) ExecX(ctx context.Context) {
	if err := euo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (euo *ElectionUpdateOne) check() error {
	if v, ok := euo.mutation.Title(); ok {
		if err := election.TitleValidator(v); err != nil {
			return &ValidationError{Name: "title", err: fmt.Errorf(`generated: validator failed for field "Election.title": %w`, err)}
		}
	}
	if v, ok := euo.mutation.Description(); ok {
		if err := election.DescriptionValidator(v); err != nil {
			return &ValidationError{Name: "description", err: fmt.Errorf(`generated: validator failed for field "Election.description": %w`, err)}
		}
	}
	return nil
}

func (euo *ElectionUpdateOne) sqlSave(ctx context.Context) (_node *Election, err error) {
	if err := euo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(election.Table, election.Columns, sqlgraph.NewFieldSpec(election.FieldID, field.TypeInt))
	id, ok := euo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`generated: missing "Election.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := euo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, election.FieldID)
		for _, f := range fields {
			if !election.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("generated: invalid field %q for query", f)}
			}
			if f != election.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := euo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := euo.mutation.Title(); ok {
		_spec.SetField(election.FieldTitle, field.TypeString, value)
	}
	if value, ok := euo.mutation.Description(); ok {
		_spec.SetField(election.FieldDescription, field.TypeString, value)
	}
	if euo.mutation.UserCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   election.UserTable,
			Columns: []string{election.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := euo.mutation.UserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   election.UserTable,
			Columns: []string{election.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if euo.mutation.TagsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   election.TagsTable,
			Columns: election.TagsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(tag.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := euo.mutation.RemovedTagsIDs(); len(nodes) > 0 && !euo.mutation.TagsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   election.TagsTable,
			Columns: election.TagsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(tag.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := euo.mutation.TagsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   election.TagsTable,
			Columns: election.TagsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(tag.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if euo.mutation.CommentsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   election.CommentsTable,
			Columns: []string{election.CommentsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(comment.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := euo.mutation.RemovedCommentsIDs(); len(nodes) > 0 && !euo.mutation.CommentsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   election.CommentsTable,
			Columns: []string{election.CommentsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(comment.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := euo.mutation.CommentsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   election.CommentsTable,
			Columns: []string{election.CommentsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(comment.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if euo.mutation.CandidatesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   election.CandidatesTable,
			Columns: []string{election.CandidatesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(candidate.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := euo.mutation.RemovedCandidatesIDs(); len(nodes) > 0 && !euo.mutation.CandidatesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   election.CandidatesTable,
			Columns: []string{election.CandidatesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(candidate.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := euo.mutation.CandidatesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   election.CandidatesTable,
			Columns: []string{election.CandidatesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(candidate.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if euo.mutation.SettingsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   election.SettingsTable,
			Columns: []string{election.SettingsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(electionsettings.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := euo.mutation.SettingsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   election.SettingsTable,
			Columns: []string{election.SettingsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(electionsettings.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if euo.mutation.FiltersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   election.FiltersTable,
			Columns: []string{election.FiltersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(electionfilters.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := euo.mutation.FiltersIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   election.FiltersTable,
			Columns: []string{election.FiltersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(electionfilters.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Election{config: euo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, euo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{election.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	euo.mutation.done = true
	return _node, nil
}
