// Code generated by ent, DO NOT EDIT.

package generated

import (
	"context"
	"errors"
	"fmt"
	"time"
	"voting-system/ent/generated/election"
	"voting-system/ent/generated/electionsettings"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// ElectionSettingsCreate is the builder for creating a ElectionSettings entity.
type ElectionSettingsCreate struct {
	config
	mutation *ElectionSettingsMutation
	hooks    []Hook
}

// SetIsActive sets the "is_active" field.
func (esc *ElectionSettingsCreate) SetIsActive(b bool) *ElectionSettingsCreate {
	esc.mutation.SetIsActive(b)
	return esc
}

// SetNillableIsActive sets the "is_active" field if the given value is not nil.
func (esc *ElectionSettingsCreate) SetNillableIsActive(b *bool) *ElectionSettingsCreate {
	if b != nil {
		esc.SetIsActive(*b)
	}
	return esc
}

// SetIsAnonymous sets the "is_anonymous" field.
func (esc *ElectionSettingsCreate) SetIsAnonymous(b bool) *ElectionSettingsCreate {
	esc.mutation.SetIsAnonymous(b)
	return esc
}

// SetNillableIsAnonymous sets the "is_anonymous" field if the given value is not nil.
func (esc *ElectionSettingsCreate) SetNillableIsAnonymous(b *bool) *ElectionSettingsCreate {
	if b != nil {
		esc.SetIsAnonymous(*b)
	}
	return esc
}

// SetAllowComments sets the "allow_comments" field.
func (esc *ElectionSettingsCreate) SetAllowComments(b bool) *ElectionSettingsCreate {
	esc.mutation.SetAllowComments(b)
	return esc
}

// SetNillableAllowComments sets the "allow_comments" field if the given value is not nil.
func (esc *ElectionSettingsCreate) SetNillableAllowComments(b *bool) *ElectionSettingsCreate {
	if b != nil {
		esc.SetAllowComments(*b)
	}
	return esc
}

// SetMaxVotes sets the "max_votes" field.
func (esc *ElectionSettingsCreate) SetMaxVotes(i int) *ElectionSettingsCreate {
	esc.mutation.SetMaxVotes(i)
	return esc
}

// SetNillableMaxVotes sets the "max_votes" field if the given value is not nil.
func (esc *ElectionSettingsCreate) SetNillableMaxVotes(i *int) *ElectionSettingsCreate {
	if i != nil {
		esc.SetMaxVotes(*i)
	}
	return esc
}

// SetStartDate sets the "start_date" field.
func (esc *ElectionSettingsCreate) SetStartDate(t time.Time) *ElectionSettingsCreate {
	esc.mutation.SetStartDate(t)
	return esc
}

// SetNillableStartDate sets the "start_date" field if the given value is not nil.
func (esc *ElectionSettingsCreate) SetNillableStartDate(t *time.Time) *ElectionSettingsCreate {
	if t != nil {
		esc.SetStartDate(*t)
	}
	return esc
}

// SetEndDate sets the "end_date" field.
func (esc *ElectionSettingsCreate) SetEndDate(t time.Time) *ElectionSettingsCreate {
	esc.mutation.SetEndDate(t)
	return esc
}

// SetNillableEndDate sets the "end_date" field if the given value is not nil.
func (esc *ElectionSettingsCreate) SetNillableEndDate(t *time.Time) *ElectionSettingsCreate {
	if t != nil {
		esc.SetEndDate(*t)
	}
	return esc
}

// SetElectionID sets the "election" edge to the Election entity by ID.
func (esc *ElectionSettingsCreate) SetElectionID(id int) *ElectionSettingsCreate {
	esc.mutation.SetElectionID(id)
	return esc
}

// SetElection sets the "election" edge to the Election entity.
func (esc *ElectionSettingsCreate) SetElection(e *Election) *ElectionSettingsCreate {
	return esc.SetElectionID(e.ID)
}

// Mutation returns the ElectionSettingsMutation object of the builder.
func (esc *ElectionSettingsCreate) Mutation() *ElectionSettingsMutation {
	return esc.mutation
}

// Save creates the ElectionSettings in the database.
func (esc *ElectionSettingsCreate) Save(ctx context.Context) (*ElectionSettings, error) {
	esc.defaults()
	return withHooks(ctx, esc.sqlSave, esc.mutation, esc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (esc *ElectionSettingsCreate) SaveX(ctx context.Context) *ElectionSettings {
	v, err := esc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (esc *ElectionSettingsCreate) Exec(ctx context.Context) error {
	_, err := esc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (esc *ElectionSettingsCreate) ExecX(ctx context.Context) {
	if err := esc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (esc *ElectionSettingsCreate) defaults() {
	if _, ok := esc.mutation.IsActive(); !ok {
		v := electionsettings.DefaultIsActive
		esc.mutation.SetIsActive(v)
	}
	if _, ok := esc.mutation.IsAnonymous(); !ok {
		v := electionsettings.DefaultIsAnonymous
		esc.mutation.SetIsAnonymous(v)
	}
	if _, ok := esc.mutation.AllowComments(); !ok {
		v := electionsettings.DefaultAllowComments
		esc.mutation.SetAllowComments(v)
	}
	if _, ok := esc.mutation.MaxVotes(); !ok {
		v := electionsettings.DefaultMaxVotes
		esc.mutation.SetMaxVotes(v)
	}
	if _, ok := esc.mutation.StartDate(); !ok {
		v := electionsettings.DefaultStartDate()
		esc.mutation.SetStartDate(v)
	}
	if _, ok := esc.mutation.EndDate(); !ok {
		v := electionsettings.DefaultEndDate
		esc.mutation.SetEndDate(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (esc *ElectionSettingsCreate) check() error {
	if _, ok := esc.mutation.IsActive(); !ok {
		return &ValidationError{Name: "is_active", err: errors.New(`generated: missing required field "ElectionSettings.is_active"`)}
	}
	if _, ok := esc.mutation.IsAnonymous(); !ok {
		return &ValidationError{Name: "is_anonymous", err: errors.New(`generated: missing required field "ElectionSettings.is_anonymous"`)}
	}
	if _, ok := esc.mutation.AllowComments(); !ok {
		return &ValidationError{Name: "allow_comments", err: errors.New(`generated: missing required field "ElectionSettings.allow_comments"`)}
	}
	if _, ok := esc.mutation.MaxVotes(); !ok {
		return &ValidationError{Name: "max_votes", err: errors.New(`generated: missing required field "ElectionSettings.max_votes"`)}
	}
	if v, ok := esc.mutation.MaxVotes(); ok {
		if err := electionsettings.MaxVotesValidator(v); err != nil {
			return &ValidationError{Name: "max_votes", err: fmt.Errorf(`generated: validator failed for field "ElectionSettings.max_votes": %w`, err)}
		}
	}
	if _, ok := esc.mutation.StartDate(); !ok {
		return &ValidationError{Name: "start_date", err: errors.New(`generated: missing required field "ElectionSettings.start_date"`)}
	}
	if _, ok := esc.mutation.EndDate(); !ok {
		return &ValidationError{Name: "end_date", err: errors.New(`generated: missing required field "ElectionSettings.end_date"`)}
	}
	if len(esc.mutation.ElectionIDs()) == 0 {
		return &ValidationError{Name: "election", err: errors.New(`generated: missing required edge "ElectionSettings.election"`)}
	}
	return nil
}

func (esc *ElectionSettingsCreate) sqlSave(ctx context.Context) (*ElectionSettings, error) {
	if err := esc.check(); err != nil {
		return nil, err
	}
	_node, _spec := esc.createSpec()
	if err := sqlgraph.CreateNode(ctx, esc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	esc.mutation.id = &_node.ID
	esc.mutation.done = true
	return _node, nil
}

func (esc *ElectionSettingsCreate) createSpec() (*ElectionSettings, *sqlgraph.CreateSpec) {
	var (
		_node = &ElectionSettings{config: esc.config}
		_spec = sqlgraph.NewCreateSpec(electionsettings.Table, sqlgraph.NewFieldSpec(electionsettings.FieldID, field.TypeInt))
	)
	if value, ok := esc.mutation.IsActive(); ok {
		_spec.SetField(electionsettings.FieldIsActive, field.TypeBool, value)
		_node.IsActive = value
	}
	if value, ok := esc.mutation.IsAnonymous(); ok {
		_spec.SetField(electionsettings.FieldIsAnonymous, field.TypeBool, value)
		_node.IsAnonymous = value
	}
	if value, ok := esc.mutation.AllowComments(); ok {
		_spec.SetField(electionsettings.FieldAllowComments, field.TypeBool, value)
		_node.AllowComments = value
	}
	if value, ok := esc.mutation.MaxVotes(); ok {
		_spec.SetField(electionsettings.FieldMaxVotes, field.TypeInt, value)
		_node.MaxVotes = value
	}
	if value, ok := esc.mutation.StartDate(); ok {
		_spec.SetField(electionsettings.FieldStartDate, field.TypeTime, value)
		_node.StartDate = value
	}
	if value, ok := esc.mutation.EndDate(); ok {
		_spec.SetField(electionsettings.FieldEndDate, field.TypeTime, value)
		_node.EndDate = value
	}
	if nodes := esc.mutation.ElectionIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   electionsettings.ElectionTable,
			Columns: []string{electionsettings.ElectionColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(election.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.election_settings = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// ElectionSettingsCreateBulk is the builder for creating many ElectionSettings entities in bulk.
type ElectionSettingsCreateBulk struct {
	config
	err      error
	builders []*ElectionSettingsCreate
}

// Save creates the ElectionSettings entities in the database.
func (escb *ElectionSettingsCreateBulk) Save(ctx context.Context) ([]*ElectionSettings, error) {
	if escb.err != nil {
		return nil, escb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(escb.builders))
	nodes := make([]*ElectionSettings, len(escb.builders))
	mutators := make([]Mutator, len(escb.builders))
	for i := range escb.builders {
		func(i int, root context.Context) {
			builder := escb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*ElectionSettingsMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, escb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, escb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, escb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (escb *ElectionSettingsCreateBulk) SaveX(ctx context.Context) []*ElectionSettings {
	v, err := escb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (escb *ElectionSettingsCreateBulk) Exec(ctx context.Context) error {
	_, err := escb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (escb *ElectionSettingsCreateBulk) ExecX(ctx context.Context) {
	if err := escb.Exec(ctx); err != nil {
		panic(err)
	}
}
