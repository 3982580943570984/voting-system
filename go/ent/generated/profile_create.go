// Code generated by ent, DO NOT EDIT.

package generated

import (
	"context"
	"errors"
	"fmt"
	"time"
	"voting-system/ent/generated/profile"
	"voting-system/ent/generated/user"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// ProfileCreate is the builder for creating a Profile entity.
type ProfileCreate struct {
	config
	mutation *ProfileMutation
	hooks    []Hook
}

// SetFirstName sets the "first_name" field.
func (pc *ProfileCreate) SetFirstName(s string) *ProfileCreate {
	pc.mutation.SetFirstName(s)
	return pc
}

// SetNillableFirstName sets the "first_name" field if the given value is not nil.
func (pc *ProfileCreate) SetNillableFirstName(s *string) *ProfileCreate {
	if s != nil {
		pc.SetFirstName(*s)
	}
	return pc
}

// SetLastName sets the "last_name" field.
func (pc *ProfileCreate) SetLastName(s string) *ProfileCreate {
	pc.mutation.SetLastName(s)
	return pc
}

// SetNillableLastName sets the "last_name" field if the given value is not nil.
func (pc *ProfileCreate) SetNillableLastName(s *string) *ProfileCreate {
	if s != nil {
		pc.SetLastName(*s)
	}
	return pc
}

// SetBirthdate sets the "birthdate" field.
func (pc *ProfileCreate) SetBirthdate(t time.Time) *ProfileCreate {
	pc.mutation.SetBirthdate(t)
	return pc
}

// SetNillableBirthdate sets the "birthdate" field if the given value is not nil.
func (pc *ProfileCreate) SetNillableBirthdate(t *time.Time) *ProfileCreate {
	if t != nil {
		pc.SetBirthdate(*t)
	}
	return pc
}

// SetPhoneNumber sets the "phone_number" field.
func (pc *ProfileCreate) SetPhoneNumber(s string) *ProfileCreate {
	pc.mutation.SetPhoneNumber(s)
	return pc
}

// SetNillablePhoneNumber sets the "phone_number" field if the given value is not nil.
func (pc *ProfileCreate) SetNillablePhoneNumber(s *string) *ProfileCreate {
	if s != nil {
		pc.SetPhoneNumber(*s)
	}
	return pc
}

// SetBio sets the "bio" field.
func (pc *ProfileCreate) SetBio(s string) *ProfileCreate {
	pc.mutation.SetBio(s)
	return pc
}

// SetNillableBio sets the "bio" field if the given value is not nil.
func (pc *ProfileCreate) SetNillableBio(s *string) *ProfileCreate {
	if s != nil {
		pc.SetBio(*s)
	}
	return pc
}

// SetAddress sets the "address" field.
func (pc *ProfileCreate) SetAddress(s string) *ProfileCreate {
	pc.mutation.SetAddress(s)
	return pc
}

// SetNillableAddress sets the "address" field if the given value is not nil.
func (pc *ProfileCreate) SetNillableAddress(s *string) *ProfileCreate {
	if s != nil {
		pc.SetAddress(*s)
	}
	return pc
}

// SetPhotoURL sets the "photo_url" field.
func (pc *ProfileCreate) SetPhotoURL(s string) *ProfileCreate {
	pc.mutation.SetPhotoURL(s)
	return pc
}

// SetNillablePhotoURL sets the "photo_url" field if the given value is not nil.
func (pc *ProfileCreate) SetNillablePhotoURL(s *string) *ProfileCreate {
	if s != nil {
		pc.SetPhotoURL(*s)
	}
	return pc
}

// SetUserID sets the "user" edge to the User entity by ID.
func (pc *ProfileCreate) SetUserID(id int) *ProfileCreate {
	pc.mutation.SetUserID(id)
	return pc
}

// SetUser sets the "user" edge to the User entity.
func (pc *ProfileCreate) SetUser(u *User) *ProfileCreate {
	return pc.SetUserID(u.ID)
}

// Mutation returns the ProfileMutation object of the builder.
func (pc *ProfileCreate) Mutation() *ProfileMutation {
	return pc.mutation
}

// Save creates the Profile in the database.
func (pc *ProfileCreate) Save(ctx context.Context) (*Profile, error) {
	return withHooks(ctx, pc.sqlSave, pc.mutation, pc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (pc *ProfileCreate) SaveX(ctx context.Context) *Profile {
	v, err := pc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (pc *ProfileCreate) Exec(ctx context.Context) error {
	_, err := pc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (pc *ProfileCreate) ExecX(ctx context.Context) {
	if err := pc.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (pc *ProfileCreate) check() error {
	if v, ok := pc.mutation.FirstName(); ok {
		if err := profile.FirstNameValidator(v); err != nil {
			return &ValidationError{Name: "first_name", err: fmt.Errorf(`generated: validator failed for field "Profile.first_name": %w`, err)}
		}
	}
	if v, ok := pc.mutation.LastName(); ok {
		if err := profile.LastNameValidator(v); err != nil {
			return &ValidationError{Name: "last_name", err: fmt.Errorf(`generated: validator failed for field "Profile.last_name": %w`, err)}
		}
	}
	if v, ok := pc.mutation.PhoneNumber(); ok {
		if err := profile.PhoneNumberValidator(v); err != nil {
			return &ValidationError{Name: "phone_number", err: fmt.Errorf(`generated: validator failed for field "Profile.phone_number": %w`, err)}
		}
	}
	if v, ok := pc.mutation.Bio(); ok {
		if err := profile.BioValidator(v); err != nil {
			return &ValidationError{Name: "bio", err: fmt.Errorf(`generated: validator failed for field "Profile.bio": %w`, err)}
		}
	}
	if v, ok := pc.mutation.Address(); ok {
		if err := profile.AddressValidator(v); err != nil {
			return &ValidationError{Name: "address", err: fmt.Errorf(`generated: validator failed for field "Profile.address": %w`, err)}
		}
	}
	if len(pc.mutation.UserIDs()) == 0 {
		return &ValidationError{Name: "user", err: errors.New(`generated: missing required edge "Profile.user"`)}
	}
	return nil
}

func (pc *ProfileCreate) sqlSave(ctx context.Context) (*Profile, error) {
	if err := pc.check(); err != nil {
		return nil, err
	}
	_node, _spec := pc.createSpec()
	if err := sqlgraph.CreateNode(ctx, pc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	pc.mutation.id = &_node.ID
	pc.mutation.done = true
	return _node, nil
}

func (pc *ProfileCreate) createSpec() (*Profile, *sqlgraph.CreateSpec) {
	var (
		_node = &Profile{config: pc.config}
		_spec = sqlgraph.NewCreateSpec(profile.Table, sqlgraph.NewFieldSpec(profile.FieldID, field.TypeInt))
	)
	if value, ok := pc.mutation.FirstName(); ok {
		_spec.SetField(profile.FieldFirstName, field.TypeString, value)
		_node.FirstName = value
	}
	if value, ok := pc.mutation.LastName(); ok {
		_spec.SetField(profile.FieldLastName, field.TypeString, value)
		_node.LastName = value
	}
	if value, ok := pc.mutation.Birthdate(); ok {
		_spec.SetField(profile.FieldBirthdate, field.TypeTime, value)
		_node.Birthdate = value
	}
	if value, ok := pc.mutation.PhoneNumber(); ok {
		_spec.SetField(profile.FieldPhoneNumber, field.TypeString, value)
		_node.PhoneNumber = value
	}
	if value, ok := pc.mutation.Bio(); ok {
		_spec.SetField(profile.FieldBio, field.TypeString, value)
		_node.Bio = value
	}
	if value, ok := pc.mutation.Address(); ok {
		_spec.SetField(profile.FieldAddress, field.TypeString, value)
		_node.Address = value
	}
	if value, ok := pc.mutation.PhotoURL(); ok {
		_spec.SetField(profile.FieldPhotoURL, field.TypeString, value)
		_node.PhotoURL = value
	}
	if nodes := pc.mutation.UserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   profile.UserTable,
			Columns: []string{profile.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.user_profile = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// ProfileCreateBulk is the builder for creating many Profile entities in bulk.
type ProfileCreateBulk struct {
	config
	err      error
	builders []*ProfileCreate
}

// Save creates the Profile entities in the database.
func (pcb *ProfileCreateBulk) Save(ctx context.Context) ([]*Profile, error) {
	if pcb.err != nil {
		return nil, pcb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(pcb.builders))
	nodes := make([]*Profile, len(pcb.builders))
	mutators := make([]Mutator, len(pcb.builders))
	for i := range pcb.builders {
		func(i int, root context.Context) {
			builder := pcb.builders[i]
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*ProfileMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, pcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, pcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, pcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (pcb *ProfileCreateBulk) SaveX(ctx context.Context) []*Profile {
	v, err := pcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (pcb *ProfileCreateBulk) Exec(ctx context.Context) error {
	_, err := pcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (pcb *ProfileCreateBulk) ExecX(ctx context.Context) {
	if err := pcb.Exec(ctx); err != nil {
		panic(err)
	}
}
