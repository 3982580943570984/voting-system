// Code generated by ent, DO NOT EDIT.

package generated

import (
	"context"
	"database/sql/driver"
	"fmt"
	"math"
	"voting-system/ent/generated/candidate"
	"voting-system/ent/generated/comment"
	"voting-system/ent/generated/election"
	"voting-system/ent/generated/electionsettings"
	"voting-system/ent/generated/predicate"
	"voting-system/ent/generated/tag"
	"voting-system/ent/generated/user"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// ElectionQuery is the builder for querying Election entities.
type ElectionQuery struct {
	config
	ctx            *QueryContext
	order          []election.OrderOption
	inters         []Interceptor
	predicates     []predicate.Election
	withUser       *UserQuery
	withTags       *TagQuery
	withComments   *CommentQuery
	withCandidates *CandidateQuery
	withSettings   *ElectionSettingsQuery
	withFKs        bool
	// intermediate query (i.e. traversal path).
	sql  *sql.Selector
	path func(context.Context) (*sql.Selector, error)
}

// Where adds a new predicate for the ElectionQuery builder.
func (eq *ElectionQuery) Where(ps ...predicate.Election) *ElectionQuery {
	eq.predicates = append(eq.predicates, ps...)
	return eq
}

// Limit the number of records to be returned by this query.
func (eq *ElectionQuery) Limit(limit int) *ElectionQuery {
	eq.ctx.Limit = &limit
	return eq
}

// Offset to start from.
func (eq *ElectionQuery) Offset(offset int) *ElectionQuery {
	eq.ctx.Offset = &offset
	return eq
}

// Unique configures the query builder to filter duplicate records on query.
// By default, unique is set to true, and can be disabled using this method.
func (eq *ElectionQuery) Unique(unique bool) *ElectionQuery {
	eq.ctx.Unique = &unique
	return eq
}

// Order specifies how the records should be ordered.
func (eq *ElectionQuery) Order(o ...election.OrderOption) *ElectionQuery {
	eq.order = append(eq.order, o...)
	return eq
}

// QueryUser chains the current query on the "user" edge.
func (eq *ElectionQuery) QueryUser() *UserQuery {
	query := (&UserClient{config: eq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := eq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := eq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(election.Table, election.FieldID, selector),
			sqlgraph.To(user.Table, user.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, election.UserTable, election.UserColumn),
		)
		fromU = sqlgraph.SetNeighbors(eq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryTags chains the current query on the "tags" edge.
func (eq *ElectionQuery) QueryTags() *TagQuery {
	query := (&TagClient{config: eq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := eq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := eq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(election.Table, election.FieldID, selector),
			sqlgraph.To(tag.Table, tag.FieldID),
			sqlgraph.Edge(sqlgraph.M2M, true, election.TagsTable, election.TagsPrimaryKey...),
		)
		fromU = sqlgraph.SetNeighbors(eq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryComments chains the current query on the "comments" edge.
func (eq *ElectionQuery) QueryComments() *CommentQuery {
	query := (&CommentClient{config: eq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := eq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := eq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(election.Table, election.FieldID, selector),
			sqlgraph.To(comment.Table, comment.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, election.CommentsTable, election.CommentsColumn),
		)
		fromU = sqlgraph.SetNeighbors(eq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryCandidates chains the current query on the "candidates" edge.
func (eq *ElectionQuery) QueryCandidates() *CandidateQuery {
	query := (&CandidateClient{config: eq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := eq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := eq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(election.Table, election.FieldID, selector),
			sqlgraph.To(candidate.Table, candidate.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, election.CandidatesTable, election.CandidatesColumn),
		)
		fromU = sqlgraph.SetNeighbors(eq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QuerySettings chains the current query on the "settings" edge.
func (eq *ElectionQuery) QuerySettings() *ElectionSettingsQuery {
	query := (&ElectionSettingsClient{config: eq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := eq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := eq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(election.Table, election.FieldID, selector),
			sqlgraph.To(electionsettings.Table, electionsettings.FieldID),
			sqlgraph.Edge(sqlgraph.O2O, false, election.SettingsTable, election.SettingsColumn),
		)
		fromU = sqlgraph.SetNeighbors(eq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// First returns the first Election entity from the query.
// Returns a *NotFoundError when no Election was found.
func (eq *ElectionQuery) First(ctx context.Context) (*Election, error) {
	nodes, err := eq.Limit(1).All(setContextOp(ctx, eq.ctx, ent.OpQueryFirst))
	if err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nil, &NotFoundError{election.Label}
	}
	return nodes[0], nil
}

// FirstX is like First, but panics if an error occurs.
func (eq *ElectionQuery) FirstX(ctx context.Context) *Election {
	node, err := eq.First(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return node
}

// FirstID returns the first Election ID from the query.
// Returns a *NotFoundError when no Election ID was found.
func (eq *ElectionQuery) FirstID(ctx context.Context) (id int, err error) {
	var ids []int
	if ids, err = eq.Limit(1).IDs(setContextOp(ctx, eq.ctx, ent.OpQueryFirstID)); err != nil {
		return
	}
	if len(ids) == 0 {
		err = &NotFoundError{election.Label}
		return
	}
	return ids[0], nil
}

// FirstIDX is like FirstID, but panics if an error occurs.
func (eq *ElectionQuery) FirstIDX(ctx context.Context) int {
	id, err := eq.FirstID(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return id
}

// Only returns a single Election entity found by the query, ensuring it only returns one.
// Returns a *NotSingularError when more than one Election entity is found.
// Returns a *NotFoundError when no Election entities are found.
func (eq *ElectionQuery) Only(ctx context.Context) (*Election, error) {
	nodes, err := eq.Limit(2).All(setContextOp(ctx, eq.ctx, ent.OpQueryOnly))
	if err != nil {
		return nil, err
	}
	switch len(nodes) {
	case 1:
		return nodes[0], nil
	case 0:
		return nil, &NotFoundError{election.Label}
	default:
		return nil, &NotSingularError{election.Label}
	}
}

// OnlyX is like Only, but panics if an error occurs.
func (eq *ElectionQuery) OnlyX(ctx context.Context) *Election {
	node, err := eq.Only(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// OnlyID is like Only, but returns the only Election ID in the query.
// Returns a *NotSingularError when more than one Election ID is found.
// Returns a *NotFoundError when no entities are found.
func (eq *ElectionQuery) OnlyID(ctx context.Context) (id int, err error) {
	var ids []int
	if ids, err = eq.Limit(2).IDs(setContextOp(ctx, eq.ctx, ent.OpQueryOnlyID)); err != nil {
		return
	}
	switch len(ids) {
	case 1:
		id = ids[0]
	case 0:
		err = &NotFoundError{election.Label}
	default:
		err = &NotSingularError{election.Label}
	}
	return
}

// OnlyIDX is like OnlyID, but panics if an error occurs.
func (eq *ElectionQuery) OnlyIDX(ctx context.Context) int {
	id, err := eq.OnlyID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// All executes the query and returns a list of Elections.
func (eq *ElectionQuery) All(ctx context.Context) ([]*Election, error) {
	ctx = setContextOp(ctx, eq.ctx, ent.OpQueryAll)
	if err := eq.prepareQuery(ctx); err != nil {
		return nil, err
	}
	qr := querierAll[[]*Election, *ElectionQuery]()
	return withInterceptors[[]*Election](ctx, eq, qr, eq.inters)
}

// AllX is like All, but panics if an error occurs.
func (eq *ElectionQuery) AllX(ctx context.Context) []*Election {
	nodes, err := eq.All(ctx)
	if err != nil {
		panic(err)
	}
	return nodes
}

// IDs executes the query and returns a list of Election IDs.
func (eq *ElectionQuery) IDs(ctx context.Context) (ids []int, err error) {
	if eq.ctx.Unique == nil && eq.path != nil {
		eq.Unique(true)
	}
	ctx = setContextOp(ctx, eq.ctx, ent.OpQueryIDs)
	if err = eq.Select(election.FieldID).Scan(ctx, &ids); err != nil {
		return nil, err
	}
	return ids, nil
}

// IDsX is like IDs, but panics if an error occurs.
func (eq *ElectionQuery) IDsX(ctx context.Context) []int {
	ids, err := eq.IDs(ctx)
	if err != nil {
		panic(err)
	}
	return ids
}

// Count returns the count of the given query.
func (eq *ElectionQuery) Count(ctx context.Context) (int, error) {
	ctx = setContextOp(ctx, eq.ctx, ent.OpQueryCount)
	if err := eq.prepareQuery(ctx); err != nil {
		return 0, err
	}
	return withInterceptors[int](ctx, eq, querierCount[*ElectionQuery](), eq.inters)
}

// CountX is like Count, but panics if an error occurs.
func (eq *ElectionQuery) CountX(ctx context.Context) int {
	count, err := eq.Count(ctx)
	if err != nil {
		panic(err)
	}
	return count
}

// Exist returns true if the query has elements in the graph.
func (eq *ElectionQuery) Exist(ctx context.Context) (bool, error) {
	ctx = setContextOp(ctx, eq.ctx, ent.OpQueryExist)
	switch _, err := eq.FirstID(ctx); {
	case IsNotFound(err):
		return false, nil
	case err != nil:
		return false, fmt.Errorf("generated: check existence: %w", err)
	default:
		return true, nil
	}
}

// ExistX is like Exist, but panics if an error occurs.
func (eq *ElectionQuery) ExistX(ctx context.Context) bool {
	exist, err := eq.Exist(ctx)
	if err != nil {
		panic(err)
	}
	return exist
}

// Clone returns a duplicate of the ElectionQuery builder, including all associated steps. It can be
// used to prepare common query builders and use them differently after the clone is made.
func (eq *ElectionQuery) Clone() *ElectionQuery {
	if eq == nil {
		return nil
	}
	return &ElectionQuery{
		config:         eq.config,
		ctx:            eq.ctx.Clone(),
		order:          append([]election.OrderOption{}, eq.order...),
		inters:         append([]Interceptor{}, eq.inters...),
		predicates:     append([]predicate.Election{}, eq.predicates...),
		withUser:       eq.withUser.Clone(),
		withTags:       eq.withTags.Clone(),
		withComments:   eq.withComments.Clone(),
		withCandidates: eq.withCandidates.Clone(),
		withSettings:   eq.withSettings.Clone(),
		// clone intermediate query.
		sql:  eq.sql.Clone(),
		path: eq.path,
	}
}

// WithUser tells the query-builder to eager-load the nodes that are connected to
// the "user" edge. The optional arguments are used to configure the query builder of the edge.
func (eq *ElectionQuery) WithUser(opts ...func(*UserQuery)) *ElectionQuery {
	query := (&UserClient{config: eq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	eq.withUser = query
	return eq
}

// WithTags tells the query-builder to eager-load the nodes that are connected to
// the "tags" edge. The optional arguments are used to configure the query builder of the edge.
func (eq *ElectionQuery) WithTags(opts ...func(*TagQuery)) *ElectionQuery {
	query := (&TagClient{config: eq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	eq.withTags = query
	return eq
}

// WithComments tells the query-builder to eager-load the nodes that are connected to
// the "comments" edge. The optional arguments are used to configure the query builder of the edge.
func (eq *ElectionQuery) WithComments(opts ...func(*CommentQuery)) *ElectionQuery {
	query := (&CommentClient{config: eq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	eq.withComments = query
	return eq
}

// WithCandidates tells the query-builder to eager-load the nodes that are connected to
// the "candidates" edge. The optional arguments are used to configure the query builder of the edge.
func (eq *ElectionQuery) WithCandidates(opts ...func(*CandidateQuery)) *ElectionQuery {
	query := (&CandidateClient{config: eq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	eq.withCandidates = query
	return eq
}

// WithSettings tells the query-builder to eager-load the nodes that are connected to
// the "settings" edge. The optional arguments are used to configure the query builder of the edge.
func (eq *ElectionQuery) WithSettings(opts ...func(*ElectionSettingsQuery)) *ElectionQuery {
	query := (&ElectionSettingsClient{config: eq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	eq.withSettings = query
	return eq
}

// GroupBy is used to group vertices by one or more fields/columns.
// It is often used with aggregate functions, like: count, max, mean, min, sum.
//
// Example:
//
//	var v []struct {
//		Title string `json:"title,omitempty"`
//		Count int `json:"count,omitempty"`
//	}
//
//	client.Election.Query().
//		GroupBy(election.FieldTitle).
//		Aggregate(generated.Count()).
//		Scan(ctx, &v)
func (eq *ElectionQuery) GroupBy(field string, fields ...string) *ElectionGroupBy {
	eq.ctx.Fields = append([]string{field}, fields...)
	grbuild := &ElectionGroupBy{build: eq}
	grbuild.flds = &eq.ctx.Fields
	grbuild.label = election.Label
	grbuild.scan = grbuild.Scan
	return grbuild
}

// Select allows the selection one or more fields/columns for the given query,
// instead of selecting all fields in the entity.
//
// Example:
//
//	var v []struct {
//		Title string `json:"title,omitempty"`
//	}
//
//	client.Election.Query().
//		Select(election.FieldTitle).
//		Scan(ctx, &v)
func (eq *ElectionQuery) Select(fields ...string) *ElectionSelect {
	eq.ctx.Fields = append(eq.ctx.Fields, fields...)
	sbuild := &ElectionSelect{ElectionQuery: eq}
	sbuild.label = election.Label
	sbuild.flds, sbuild.scan = &eq.ctx.Fields, sbuild.Scan
	return sbuild
}

// Aggregate returns a ElectionSelect configured with the given aggregations.
func (eq *ElectionQuery) Aggregate(fns ...AggregateFunc) *ElectionSelect {
	return eq.Select().Aggregate(fns...)
}

func (eq *ElectionQuery) prepareQuery(ctx context.Context) error {
	for _, inter := range eq.inters {
		if inter == nil {
			return fmt.Errorf("generated: uninitialized interceptor (forgotten import generated/runtime?)")
		}
		if trv, ok := inter.(Traverser); ok {
			if err := trv.Traverse(ctx, eq); err != nil {
				return err
			}
		}
	}
	for _, f := range eq.ctx.Fields {
		if !election.ValidColumn(f) {
			return &ValidationError{Name: f, err: fmt.Errorf("generated: invalid field %q for query", f)}
		}
	}
	if eq.path != nil {
		prev, err := eq.path(ctx)
		if err != nil {
			return err
		}
		eq.sql = prev
	}
	return nil
}

func (eq *ElectionQuery) sqlAll(ctx context.Context, hooks ...queryHook) ([]*Election, error) {
	var (
		nodes       = []*Election{}
		withFKs     = eq.withFKs
		_spec       = eq.querySpec()
		loadedTypes = [5]bool{
			eq.withUser != nil,
			eq.withTags != nil,
			eq.withComments != nil,
			eq.withCandidates != nil,
			eq.withSettings != nil,
		}
	)
	if eq.withUser != nil {
		withFKs = true
	}
	if withFKs {
		_spec.Node.Columns = append(_spec.Node.Columns, election.ForeignKeys...)
	}
	_spec.ScanValues = func(columns []string) ([]any, error) {
		return (*Election).scanValues(nil, columns)
	}
	_spec.Assign = func(columns []string, values []any) error {
		node := &Election{config: eq.config}
		nodes = append(nodes, node)
		node.Edges.loadedTypes = loadedTypes
		return node.assignValues(columns, values)
	}
	for i := range hooks {
		hooks[i](ctx, _spec)
	}
	if err := sqlgraph.QueryNodes(ctx, eq.driver, _spec); err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nodes, nil
	}
	if query := eq.withUser; query != nil {
		if err := eq.loadUser(ctx, query, nodes, nil,
			func(n *Election, e *User) { n.Edges.User = e }); err != nil {
			return nil, err
		}
	}
	if query := eq.withTags; query != nil {
		if err := eq.loadTags(ctx, query, nodes,
			func(n *Election) { n.Edges.Tags = []*Tag{} },
			func(n *Election, e *Tag) { n.Edges.Tags = append(n.Edges.Tags, e) }); err != nil {
			return nil, err
		}
	}
	if query := eq.withComments; query != nil {
		if err := eq.loadComments(ctx, query, nodes,
			func(n *Election) { n.Edges.Comments = []*Comment{} },
			func(n *Election, e *Comment) { n.Edges.Comments = append(n.Edges.Comments, e) }); err != nil {
			return nil, err
		}
	}
	if query := eq.withCandidates; query != nil {
		if err := eq.loadCandidates(ctx, query, nodes,
			func(n *Election) { n.Edges.Candidates = []*Candidate{} },
			func(n *Election, e *Candidate) { n.Edges.Candidates = append(n.Edges.Candidates, e) }); err != nil {
			return nil, err
		}
	}
	if query := eq.withSettings; query != nil {
		if err := eq.loadSettings(ctx, query, nodes, nil,
			func(n *Election, e *ElectionSettings) { n.Edges.Settings = e }); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

func (eq *ElectionQuery) loadUser(ctx context.Context, query *UserQuery, nodes []*Election, init func(*Election), assign func(*Election, *User)) error {
	ids := make([]int, 0, len(nodes))
	nodeids := make(map[int][]*Election)
	for i := range nodes {
		if nodes[i].user_elections == nil {
			continue
		}
		fk := *nodes[i].user_elections
		if _, ok := nodeids[fk]; !ok {
			ids = append(ids, fk)
		}
		nodeids[fk] = append(nodeids[fk], nodes[i])
	}
	if len(ids) == 0 {
		return nil
	}
	query.Where(user.IDIn(ids...))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nodeids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "user_elections" returned %v`, n.ID)
		}
		for i := range nodes {
			assign(nodes[i], n)
		}
	}
	return nil
}
func (eq *ElectionQuery) loadTags(ctx context.Context, query *TagQuery, nodes []*Election, init func(*Election), assign func(*Election, *Tag)) error {
	edgeIDs := make([]driver.Value, len(nodes))
	byID := make(map[int]*Election)
	nids := make(map[int]map[*Election]struct{})
	for i, node := range nodes {
		edgeIDs[i] = node.ID
		byID[node.ID] = node
		if init != nil {
			init(node)
		}
	}
	query.Where(func(s *sql.Selector) {
		joinT := sql.Table(election.TagsTable)
		s.Join(joinT).On(s.C(tag.FieldID), joinT.C(election.TagsPrimaryKey[0]))
		s.Where(sql.InValues(joinT.C(election.TagsPrimaryKey[1]), edgeIDs...))
		columns := s.SelectedColumns()
		s.Select(joinT.C(election.TagsPrimaryKey[1]))
		s.AppendSelect(columns...)
		s.SetDistinct(false)
	})
	if err := query.prepareQuery(ctx); err != nil {
		return err
	}
	qr := QuerierFunc(func(ctx context.Context, q Query) (Value, error) {
		return query.sqlAll(ctx, func(_ context.Context, spec *sqlgraph.QuerySpec) {
			assign := spec.Assign
			values := spec.ScanValues
			spec.ScanValues = func(columns []string) ([]any, error) {
				values, err := values(columns[1:])
				if err != nil {
					return nil, err
				}
				return append([]any{new(sql.NullInt64)}, values...), nil
			}
			spec.Assign = func(columns []string, values []any) error {
				outValue := int(values[0].(*sql.NullInt64).Int64)
				inValue := int(values[1].(*sql.NullInt64).Int64)
				if nids[inValue] == nil {
					nids[inValue] = map[*Election]struct{}{byID[outValue]: {}}
					return assign(columns[1:], values[1:])
				}
				nids[inValue][byID[outValue]] = struct{}{}
				return nil
			}
		})
	})
	neighbors, err := withInterceptors[[]*Tag](ctx, query, qr, query.inters)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected "tags" node returned %v`, n.ID)
		}
		for kn := range nodes {
			assign(kn, n)
		}
	}
	return nil
}
func (eq *ElectionQuery) loadComments(ctx context.Context, query *CommentQuery, nodes []*Election, init func(*Election), assign func(*Election, *Comment)) error {
	fks := make([]driver.Value, 0, len(nodes))
	nodeids := make(map[int]*Election)
	for i := range nodes {
		fks = append(fks, nodes[i].ID)
		nodeids[nodes[i].ID] = nodes[i]
		if init != nil {
			init(nodes[i])
		}
	}
	query.withFKs = true
	query.Where(predicate.Comment(func(s *sql.Selector) {
		s.Where(sql.InValues(s.C(election.CommentsColumn), fks...))
	}))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		fk := n.election_comments
		if fk == nil {
			return fmt.Errorf(`foreign-key "election_comments" is nil for node %v`, n.ID)
		}
		node, ok := nodeids[*fk]
		if !ok {
			return fmt.Errorf(`unexpected referenced foreign-key "election_comments" returned %v for node %v`, *fk, n.ID)
		}
		assign(node, n)
	}
	return nil
}
func (eq *ElectionQuery) loadCandidates(ctx context.Context, query *CandidateQuery, nodes []*Election, init func(*Election), assign func(*Election, *Candidate)) error {
	fks := make([]driver.Value, 0, len(nodes))
	nodeids := make(map[int]*Election)
	for i := range nodes {
		fks = append(fks, nodes[i].ID)
		nodeids[nodes[i].ID] = nodes[i]
		if init != nil {
			init(nodes[i])
		}
	}
	query.withFKs = true
	query.Where(predicate.Candidate(func(s *sql.Selector) {
		s.Where(sql.InValues(s.C(election.CandidatesColumn), fks...))
	}))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		fk := n.election_candidates
		if fk == nil {
			return fmt.Errorf(`foreign-key "election_candidates" is nil for node %v`, n.ID)
		}
		node, ok := nodeids[*fk]
		if !ok {
			return fmt.Errorf(`unexpected referenced foreign-key "election_candidates" returned %v for node %v`, *fk, n.ID)
		}
		assign(node, n)
	}
	return nil
}
func (eq *ElectionQuery) loadSettings(ctx context.Context, query *ElectionSettingsQuery, nodes []*Election, init func(*Election), assign func(*Election, *ElectionSettings)) error {
	fks := make([]driver.Value, 0, len(nodes))
	nodeids := make(map[int]*Election)
	for i := range nodes {
		fks = append(fks, nodes[i].ID)
		nodeids[nodes[i].ID] = nodes[i]
	}
	query.withFKs = true
	query.Where(predicate.ElectionSettings(func(s *sql.Selector) {
		s.Where(sql.InValues(s.C(election.SettingsColumn), fks...))
	}))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		fk := n.election_settings
		if fk == nil {
			return fmt.Errorf(`foreign-key "election_settings" is nil for node %v`, n.ID)
		}
		node, ok := nodeids[*fk]
		if !ok {
			return fmt.Errorf(`unexpected referenced foreign-key "election_settings" returned %v for node %v`, *fk, n.ID)
		}
		assign(node, n)
	}
	return nil
}

func (eq *ElectionQuery) sqlCount(ctx context.Context) (int, error) {
	_spec := eq.querySpec()
	_spec.Node.Columns = eq.ctx.Fields
	if len(eq.ctx.Fields) > 0 {
		_spec.Unique = eq.ctx.Unique != nil && *eq.ctx.Unique
	}
	return sqlgraph.CountNodes(ctx, eq.driver, _spec)
}

func (eq *ElectionQuery) querySpec() *sqlgraph.QuerySpec {
	_spec := sqlgraph.NewQuerySpec(election.Table, election.Columns, sqlgraph.NewFieldSpec(election.FieldID, field.TypeInt))
	_spec.From = eq.sql
	if unique := eq.ctx.Unique; unique != nil {
		_spec.Unique = *unique
	} else if eq.path != nil {
		_spec.Unique = true
	}
	if fields := eq.ctx.Fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, election.FieldID)
		for i := range fields {
			if fields[i] != election.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, fields[i])
			}
		}
	}
	if ps := eq.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if limit := eq.ctx.Limit; limit != nil {
		_spec.Limit = *limit
	}
	if offset := eq.ctx.Offset; offset != nil {
		_spec.Offset = *offset
	}
	if ps := eq.order; len(ps) > 0 {
		_spec.Order = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	return _spec
}

func (eq *ElectionQuery) sqlQuery(ctx context.Context) *sql.Selector {
	builder := sql.Dialect(eq.driver.Dialect())
	t1 := builder.Table(election.Table)
	columns := eq.ctx.Fields
	if len(columns) == 0 {
		columns = election.Columns
	}
	selector := builder.Select(t1.Columns(columns...)...).From(t1)
	if eq.sql != nil {
		selector = eq.sql
		selector.Select(selector.Columns(columns...)...)
	}
	if eq.ctx.Unique != nil && *eq.ctx.Unique {
		selector.Distinct()
	}
	for _, p := range eq.predicates {
		p(selector)
	}
	for _, p := range eq.order {
		p(selector)
	}
	if offset := eq.ctx.Offset; offset != nil {
		// limit is mandatory for offset clause. We start
		// with default value, and override it below if needed.
		selector.Offset(*offset).Limit(math.MaxInt32)
	}
	if limit := eq.ctx.Limit; limit != nil {
		selector.Limit(*limit)
	}
	return selector
}

// ElectionGroupBy is the group-by builder for Election entities.
type ElectionGroupBy struct {
	selector
	build *ElectionQuery
}

// Aggregate adds the given aggregation functions to the group-by query.
func (egb *ElectionGroupBy) Aggregate(fns ...AggregateFunc) *ElectionGroupBy {
	egb.fns = append(egb.fns, fns...)
	return egb
}

// Scan applies the selector query and scans the result into the given value.
func (egb *ElectionGroupBy) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, egb.build.ctx, ent.OpQueryGroupBy)
	if err := egb.build.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*ElectionQuery, *ElectionGroupBy](ctx, egb.build, egb, egb.build.inters, v)
}

func (egb *ElectionGroupBy) sqlScan(ctx context.Context, root *ElectionQuery, v any) error {
	selector := root.sqlQuery(ctx).Select()
	aggregation := make([]string, 0, len(egb.fns))
	for _, fn := range egb.fns {
		aggregation = append(aggregation, fn(selector))
	}
	if len(selector.SelectedColumns()) == 0 {
		columns := make([]string, 0, len(*egb.flds)+len(egb.fns))
		for _, f := range *egb.flds {
			columns = append(columns, selector.C(f))
		}
		columns = append(columns, aggregation...)
		selector.Select(columns...)
	}
	selector.GroupBy(selector.Columns(*egb.flds...)...)
	if err := selector.Err(); err != nil {
		return err
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := egb.build.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}

// ElectionSelect is the builder for selecting fields of Election entities.
type ElectionSelect struct {
	*ElectionQuery
	selector
}

// Aggregate adds the given aggregation functions to the selector query.
func (es *ElectionSelect) Aggregate(fns ...AggregateFunc) *ElectionSelect {
	es.fns = append(es.fns, fns...)
	return es
}

// Scan applies the selector query and scans the result into the given value.
func (es *ElectionSelect) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, es.ctx, ent.OpQuerySelect)
	if err := es.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*ElectionQuery, *ElectionSelect](ctx, es.ElectionQuery, es, es.inters, v)
}

func (es *ElectionSelect) sqlScan(ctx context.Context, root *ElectionQuery, v any) error {
	selector := root.sqlQuery(ctx)
	aggregation := make([]string, 0, len(es.fns))
	for _, fn := range es.fns {
		aggregation = append(aggregation, fn(selector))
	}
	switch n := len(*es.selector.flds); {
	case n == 0 && len(aggregation) > 0:
		selector.Select(aggregation...)
	case n != 0 && len(aggregation) > 0:
		selector.AppendSelect(aggregation...)
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := es.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}
