// Code generated by ent, DO NOT EDIT.

package generated

import (
	"fmt"
	"strings"
	"time"
	"voting-system/ent/generated/comment"
	"voting-system/ent/generated/election"
	"voting-system/ent/generated/user"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
)

// Comment is the model entity for the Comment schema.
type Comment struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// Contents holds the value of the "contents" field.
	Contents string `json:"contents,omitempty"`
	// Timestamp holds the value of the "timestamp" field.
	Timestamp time.Time `json:"timestamp,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the CommentQuery when eager-loading is set.
	Edges             CommentEdges `json:"edges"`
	comment_children  *int
	election_comments *int
	user_comments     *int
	selectValues      sql.SelectValues
}

// CommentEdges holds the relations/edges for other nodes in the graph.
type CommentEdges struct {
	// Parent holds the value of the parent edge.
	Parent *Comment `json:"parent,omitempty"`
	// Children holds the value of the children edge.
	Children []*Comment `json:"children,omitempty"`
	// User holds the value of the user edge.
	User *User `json:"user,omitempty"`
	// Election holds the value of the election edge.
	Election *Election `json:"election,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [4]bool
}

// ParentOrErr returns the Parent value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e CommentEdges) ParentOrErr() (*Comment, error) {
	if e.Parent != nil {
		return e.Parent, nil
	} else if e.loadedTypes[0] {
		return nil, &NotFoundError{label: comment.Label}
	}
	return nil, &NotLoadedError{edge: "parent"}
}

// ChildrenOrErr returns the Children value or an error if the edge
// was not loaded in eager-loading.
func (e CommentEdges) ChildrenOrErr() ([]*Comment, error) {
	if e.loadedTypes[1] {
		return e.Children, nil
	}
	return nil, &NotLoadedError{edge: "children"}
}

// UserOrErr returns the User value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e CommentEdges) UserOrErr() (*User, error) {
	if e.User != nil {
		return e.User, nil
	} else if e.loadedTypes[2] {
		return nil, &NotFoundError{label: user.Label}
	}
	return nil, &NotLoadedError{edge: "user"}
}

// ElectionOrErr returns the Election value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e CommentEdges) ElectionOrErr() (*Election, error) {
	if e.Election != nil {
		return e.Election, nil
	} else if e.loadedTypes[3] {
		return nil, &NotFoundError{label: election.Label}
	}
	return nil, &NotLoadedError{edge: "election"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Comment) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case comment.FieldID:
			values[i] = new(sql.NullInt64)
		case comment.FieldContents:
			values[i] = new(sql.NullString)
		case comment.FieldTimestamp:
			values[i] = new(sql.NullTime)
		case comment.ForeignKeys[0]: // comment_children
			values[i] = new(sql.NullInt64)
		case comment.ForeignKeys[1]: // election_comments
			values[i] = new(sql.NullInt64)
		case comment.ForeignKeys[2]: // user_comments
			values[i] = new(sql.NullInt64)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Comment fields.
func (c *Comment) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case comment.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			c.ID = int(value.Int64)
		case comment.FieldContents:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field contents", values[i])
			} else if value.Valid {
				c.Contents = value.String
			}
		case comment.FieldTimestamp:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field timestamp", values[i])
			} else if value.Valid {
				c.Timestamp = value.Time
			}
		case comment.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field comment_children", value)
			} else if value.Valid {
				c.comment_children = new(int)
				*c.comment_children = int(value.Int64)
			}
		case comment.ForeignKeys[1]:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field election_comments", value)
			} else if value.Valid {
				c.election_comments = new(int)
				*c.election_comments = int(value.Int64)
			}
		case comment.ForeignKeys[2]:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field user_comments", value)
			} else if value.Valid {
				c.user_comments = new(int)
				*c.user_comments = int(value.Int64)
			}
		default:
			c.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the Comment.
// This includes values selected through modifiers, order, etc.
func (c *Comment) Value(name string) (ent.Value, error) {
	return c.selectValues.Get(name)
}

// QueryParent queries the "parent" edge of the Comment entity.
func (c *Comment) QueryParent() *CommentQuery {
	return NewCommentClient(c.config).QueryParent(c)
}

// QueryChildren queries the "children" edge of the Comment entity.
func (c *Comment) QueryChildren() *CommentQuery {
	return NewCommentClient(c.config).QueryChildren(c)
}

// QueryUser queries the "user" edge of the Comment entity.
func (c *Comment) QueryUser() *UserQuery {
	return NewCommentClient(c.config).QueryUser(c)
}

// QueryElection queries the "election" edge of the Comment entity.
func (c *Comment) QueryElection() *ElectionQuery {
	return NewCommentClient(c.config).QueryElection(c)
}

// Update returns a builder for updating this Comment.
// Note that you need to call Comment.Unwrap() before calling this method if this Comment
// was returned from a transaction, and the transaction was committed or rolled back.
func (c *Comment) Update() *CommentUpdateOne {
	return NewCommentClient(c.config).UpdateOne(c)
}

// Unwrap unwraps the Comment entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (c *Comment) Unwrap() *Comment {
	_tx, ok := c.config.driver.(*txDriver)
	if !ok {
		panic("generated: Comment is not a transactional entity")
	}
	c.config.driver = _tx.drv
	return c
}

// String implements the fmt.Stringer.
func (c *Comment) String() string {
	var builder strings.Builder
	builder.WriteString("Comment(")
	builder.WriteString(fmt.Sprintf("id=%v, ", c.ID))
	builder.WriteString("contents=")
	builder.WriteString(c.Contents)
	builder.WriteString(", ")
	builder.WriteString("timestamp=")
	builder.WriteString(c.Timestamp.Format(time.ANSIC))
	builder.WriteByte(')')
	return builder.String()
}

// Comments is a parsable slice of Comment.
type Comments []*Comment
