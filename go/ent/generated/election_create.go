// Code generated by ent, DO NOT EDIT.

package generated

import (
	"context"
	"errors"
	"fmt"
	"voting-system/ent/generated/candidate"
	"voting-system/ent/generated/comment"
	"voting-system/ent/generated/election"
	"voting-system/ent/generated/electionfilters"
	"voting-system/ent/generated/electionsettings"
	"voting-system/ent/generated/tag"
	"voting-system/ent/generated/user"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// ElectionCreate is the builder for creating a Election entity.
type ElectionCreate struct {
	config
	mutation *ElectionMutation
	hooks    []Hook
}

// SetTitle sets the "title" field.
func (ec *ElectionCreate) SetTitle(s string) *ElectionCreate {
	ec.mutation.SetTitle(s)
	return ec
}

// SetDescription sets the "description" field.
func (ec *ElectionCreate) SetDescription(s string) *ElectionCreate {
	ec.mutation.SetDescription(s)
	return ec
}

// SetUserID sets the "user" edge to the User entity by ID.
func (ec *ElectionCreate) SetUserID(id int) *ElectionCreate {
	ec.mutation.SetUserID(id)
	return ec
}

// SetNillableUserID sets the "user" edge to the User entity by ID if the given value is not nil.
func (ec *ElectionCreate) SetNillableUserID(id *int) *ElectionCreate {
	if id != nil {
		ec = ec.SetUserID(*id)
	}
	return ec
}

// SetUser sets the "user" edge to the User entity.
func (ec *ElectionCreate) SetUser(u *User) *ElectionCreate {
	return ec.SetUserID(u.ID)
}

// AddTagIDs adds the "tags" edge to the Tag entity by IDs.
func (ec *ElectionCreate) AddTagIDs(ids ...int) *ElectionCreate {
	ec.mutation.AddTagIDs(ids...)
	return ec
}

// AddTags adds the "tags" edges to the Tag entity.
func (ec *ElectionCreate) AddTags(t ...*Tag) *ElectionCreate {
	ids := make([]int, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return ec.AddTagIDs(ids...)
}

// AddCommentIDs adds the "comments" edge to the Comment entity by IDs.
func (ec *ElectionCreate) AddCommentIDs(ids ...int) *ElectionCreate {
	ec.mutation.AddCommentIDs(ids...)
	return ec
}

// AddComments adds the "comments" edges to the Comment entity.
func (ec *ElectionCreate) AddComments(c ...*Comment) *ElectionCreate {
	ids := make([]int, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return ec.AddCommentIDs(ids...)
}

// AddCandidateIDs adds the "candidates" edge to the Candidate entity by IDs.
func (ec *ElectionCreate) AddCandidateIDs(ids ...int) *ElectionCreate {
	ec.mutation.AddCandidateIDs(ids...)
	return ec
}

// AddCandidates adds the "candidates" edges to the Candidate entity.
func (ec *ElectionCreate) AddCandidates(c ...*Candidate) *ElectionCreate {
	ids := make([]int, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return ec.AddCandidateIDs(ids...)
}

// SetSettingsID sets the "settings" edge to the ElectionSettings entity by ID.
func (ec *ElectionCreate) SetSettingsID(id int) *ElectionCreate {
	ec.mutation.SetSettingsID(id)
	return ec
}

// SetNillableSettingsID sets the "settings" edge to the ElectionSettings entity by ID if the given value is not nil.
func (ec *ElectionCreate) SetNillableSettingsID(id *int) *ElectionCreate {
	if id != nil {
		ec = ec.SetSettingsID(*id)
	}
	return ec
}

// SetSettings sets the "settings" edge to the ElectionSettings entity.
func (ec *ElectionCreate) SetSettings(e *ElectionSettings) *ElectionCreate {
	return ec.SetSettingsID(e.ID)
}

// SetFiltersID sets the "filters" edge to the ElectionFilters entity by ID.
func (ec *ElectionCreate) SetFiltersID(id int) *ElectionCreate {
	ec.mutation.SetFiltersID(id)
	return ec
}

// SetNillableFiltersID sets the "filters" edge to the ElectionFilters entity by ID if the given value is not nil.
func (ec *ElectionCreate) SetNillableFiltersID(id *int) *ElectionCreate {
	if id != nil {
		ec = ec.SetFiltersID(*id)
	}
	return ec
}

// SetFilters sets the "filters" edge to the ElectionFilters entity.
func (ec *ElectionCreate) SetFilters(e *ElectionFilters) *ElectionCreate {
	return ec.SetFiltersID(e.ID)
}

// Mutation returns the ElectionMutation object of the builder.
func (ec *ElectionCreate) Mutation() *ElectionMutation {
	return ec.mutation
}

// Save creates the Election in the database.
func (ec *ElectionCreate) Save(ctx context.Context) (*Election, error) {
	return withHooks(ctx, ec.sqlSave, ec.mutation, ec.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (ec *ElectionCreate) SaveX(ctx context.Context) *Election {
	v, err := ec.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (ec *ElectionCreate) Exec(ctx context.Context) error {
	_, err := ec.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ec *ElectionCreate) ExecX(ctx context.Context) {
	if err := ec.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (ec *ElectionCreate) check() error {
	if _, ok := ec.mutation.Title(); !ok {
		return &ValidationError{Name: "title", err: errors.New(`generated: missing required field "Election.title"`)}
	}
	if v, ok := ec.mutation.Title(); ok {
		if err := election.TitleValidator(v); err != nil {
			return &ValidationError{Name: "title", err: fmt.Errorf(`generated: validator failed for field "Election.title": %w`, err)}
		}
	}
	if _, ok := ec.mutation.Description(); !ok {
		return &ValidationError{Name: "description", err: errors.New(`generated: missing required field "Election.description"`)}
	}
	if v, ok := ec.mutation.Description(); ok {
		if err := election.DescriptionValidator(v); err != nil {
			return &ValidationError{Name: "description", err: fmt.Errorf(`generated: validator failed for field "Election.description": %w`, err)}
		}
	}
	return nil
}

func (ec *ElectionCreate) sqlSave(ctx context.Context) (*Election, error) {
	if err := ec.check(); err != nil {
		return nil, err
	}
	_node, _spec := ec.createSpec()
	if err := sqlgraph.CreateNode(ctx, ec.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	ec.mutation.id = &_node.ID
	ec.mutation.done = true
	return _node, nil
}

func (ec *ElectionCreate) createSpec() (*Election, *sqlgraph.CreateSpec) {
	var (
		_node = &Election{config: ec.config}
		_spec = sqlgraph.NewCreateSpec(election.Table, sqlgraph.NewFieldSpec(election.FieldID, field.TypeInt))
	)
	if value, ok := ec.mutation.Title(); ok {
		_spec.SetField(election.FieldTitle, field.TypeString, value)
		_node.Title = value
	}
	if value, ok := ec.mutation.Description(); ok {
		_spec.SetField(election.FieldDescription, field.TypeString, value)
		_node.Description = value
	}
	if nodes := ec.mutation.UserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   election.UserTable,
			Columns: []string{election.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.user_elections = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := ec.mutation.TagsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   election.TagsTable,
			Columns: election.TagsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(tag.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := ec.mutation.CommentsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   election.CommentsTable,
			Columns: []string{election.CommentsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(comment.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := ec.mutation.CandidatesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   election.CandidatesTable,
			Columns: []string{election.CandidatesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(candidate.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := ec.mutation.SettingsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   election.SettingsTable,
			Columns: []string{election.SettingsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(electionsettings.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := ec.mutation.FiltersIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   election.FiltersTable,
			Columns: []string{election.FiltersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(electionfilters.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// ElectionCreateBulk is the builder for creating many Election entities in bulk.
type ElectionCreateBulk struct {
	config
	err      error
	builders []*ElectionCreate
}

// Save creates the Election entities in the database.
func (ecb *ElectionCreateBulk) Save(ctx context.Context) ([]*Election, error) {
	if ecb.err != nil {
		return nil, ecb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(ecb.builders))
	nodes := make([]*Election, len(ecb.builders))
	mutators := make([]Mutator, len(ecb.builders))
	for i := range ecb.builders {
		func(i int, root context.Context) {
			builder := ecb.builders[i]
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*ElectionMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, ecb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, ecb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, ecb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (ecb *ElectionCreateBulk) SaveX(ctx context.Context) []*Election {
	v, err := ecb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (ecb *ElectionCreateBulk) Exec(ctx context.Context) error {
	_, err := ecb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ecb *ElectionCreateBulk) ExecX(ctx context.Context) {
	if err := ecb.Exec(ctx); err != nil {
		panic(err)
	}
}
