// Code generated by ent, DO NOT EDIT.

package generated

import (
	"context"
	"errors"
	"fmt"
	"time"
	"voting-system/ent/generated/candidate"
	"voting-system/ent/generated/election"
	"voting-system/ent/generated/predicate"
	"voting-system/ent/generated/vote"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// CandidateUpdate is the builder for updating Candidate entities.
type CandidateUpdate struct {
	config
	hooks    []Hook
	mutation *CandidateMutation
}

// Where appends a list predicates to the CandidateUpdate builder.
func (cu *CandidateUpdate) Where(ps ...predicate.Candidate) *CandidateUpdate {
	cu.mutation.Where(ps...)
	return cu
}

// SetUpdateTime sets the "update_time" field.
func (cu *CandidateUpdate) SetUpdateTime(t time.Time) *CandidateUpdate {
	cu.mutation.SetUpdateTime(t)
	return cu
}

// SetName sets the "name" field.
func (cu *CandidateUpdate) SetName(s string) *CandidateUpdate {
	cu.mutation.SetName(s)
	return cu
}

// SetNillableName sets the "name" field if the given value is not nil.
func (cu *CandidateUpdate) SetNillableName(s *string) *CandidateUpdate {
	if s != nil {
		cu.SetName(*s)
	}
	return cu
}

// SetDescription sets the "description" field.
func (cu *CandidateUpdate) SetDescription(s string) *CandidateUpdate {
	cu.mutation.SetDescription(s)
	return cu
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (cu *CandidateUpdate) SetNillableDescription(s *string) *CandidateUpdate {
	if s != nil {
		cu.SetDescription(*s)
	}
	return cu
}

// SetPhotoURL sets the "photo_url" field.
func (cu *CandidateUpdate) SetPhotoURL(s string) *CandidateUpdate {
	cu.mutation.SetPhotoURL(s)
	return cu
}

// SetNillablePhotoURL sets the "photo_url" field if the given value is not nil.
func (cu *CandidateUpdate) SetNillablePhotoURL(s *string) *CandidateUpdate {
	if s != nil {
		cu.SetPhotoURL(*s)
	}
	return cu
}

// ClearPhotoURL clears the value of the "photo_url" field.
func (cu *CandidateUpdate) ClearPhotoURL() *CandidateUpdate {
	cu.mutation.ClearPhotoURL()
	return cu
}

// SetVotesCount sets the "votes_count" field.
func (cu *CandidateUpdate) SetVotesCount(i int) *CandidateUpdate {
	cu.mutation.ResetVotesCount()
	cu.mutation.SetVotesCount(i)
	return cu
}

// SetNillableVotesCount sets the "votes_count" field if the given value is not nil.
func (cu *CandidateUpdate) SetNillableVotesCount(i *int) *CandidateUpdate {
	if i != nil {
		cu.SetVotesCount(*i)
	}
	return cu
}

// AddVotesCount adds i to the "votes_count" field.
func (cu *CandidateUpdate) AddVotesCount(i int) *CandidateUpdate {
	cu.mutation.AddVotesCount(i)
	return cu
}

// SetElectionID sets the "election" edge to the Election entity by ID.
func (cu *CandidateUpdate) SetElectionID(id int) *CandidateUpdate {
	cu.mutation.SetElectionID(id)
	return cu
}

// SetNillableElectionID sets the "election" edge to the Election entity by ID if the given value is not nil.
func (cu *CandidateUpdate) SetNillableElectionID(id *int) *CandidateUpdate {
	if id != nil {
		cu = cu.SetElectionID(*id)
	}
	return cu
}

// SetElection sets the "election" edge to the Election entity.
func (cu *CandidateUpdate) SetElection(e *Election) *CandidateUpdate {
	return cu.SetElectionID(e.ID)
}

// AddVoteIDs adds the "votes" edge to the Vote entity by IDs.
func (cu *CandidateUpdate) AddVoteIDs(ids ...int) *CandidateUpdate {
	cu.mutation.AddVoteIDs(ids...)
	return cu
}

// AddVotes adds the "votes" edges to the Vote entity.
func (cu *CandidateUpdate) AddVotes(v ...*Vote) *CandidateUpdate {
	ids := make([]int, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return cu.AddVoteIDs(ids...)
}

// Mutation returns the CandidateMutation object of the builder.
func (cu *CandidateUpdate) Mutation() *CandidateMutation {
	return cu.mutation
}

// ClearElection clears the "election" edge to the Election entity.
func (cu *CandidateUpdate) ClearElection() *CandidateUpdate {
	cu.mutation.ClearElection()
	return cu
}

// ClearVotes clears all "votes" edges to the Vote entity.
func (cu *CandidateUpdate) ClearVotes() *CandidateUpdate {
	cu.mutation.ClearVotes()
	return cu
}

// RemoveVoteIDs removes the "votes" edge to Vote entities by IDs.
func (cu *CandidateUpdate) RemoveVoteIDs(ids ...int) *CandidateUpdate {
	cu.mutation.RemoveVoteIDs(ids...)
	return cu
}

// RemoveVotes removes "votes" edges to Vote entities.
func (cu *CandidateUpdate) RemoveVotes(v ...*Vote) *CandidateUpdate {
	ids := make([]int, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return cu.RemoveVoteIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (cu *CandidateUpdate) Save(ctx context.Context) (int, error) {
	cu.defaults()
	return withHooks(ctx, cu.sqlSave, cu.mutation, cu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (cu *CandidateUpdate) SaveX(ctx context.Context) int {
	affected, err := cu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (cu *CandidateUpdate) Exec(ctx context.Context) error {
	_, err := cu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (cu *CandidateUpdate) ExecX(ctx context.Context) {
	if err := cu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (cu *CandidateUpdate) defaults() {
	if _, ok := cu.mutation.UpdateTime(); !ok {
		v := candidate.UpdateDefaultUpdateTime()
		cu.mutation.SetUpdateTime(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (cu *CandidateUpdate) check() error {
	if v, ok := cu.mutation.Name(); ok {
		if err := candidate.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf(`generated: validator failed for field "Candidate.name": %w`, err)}
		}
	}
	if v, ok := cu.mutation.Description(); ok {
		if err := candidate.DescriptionValidator(v); err != nil {
			return &ValidationError{Name: "description", err: fmt.Errorf(`generated: validator failed for field "Candidate.description": %w`, err)}
		}
	}
	if v, ok := cu.mutation.VotesCount(); ok {
		if err := candidate.VotesCountValidator(v); err != nil {
			return &ValidationError{Name: "votes_count", err: fmt.Errorf(`generated: validator failed for field "Candidate.votes_count": %w`, err)}
		}
	}
	return nil
}

func (cu *CandidateUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := cu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(candidate.Table, candidate.Columns, sqlgraph.NewFieldSpec(candidate.FieldID, field.TypeInt))
	if ps := cu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := cu.mutation.UpdateTime(); ok {
		_spec.SetField(candidate.FieldUpdateTime, field.TypeTime, value)
	}
	if value, ok := cu.mutation.Name(); ok {
		_spec.SetField(candidate.FieldName, field.TypeString, value)
	}
	if value, ok := cu.mutation.Description(); ok {
		_spec.SetField(candidate.FieldDescription, field.TypeString, value)
	}
	if value, ok := cu.mutation.PhotoURL(); ok {
		_spec.SetField(candidate.FieldPhotoURL, field.TypeString, value)
	}
	if cu.mutation.PhotoURLCleared() {
		_spec.ClearField(candidate.FieldPhotoURL, field.TypeString)
	}
	if value, ok := cu.mutation.VotesCount(); ok {
		_spec.SetField(candidate.FieldVotesCount, field.TypeInt, value)
	}
	if value, ok := cu.mutation.AddedVotesCount(); ok {
		_spec.AddField(candidate.FieldVotesCount, field.TypeInt, value)
	}
	if cu.mutation.ElectionCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   candidate.ElectionTable,
			Columns: []string{candidate.ElectionColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(election.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cu.mutation.ElectionIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   candidate.ElectionTable,
			Columns: []string{candidate.ElectionColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(election.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if cu.mutation.VotesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   candidate.VotesTable,
			Columns: []string{candidate.VotesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(vote.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cu.mutation.RemovedVotesIDs(); len(nodes) > 0 && !cu.mutation.VotesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   candidate.VotesTable,
			Columns: []string{candidate.VotesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(vote.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cu.mutation.VotesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   candidate.VotesTable,
			Columns: []string{candidate.VotesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(vote.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, cu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{candidate.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	cu.mutation.done = true
	return n, nil
}

// CandidateUpdateOne is the builder for updating a single Candidate entity.
type CandidateUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *CandidateMutation
}

// SetUpdateTime sets the "update_time" field.
func (cuo *CandidateUpdateOne) SetUpdateTime(t time.Time) *CandidateUpdateOne {
	cuo.mutation.SetUpdateTime(t)
	return cuo
}

// SetName sets the "name" field.
func (cuo *CandidateUpdateOne) SetName(s string) *CandidateUpdateOne {
	cuo.mutation.SetName(s)
	return cuo
}

// SetNillableName sets the "name" field if the given value is not nil.
func (cuo *CandidateUpdateOne) SetNillableName(s *string) *CandidateUpdateOne {
	if s != nil {
		cuo.SetName(*s)
	}
	return cuo
}

// SetDescription sets the "description" field.
func (cuo *CandidateUpdateOne) SetDescription(s string) *CandidateUpdateOne {
	cuo.mutation.SetDescription(s)
	return cuo
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (cuo *CandidateUpdateOne) SetNillableDescription(s *string) *CandidateUpdateOne {
	if s != nil {
		cuo.SetDescription(*s)
	}
	return cuo
}

// SetPhotoURL sets the "photo_url" field.
func (cuo *CandidateUpdateOne) SetPhotoURL(s string) *CandidateUpdateOne {
	cuo.mutation.SetPhotoURL(s)
	return cuo
}

// SetNillablePhotoURL sets the "photo_url" field if the given value is not nil.
func (cuo *CandidateUpdateOne) SetNillablePhotoURL(s *string) *CandidateUpdateOne {
	if s != nil {
		cuo.SetPhotoURL(*s)
	}
	return cuo
}

// ClearPhotoURL clears the value of the "photo_url" field.
func (cuo *CandidateUpdateOne) ClearPhotoURL() *CandidateUpdateOne {
	cuo.mutation.ClearPhotoURL()
	return cuo
}

// SetVotesCount sets the "votes_count" field.
func (cuo *CandidateUpdateOne) SetVotesCount(i int) *CandidateUpdateOne {
	cuo.mutation.ResetVotesCount()
	cuo.mutation.SetVotesCount(i)
	return cuo
}

// SetNillableVotesCount sets the "votes_count" field if the given value is not nil.
func (cuo *CandidateUpdateOne) SetNillableVotesCount(i *int) *CandidateUpdateOne {
	if i != nil {
		cuo.SetVotesCount(*i)
	}
	return cuo
}

// AddVotesCount adds i to the "votes_count" field.
func (cuo *CandidateUpdateOne) AddVotesCount(i int) *CandidateUpdateOne {
	cuo.mutation.AddVotesCount(i)
	return cuo
}

// SetElectionID sets the "election" edge to the Election entity by ID.
func (cuo *CandidateUpdateOne) SetElectionID(id int) *CandidateUpdateOne {
	cuo.mutation.SetElectionID(id)
	return cuo
}

// SetNillableElectionID sets the "election" edge to the Election entity by ID if the given value is not nil.
func (cuo *CandidateUpdateOne) SetNillableElectionID(id *int) *CandidateUpdateOne {
	if id != nil {
		cuo = cuo.SetElectionID(*id)
	}
	return cuo
}

// SetElection sets the "election" edge to the Election entity.
func (cuo *CandidateUpdateOne) SetElection(e *Election) *CandidateUpdateOne {
	return cuo.SetElectionID(e.ID)
}

// AddVoteIDs adds the "votes" edge to the Vote entity by IDs.
func (cuo *CandidateUpdateOne) AddVoteIDs(ids ...int) *CandidateUpdateOne {
	cuo.mutation.AddVoteIDs(ids...)
	return cuo
}

// AddVotes adds the "votes" edges to the Vote entity.
func (cuo *CandidateUpdateOne) AddVotes(v ...*Vote) *CandidateUpdateOne {
	ids := make([]int, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return cuo.AddVoteIDs(ids...)
}

// Mutation returns the CandidateMutation object of the builder.
func (cuo *CandidateUpdateOne) Mutation() *CandidateMutation {
	return cuo.mutation
}

// ClearElection clears the "election" edge to the Election entity.
func (cuo *CandidateUpdateOne) ClearElection() *CandidateUpdateOne {
	cuo.mutation.ClearElection()
	return cuo
}

// ClearVotes clears all "votes" edges to the Vote entity.
func (cuo *CandidateUpdateOne) ClearVotes() *CandidateUpdateOne {
	cuo.mutation.ClearVotes()
	return cuo
}

// RemoveVoteIDs removes the "votes" edge to Vote entities by IDs.
func (cuo *CandidateUpdateOne) RemoveVoteIDs(ids ...int) *CandidateUpdateOne {
	cuo.mutation.RemoveVoteIDs(ids...)
	return cuo
}

// RemoveVotes removes "votes" edges to Vote entities.
func (cuo *CandidateUpdateOne) RemoveVotes(v ...*Vote) *CandidateUpdateOne {
	ids := make([]int, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return cuo.RemoveVoteIDs(ids...)
}

// Where appends a list predicates to the CandidateUpdate builder.
func (cuo *CandidateUpdateOne) Where(ps ...predicate.Candidate) *CandidateUpdateOne {
	cuo.mutation.Where(ps...)
	return cuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (cuo *CandidateUpdateOne) Select(field string, fields ...string) *CandidateUpdateOne {
	cuo.fields = append([]string{field}, fields...)
	return cuo
}

// Save executes the query and returns the updated Candidate entity.
func (cuo *CandidateUpdateOne) Save(ctx context.Context) (*Candidate, error) {
	cuo.defaults()
	return withHooks(ctx, cuo.sqlSave, cuo.mutation, cuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (cuo *CandidateUpdateOne) SaveX(ctx context.Context) *Candidate {
	node, err := cuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (cuo *CandidateUpdateOne) Exec(ctx context.Context) error {
	_, err := cuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (cuo *CandidateUpdateOne) ExecX(ctx context.Context) {
	if err := cuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (cuo *CandidateUpdateOne) defaults() {
	if _, ok := cuo.mutation.UpdateTime(); !ok {
		v := candidate.UpdateDefaultUpdateTime()
		cuo.mutation.SetUpdateTime(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (cuo *CandidateUpdateOne) check() error {
	if v, ok := cuo.mutation.Name(); ok {
		if err := candidate.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf(`generated: validator failed for field "Candidate.name": %w`, err)}
		}
	}
	if v, ok := cuo.mutation.Description(); ok {
		if err := candidate.DescriptionValidator(v); err != nil {
			return &ValidationError{Name: "description", err: fmt.Errorf(`generated: validator failed for field "Candidate.description": %w`, err)}
		}
	}
	if v, ok := cuo.mutation.VotesCount(); ok {
		if err := candidate.VotesCountValidator(v); err != nil {
			return &ValidationError{Name: "votes_count", err: fmt.Errorf(`generated: validator failed for field "Candidate.votes_count": %w`, err)}
		}
	}
	return nil
}

func (cuo *CandidateUpdateOne) sqlSave(ctx context.Context) (_node *Candidate, err error) {
	if err := cuo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(candidate.Table, candidate.Columns, sqlgraph.NewFieldSpec(candidate.FieldID, field.TypeInt))
	id, ok := cuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`generated: missing "Candidate.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := cuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, candidate.FieldID)
		for _, f := range fields {
			if !candidate.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("generated: invalid field %q for query", f)}
			}
			if f != candidate.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := cuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := cuo.mutation.UpdateTime(); ok {
		_spec.SetField(candidate.FieldUpdateTime, field.TypeTime, value)
	}
	if value, ok := cuo.mutation.Name(); ok {
		_spec.SetField(candidate.FieldName, field.TypeString, value)
	}
	if value, ok := cuo.mutation.Description(); ok {
		_spec.SetField(candidate.FieldDescription, field.TypeString, value)
	}
	if value, ok := cuo.mutation.PhotoURL(); ok {
		_spec.SetField(candidate.FieldPhotoURL, field.TypeString, value)
	}
	if cuo.mutation.PhotoURLCleared() {
		_spec.ClearField(candidate.FieldPhotoURL, field.TypeString)
	}
	if value, ok := cuo.mutation.VotesCount(); ok {
		_spec.SetField(candidate.FieldVotesCount, field.TypeInt, value)
	}
	if value, ok := cuo.mutation.AddedVotesCount(); ok {
		_spec.AddField(candidate.FieldVotesCount, field.TypeInt, value)
	}
	if cuo.mutation.ElectionCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   candidate.ElectionTable,
			Columns: []string{candidate.ElectionColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(election.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cuo.mutation.ElectionIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   candidate.ElectionTable,
			Columns: []string{candidate.ElectionColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(election.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if cuo.mutation.VotesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   candidate.VotesTable,
			Columns: []string{candidate.VotesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(vote.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cuo.mutation.RemovedVotesIDs(); len(nodes) > 0 && !cuo.mutation.VotesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   candidate.VotesTable,
			Columns: []string{candidate.VotesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(vote.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cuo.mutation.VotesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   candidate.VotesTable,
			Columns: []string{candidate.VotesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(vote.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Candidate{config: cuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, cuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{candidate.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	cuo.mutation.done = true
	return _node, nil
}
