// Code generated by ent, DO NOT EDIT.

package generated

import (
	"fmt"
	"strings"
	"voting-system/ent/generated/election"
	"voting-system/ent/generated/electionfilters"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
)

// ElectionFilters is the model entity for the ElectionFilters schema.
type ElectionFilters struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// HasFirstName holds the value of the "has_first_name" field.
	HasFirstName bool `json:"has_first_name,omitempty"`
	// HasLastName holds the value of the "has_last_name" field.
	HasLastName bool `json:"has_last_name,omitempty"`
	// HasBirthdate holds the value of the "has_birthdate" field.
	HasBirthdate bool `json:"has_birthdate,omitempty"`
	// HasPhoneNumber holds the value of the "has_phone_number" field.
	HasPhoneNumber bool `json:"has_phone_number,omitempty"`
	// HasBio holds the value of the "has_bio" field.
	HasBio bool `json:"has_bio,omitempty"`
	// HasAddress holds the value of the "has_address" field.
	HasAddress bool `json:"has_address,omitempty"`
	// HasPhotoURL holds the value of the "has_photo_url" field.
	HasPhotoURL bool `json:"has_photo_url,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the ElectionFiltersQuery when eager-loading is set.
	Edges            ElectionFiltersEdges `json:"edges"`
	election_filters *int
	selectValues     sql.SelectValues
}

// ElectionFiltersEdges holds the relations/edges for other nodes in the graph.
type ElectionFiltersEdges struct {
	// Election holds the value of the election edge.
	Election *Election `json:"election,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
}

// ElectionOrErr returns the Election value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e ElectionFiltersEdges) ElectionOrErr() (*Election, error) {
	if e.Election != nil {
		return e.Election, nil
	} else if e.loadedTypes[0] {
		return nil, &NotFoundError{label: election.Label}
	}
	return nil, &NotLoadedError{edge: "election"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*ElectionFilters) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case electionfilters.FieldHasFirstName, electionfilters.FieldHasLastName, electionfilters.FieldHasBirthdate, electionfilters.FieldHasPhoneNumber, electionfilters.FieldHasBio, electionfilters.FieldHasAddress, electionfilters.FieldHasPhotoURL:
			values[i] = new(sql.NullBool)
		case electionfilters.FieldID:
			values[i] = new(sql.NullInt64)
		case electionfilters.ForeignKeys[0]: // election_filters
			values[i] = new(sql.NullInt64)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the ElectionFilters fields.
func (ef *ElectionFilters) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case electionfilters.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			ef.ID = int(value.Int64)
		case electionfilters.FieldHasFirstName:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field has_first_name", values[i])
			} else if value.Valid {
				ef.HasFirstName = value.Bool
			}
		case electionfilters.FieldHasLastName:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field has_last_name", values[i])
			} else if value.Valid {
				ef.HasLastName = value.Bool
			}
		case electionfilters.FieldHasBirthdate:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field has_birthdate", values[i])
			} else if value.Valid {
				ef.HasBirthdate = value.Bool
			}
		case electionfilters.FieldHasPhoneNumber:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field has_phone_number", values[i])
			} else if value.Valid {
				ef.HasPhoneNumber = value.Bool
			}
		case electionfilters.FieldHasBio:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field has_bio", values[i])
			} else if value.Valid {
				ef.HasBio = value.Bool
			}
		case electionfilters.FieldHasAddress:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field has_address", values[i])
			} else if value.Valid {
				ef.HasAddress = value.Bool
			}
		case electionfilters.FieldHasPhotoURL:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field has_photo_url", values[i])
			} else if value.Valid {
				ef.HasPhotoURL = value.Bool
			}
		case electionfilters.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field election_filters", value)
			} else if value.Valid {
				ef.election_filters = new(int)
				*ef.election_filters = int(value.Int64)
			}
		default:
			ef.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the ElectionFilters.
// This includes values selected through modifiers, order, etc.
func (ef *ElectionFilters) Value(name string) (ent.Value, error) {
	return ef.selectValues.Get(name)
}

// QueryElection queries the "election" edge of the ElectionFilters entity.
func (ef *ElectionFilters) QueryElection() *ElectionQuery {
	return NewElectionFiltersClient(ef.config).QueryElection(ef)
}

// Update returns a builder for updating this ElectionFilters.
// Note that you need to call ElectionFilters.Unwrap() before calling this method if this ElectionFilters
// was returned from a transaction, and the transaction was committed or rolled back.
func (ef *ElectionFilters) Update() *ElectionFiltersUpdateOne {
	return NewElectionFiltersClient(ef.config).UpdateOne(ef)
}

// Unwrap unwraps the ElectionFilters entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (ef *ElectionFilters) Unwrap() *ElectionFilters {
	_tx, ok := ef.config.driver.(*txDriver)
	if !ok {
		panic("generated: ElectionFilters is not a transactional entity")
	}
	ef.config.driver = _tx.drv
	return ef
}

// String implements the fmt.Stringer.
func (ef *ElectionFilters) String() string {
	var builder strings.Builder
	builder.WriteString("ElectionFilters(")
	builder.WriteString(fmt.Sprintf("id=%v, ", ef.ID))
	builder.WriteString("has_first_name=")
	builder.WriteString(fmt.Sprintf("%v", ef.HasFirstName))
	builder.WriteString(", ")
	builder.WriteString("has_last_name=")
	builder.WriteString(fmt.Sprintf("%v", ef.HasLastName))
	builder.WriteString(", ")
	builder.WriteString("has_birthdate=")
	builder.WriteString(fmt.Sprintf("%v", ef.HasBirthdate))
	builder.WriteString(", ")
	builder.WriteString("has_phone_number=")
	builder.WriteString(fmt.Sprintf("%v", ef.HasPhoneNumber))
	builder.WriteString(", ")
	builder.WriteString("has_bio=")
	builder.WriteString(fmt.Sprintf("%v", ef.HasBio))
	builder.WriteString(", ")
	builder.WriteString("has_address=")
	builder.WriteString(fmt.Sprintf("%v", ef.HasAddress))
	builder.WriteString(", ")
	builder.WriteString("has_photo_url=")
	builder.WriteString(fmt.Sprintf("%v", ef.HasPhotoURL))
	builder.WriteByte(')')
	return builder.String()
}

// ElectionFiltersSlice is a parsable slice of ElectionFilters.
type ElectionFiltersSlice []*ElectionFilters
