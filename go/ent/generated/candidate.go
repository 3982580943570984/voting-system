// Code generated by ent, DO NOT EDIT.

package generated

import (
	"fmt"
	"strings"
	"voting-system/ent/generated/candidate"
	"voting-system/ent/generated/election"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
)

// Candidate is the model entity for the Candidate schema.
type Candidate struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// Name holds the value of the "name" field.
	Name string `json:"name,omitempty"`
	// Description holds the value of the "description" field.
	Description string `json:"description,omitempty"`
	// PhotoURL holds the value of the "photo_url" field.
	PhotoURL string `json:"photo_url,omitempty"`
	// VotesCount holds the value of the "votes_count" field.
	VotesCount int `json:"votes_count,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the CandidateQuery when eager-loading is set.
	Edges               CandidateEdges `json:"edges"`
	election_candidates *int
	selectValues        sql.SelectValues
}

// CandidateEdges holds the relations/edges for other nodes in the graph.
type CandidateEdges struct {
	// Election holds the value of the election edge.
	Election *Election `json:"election,omitempty"`
	// Votes holds the value of the votes edge.
	Votes []*Vote `json:"votes,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [2]bool
}

// ElectionOrErr returns the Election value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e CandidateEdges) ElectionOrErr() (*Election, error) {
	if e.Election != nil {
		return e.Election, nil
	} else if e.loadedTypes[0] {
		return nil, &NotFoundError{label: election.Label}
	}
	return nil, &NotLoadedError{edge: "election"}
}

// VotesOrErr returns the Votes value or an error if the edge
// was not loaded in eager-loading.
func (e CandidateEdges) VotesOrErr() ([]*Vote, error) {
	if e.loadedTypes[1] {
		return e.Votes, nil
	}
	return nil, &NotLoadedError{edge: "votes"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Candidate) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case candidate.FieldID, candidate.FieldVotesCount:
			values[i] = new(sql.NullInt64)
		case candidate.FieldName, candidate.FieldDescription, candidate.FieldPhotoURL:
			values[i] = new(sql.NullString)
		case candidate.ForeignKeys[0]: // election_candidates
			values[i] = new(sql.NullInt64)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Candidate fields.
func (c *Candidate) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case candidate.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			c.ID = int(value.Int64)
		case candidate.FieldName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field name", values[i])
			} else if value.Valid {
				c.Name = value.String
			}
		case candidate.FieldDescription:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field description", values[i])
			} else if value.Valid {
				c.Description = value.String
			}
		case candidate.FieldPhotoURL:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field photo_url", values[i])
			} else if value.Valid {
				c.PhotoURL = value.String
			}
		case candidate.FieldVotesCount:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field votes_count", values[i])
			} else if value.Valid {
				c.VotesCount = int(value.Int64)
			}
		case candidate.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field election_candidates", value)
			} else if value.Valid {
				c.election_candidates = new(int)
				*c.election_candidates = int(value.Int64)
			}
		default:
			c.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the Candidate.
// This includes values selected through modifiers, order, etc.
func (c *Candidate) Value(name string) (ent.Value, error) {
	return c.selectValues.Get(name)
}

// QueryElection queries the "election" edge of the Candidate entity.
func (c *Candidate) QueryElection() *ElectionQuery {
	return NewCandidateClient(c.config).QueryElection(c)
}

// QueryVotes queries the "votes" edge of the Candidate entity.
func (c *Candidate) QueryVotes() *VoteQuery {
	return NewCandidateClient(c.config).QueryVotes(c)
}

// Update returns a builder for updating this Candidate.
// Note that you need to call Candidate.Unwrap() before calling this method if this Candidate
// was returned from a transaction, and the transaction was committed or rolled back.
func (c *Candidate) Update() *CandidateUpdateOne {
	return NewCandidateClient(c.config).UpdateOne(c)
}

// Unwrap unwraps the Candidate entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (c *Candidate) Unwrap() *Candidate {
	_tx, ok := c.config.driver.(*txDriver)
	if !ok {
		panic("generated: Candidate is not a transactional entity")
	}
	c.config.driver = _tx.drv
	return c
}

// String implements the fmt.Stringer.
func (c *Candidate) String() string {
	var builder strings.Builder
	builder.WriteString("Candidate(")
	builder.WriteString(fmt.Sprintf("id=%v, ", c.ID))
	builder.WriteString("name=")
	builder.WriteString(c.Name)
	builder.WriteString(", ")
	builder.WriteString("description=")
	builder.WriteString(c.Description)
	builder.WriteString(", ")
	builder.WriteString("photo_url=")
	builder.WriteString(c.PhotoURL)
	builder.WriteString(", ")
	builder.WriteString("votes_count=")
	builder.WriteString(fmt.Sprintf("%v", c.VotesCount))
	builder.WriteByte(')')
	return builder.String()
}

// Candidates is a parsable slice of Candidate.
type Candidates []*Candidate
