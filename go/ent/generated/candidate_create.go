// Code generated by ent, DO NOT EDIT.

package generated

import (
	"context"
	"errors"
	"fmt"
	"voting-system/ent/generated/candidate"
	"voting-system/ent/generated/election"
	"voting-system/ent/generated/vote"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// CandidateCreate is the builder for creating a Candidate entity.
type CandidateCreate struct {
	config
	mutation *CandidateMutation
	hooks    []Hook
}

// SetName sets the "name" field.
func (cc *CandidateCreate) SetName(s string) *CandidateCreate {
	cc.mutation.SetName(s)
	return cc
}

// SetDescription sets the "description" field.
func (cc *CandidateCreate) SetDescription(s string) *CandidateCreate {
	cc.mutation.SetDescription(s)
	return cc
}

// SetPhotoURL sets the "photo_url" field.
func (cc *CandidateCreate) SetPhotoURL(s string) *CandidateCreate {
	cc.mutation.SetPhotoURL(s)
	return cc
}

// SetNillablePhotoURL sets the "photo_url" field if the given value is not nil.
func (cc *CandidateCreate) SetNillablePhotoURL(s *string) *CandidateCreate {
	if s != nil {
		cc.SetPhotoURL(*s)
	}
	return cc
}

// SetVotesCount sets the "votes_count" field.
func (cc *CandidateCreate) SetVotesCount(i int) *CandidateCreate {
	cc.mutation.SetVotesCount(i)
	return cc
}

// SetNillableVotesCount sets the "votes_count" field if the given value is not nil.
func (cc *CandidateCreate) SetNillableVotesCount(i *int) *CandidateCreate {
	if i != nil {
		cc.SetVotesCount(*i)
	}
	return cc
}

// SetElectionID sets the "election" edge to the Election entity by ID.
func (cc *CandidateCreate) SetElectionID(id int) *CandidateCreate {
	cc.mutation.SetElectionID(id)
	return cc
}

// SetNillableElectionID sets the "election" edge to the Election entity by ID if the given value is not nil.
func (cc *CandidateCreate) SetNillableElectionID(id *int) *CandidateCreate {
	if id != nil {
		cc = cc.SetElectionID(*id)
	}
	return cc
}

// SetElection sets the "election" edge to the Election entity.
func (cc *CandidateCreate) SetElection(e *Election) *CandidateCreate {
	return cc.SetElectionID(e.ID)
}

// AddVoteIDs adds the "votes" edge to the Vote entity by IDs.
func (cc *CandidateCreate) AddVoteIDs(ids ...int) *CandidateCreate {
	cc.mutation.AddVoteIDs(ids...)
	return cc
}

// AddVotes adds the "votes" edges to the Vote entity.
func (cc *CandidateCreate) AddVotes(v ...*Vote) *CandidateCreate {
	ids := make([]int, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return cc.AddVoteIDs(ids...)
}

// Mutation returns the CandidateMutation object of the builder.
func (cc *CandidateCreate) Mutation() *CandidateMutation {
	return cc.mutation
}

// Save creates the Candidate in the database.
func (cc *CandidateCreate) Save(ctx context.Context) (*Candidate, error) {
	cc.defaults()
	return withHooks(ctx, cc.sqlSave, cc.mutation, cc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (cc *CandidateCreate) SaveX(ctx context.Context) *Candidate {
	v, err := cc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (cc *CandidateCreate) Exec(ctx context.Context) error {
	_, err := cc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (cc *CandidateCreate) ExecX(ctx context.Context) {
	if err := cc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (cc *CandidateCreate) defaults() {
	if _, ok := cc.mutation.VotesCount(); !ok {
		v := candidate.DefaultVotesCount
		cc.mutation.SetVotesCount(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (cc *CandidateCreate) check() error {
	if _, ok := cc.mutation.Name(); !ok {
		return &ValidationError{Name: "name", err: errors.New(`generated: missing required field "Candidate.name"`)}
	}
	if v, ok := cc.mutation.Name(); ok {
		if err := candidate.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf(`generated: validator failed for field "Candidate.name": %w`, err)}
		}
	}
	if _, ok := cc.mutation.Description(); !ok {
		return &ValidationError{Name: "description", err: errors.New(`generated: missing required field "Candidate.description"`)}
	}
	if v, ok := cc.mutation.Description(); ok {
		if err := candidate.DescriptionValidator(v); err != nil {
			return &ValidationError{Name: "description", err: fmt.Errorf(`generated: validator failed for field "Candidate.description": %w`, err)}
		}
	}
	if _, ok := cc.mutation.VotesCount(); !ok {
		return &ValidationError{Name: "votes_count", err: errors.New(`generated: missing required field "Candidate.votes_count"`)}
	}
	return nil
}

func (cc *CandidateCreate) sqlSave(ctx context.Context) (*Candidate, error) {
	if err := cc.check(); err != nil {
		return nil, err
	}
	_node, _spec := cc.createSpec()
	if err := sqlgraph.CreateNode(ctx, cc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	cc.mutation.id = &_node.ID
	cc.mutation.done = true
	return _node, nil
}

func (cc *CandidateCreate) createSpec() (*Candidate, *sqlgraph.CreateSpec) {
	var (
		_node = &Candidate{config: cc.config}
		_spec = sqlgraph.NewCreateSpec(candidate.Table, sqlgraph.NewFieldSpec(candidate.FieldID, field.TypeInt))
	)
	if value, ok := cc.mutation.Name(); ok {
		_spec.SetField(candidate.FieldName, field.TypeString, value)
		_node.Name = value
	}
	if value, ok := cc.mutation.Description(); ok {
		_spec.SetField(candidate.FieldDescription, field.TypeString, value)
		_node.Description = value
	}
	if value, ok := cc.mutation.PhotoURL(); ok {
		_spec.SetField(candidate.FieldPhotoURL, field.TypeString, value)
		_node.PhotoURL = value
	}
	if value, ok := cc.mutation.VotesCount(); ok {
		_spec.SetField(candidate.FieldVotesCount, field.TypeInt, value)
		_node.VotesCount = value
	}
	if nodes := cc.mutation.ElectionIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   candidate.ElectionTable,
			Columns: []string{candidate.ElectionColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(election.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.election_candidates = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := cc.mutation.VotesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   candidate.VotesTable,
			Columns: []string{candidate.VotesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(vote.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// CandidateCreateBulk is the builder for creating many Candidate entities in bulk.
type CandidateCreateBulk struct {
	config
	err      error
	builders []*CandidateCreate
}

// Save creates the Candidate entities in the database.
func (ccb *CandidateCreateBulk) Save(ctx context.Context) ([]*Candidate, error) {
	if ccb.err != nil {
		return nil, ccb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(ccb.builders))
	nodes := make([]*Candidate, len(ccb.builders))
	mutators := make([]Mutator, len(ccb.builders))
	for i := range ccb.builders {
		func(i int, root context.Context) {
			builder := ccb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*CandidateMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, ccb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, ccb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, ccb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (ccb *CandidateCreateBulk) SaveX(ctx context.Context) []*Candidate {
	v, err := ccb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (ccb *CandidateCreateBulk) Exec(ctx context.Context) error {
	_, err := ccb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ccb *CandidateCreateBulk) ExecX(ctx context.Context) {
	if err := ccb.Exec(ctx); err != nil {
		panic(err)
	}
}
