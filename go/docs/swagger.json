{
    "swagger": "2.0",
    "info": {
        "contact": {}
    },
    "paths": {
        "/elections": {
            "get": {
                "description": "Эта функция возвращает список всех доступных выборов.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Выборы"
                ],
                "summary": "Получить все выборы",
                "responses": {
                    "200": {
                        "description": "Список выборов",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/generated.Election"
                            }
                        }
                    },
                    "400": {
                        "description": "Ошибка запроса",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "Ошибка сервера",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            },
            "post": {
                "security": [
                    {
                        "Bearer": []
                    }
                ],
                "description": "Создает новые выборы на основе данных, переданных в теле запроса.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Выборы"
                ],
                "summary": "Создать выборы",
                "parameters": [
                    {
                        "description": "Данные для создания выборов",
                        "name": "election",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/services.ElectionCreate"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Успешно создано, возвращает идентификатор созданных выборов",
                        "schema": {
                            "type": "integer"
                        }
                    },
                    "400": {
                        "description": "Неверный формат запроса",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "Ошибка сервера",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/elections/{id}": {
            "get": {
                "description": "Эта функция возвращает информацию о конкретных выборах по ID.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Выборы"
                ],
                "summary": "Получить выборы по ID",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "ID выборов",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Информация о выборах",
                        "schema": {
                            "$ref": "#/definitions/generated.Election"
                        }
                    },
                    "400": {
                        "description": "Неверный формат ID",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "404": {
                        "description": "Выборы не найдены",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            },
            "put": {
                "description": "Эта функция обновляет данные выборов по ID.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Выборы"
                ],
                "summary": "Обновить выборы",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "ID выборов для обновления",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Данные для обновления выборов",
                        "name": "election",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/services.ElectionUpdate"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Успешно обновлено, возвращает идентификатор обновленных выборов",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "integer"
                            }
                        }
                    },
                    "400": {
                        "description": "Неверный формат запроса",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "404": {
                        "description": "Выборы с указанным ID не найдены",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "Ошибка сервера",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            },
            "delete": {
                "description": "Эта функция удаляет выборы по ID.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Выборы"
                ],
                "summary": "Удалить выборы",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "ID выборов для удаления",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "204": {
                        "description": "Успешно удалено, нет контента",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "400": {
                        "description": "Неверный формат запроса",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "404": {
                        "description": "Выборы с указанным ID не найдены",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "Ошибка сервера",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/elections/{id}/candidates": {
            "get": {
                "description": "Эта функция возвращает список всех кандидатов для выбранных выборов по ID.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Кандидаты"
                ],
                "summary": "Получить всех кандидатов",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "ID выборов",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Список кандидатов",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/generated.Candidate"
                            }
                        }
                    },
                    "400": {
                        "description": "Неверный формат ID",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "Ошибка сервера",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            },
            "put": {
                "description": "Обновляет информацию о кандидате.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Кандидаты"
                ],
                "summary": "Обновить кандидата",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "ID выборов",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Данные для обновления кандидата",
                        "name": "candidate",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/services.CandidateUpdate"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Успешно обновлено, возвращает идентификатор обновленного кандидата",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "integer"
                            }
                        }
                    },
                    "400": {
                        "description": "Неверный формат запроса",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "404": {
                        "description": "Кандидат не найден",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "Ошибка сервера",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            },
            "post": {
                "description": "Создает нового кандидата на основе данных, переданных в теле запроса.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Кандидаты"
                ],
                "summary": "Создать кандидата",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "ID выборов",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Данные для создания кандидата",
                        "name": "candidate",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/services.CandidateCreate"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Успешно создан, возвращает идентификатор созданного кандидата",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "integer"
                            }
                        }
                    },
                    "400": {
                        "description": "Неверный формат запроса",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "Ошибка сервера",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            },
            "delete": {
                "description": "Удаляет кандидата.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Кандидаты"
                ],
                "summary": "Удалить кандидата",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "ID выборов",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Данные для удаления кандидата",
                        "name": "candidate",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/services.CandidateDelete"
                        }
                    }
                ],
                "responses": {
                    "204": {
                        "description": "Кандидат успешно удален",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "400": {
                        "description": "Неверный формат запроса",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "404": {
                        "description": "Кандидат не найден",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "Ошибка сервера",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/elections/{id}/settings": {
            "get": {
                "description": "Возвращает настройки выборов по ID.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Настройки выборов"
                ],
                "summary": "Получить настройки выборов",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "ID выборов",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Настройки выборов",
                        "schema": {
                            "$ref": "#/definitions/generated.ElectionSettings"
                        }
                    },
                    "400": {
                        "description": "Неверный формат ID",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "404": {
                        "description": "Выборы не найдены",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "Ошибка сервера",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/elections/{id}/tags": {
            "get": {
                "description": "Возвращает список тегов, связанных с конкретными выборами.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Теги"
                ],
                "summary": "Получить теги выборов",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "ID выборов",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Список тегов",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/generated.Tag"
                            }
                        }
                    },
                    "400": {
                        "description": "Неверный формат запроса",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "Внутренняя ошибка сервера",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            },
            "put": {
                "security": [
                    {
                        "Bearer": []
                    }
                ],
                "description": "Обновляет теги, связанные с конкретными выборами. Все существующие теги будут заменены на предоставленные.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Теги"
                ],
                "summary": "Обновить теги выборов",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "ID выборов",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Новый список тегов",
                        "name": "tags",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/services.TagsUpdate"
                        }
                    }
                ],
                "responses": {
                    "204": {
                        "description": "Теги успешно обновлены",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "400": {
                        "description": "Неверный формат запроса",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "Внутренняя ошибка сервера",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            },
            "post": {
                "security": [
                    {
                        "Bearer": []
                    }
                ],
                "description": "Создает новый тег и ассоциирует его с указанными выборами.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Теги"
                ],
                "summary": "Создать тег для выборов",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "ID выборов",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Данные для создания тега (только имя)",
                        "name": "tag",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/services.TagCreate"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "ID созданного тега",
                        "schema": {
                            "$ref": "#/definitions/services.TagCreate"
                        }
                    },
                    "400": {
                        "description": "Неверный формат запроса",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "Внутренняя ошибка сервера",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/login": {
            "post": {
                "description": "Аутентификация пользователя и возврат JWT-токена",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Аутентификация"
                ],
                "summary": "Вход пользователя",
                "parameters": [
                    {
                        "description": "Учетные данные пользователя",
                        "name": "credentials",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/routes.Credentials"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/routes.TokenResponse"
                        }
                    },
                    "400": {
                        "description": "Неверный формат запроса",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    },
                    "401": {
                        "description": "Неверный пароль",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    },
                    "500": {
                        "description": "Внутренняя ошибка сервера",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    }
                }
            }
        },
        "/profile": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Возвращает профиль текущего аутентифицированного пользователя.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Профиль"
                ],
                "summary": "Получить профиль пользователя",
                "responses": {
                    "200": {
                        "description": "Профиль пользователя",
                        "schema": {
                            "$ref": "#/definitions/generated.Profile"
                        }
                    },
                    "401": {
                        "description": "Неавторизованный доступ",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    },
                    "500": {
                        "description": "Внутренняя ошибка сервера",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    }
                }
            },
            "put": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Обновляет профиль текущего аутентифицированного пользователя.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Профиль"
                ],
                "summary": "Обновить профиль пользователя",
                "parameters": [
                    {
                        "description": "Данные для обновления профиля",
                        "name": "profile",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/services.ProfileUpdate"
                        }
                    }
                ],
                "responses": {
                    "204": {
                        "description": "Профиль успешно обновлен",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "400": {
                        "description": "Неверный формат запроса",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    },
                    "401": {
                        "description": "Неавторизованный доступ",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    },
                    "500": {
                        "description": "Внутренняя ошибка сервера",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    }
                }
            }
        },
        "/signup": {
            "post": {
                "description": "Регистрация нового пользователя",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Аутентификация"
                ],
                "summary": "Регистрация пользователя",
                "parameters": [
                    {
                        "description": "Учетные данные пользователя",
                        "name": "credentials",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/routes.Credentials"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Успешно создано, возвращает идентификатор созданного пользователя",
                        "schema": {
                            "type": "integer"
                        }
                    },
                    "400": {
                        "description": "Неверный формат запроса или ошибка при создании пользователя",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    }
                }
            }
        },
        "/votes": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Возвращает список голосов текущего пользователя на указанных выборах.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Голоса"
                ],
                "summary": "Получить голоса пользователя на конкретных выборах",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "ID выборов",
                        "name": "election_id",
                        "in": "query",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Список голосов пользователя",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/generated.Vote"
                            }
                        }
                    },
                    "400": {
                        "description": "Неверный формат запроса или отсутствует параметр",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    },
                    "401": {
                        "description": "Неавторизованный доступ",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    },
                    "500": {
                        "description": "Внутренняя ошибка сервера",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    }
                }
            },
            "post": {
                "description": "Создает новый голос на основе данных, переданных в теле запроса.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Голоса"
                ],
                "summary": "Создать новый голос",
                "parameters": [
                    {
                        "description": "Данные для создания голоса",
                        "name": "vote",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/services.VoteCreate"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Успешно создано, возвращает идентификатор созданного голоса",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "integer"
                            }
                        }
                    },
                    "400": {
                        "description": "Неверный формат запроса",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "Ошибка сервера",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            },
            "delete": {
                "description": "Удаляет голос пользователя по ID.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Голоса"
                ],
                "summary": "Удаление голоса пользователя",
                "parameters": [
                    {
                        "description": "Информация о пользователе для удаления его голоса",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/services.VoteDelete"
                        }
                    }
                ],
                "responses": {
                    "204": {
                        "description": "Голос успешно удален",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "400": {
                        "description": "Неверный формат данных или ошибка при удалении",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "Ошибка сервера",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/votes/voted": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Возвращает булевое значение, указывающее, проголосовал ли пользователь на указанных выборах.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Голоса"
                ],
                "summary": "Проверить, проголосовал ли пользователь на выборах",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "ID выборов",
                        "name": "election_id",
                        "in": "query",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Статус голосования пользователя",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "boolean"
                            }
                        }
                    },
                    "400": {
                        "description": "Неверный формат запроса или отсутствует параметр",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    },
                    "401": {
                        "description": "Неавторизованный доступ",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    },
                    "500": {
                        "description": "Внутренняя ошибка сервера",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    }
                }
            }
        }
    },
    "definitions": {
        "generated.Candidate": {
            "type": "object",
            "properties": {
                "create_time": {
                    "description": "CreateTime holds the value of the \"create_time\" field.",
                    "type": "string"
                },
                "description": {
                    "description": "Description holds the value of the \"description\" field.",
                    "type": "string"
                },
                "edges": {
                    "description": "Edges holds the relations/edges for other nodes in the graph.\nThe values are being populated by the CandidateQuery when eager-loading is set.",
                    "allOf": [
                        {
                            "$ref": "#/definitions/generated.CandidateEdges"
                        }
                    ]
                },
                "id": {
                    "description": "ID of the ent.",
                    "type": "integer"
                },
                "name": {
                    "description": "Name holds the value of the \"name\" field.",
                    "type": "string"
                },
                "photo_url": {
                    "description": "PhotoURL holds the value of the \"photo_url\" field.",
                    "type": "string"
                },
                "update_time": {
                    "description": "UpdateTime holds the value of the \"update_time\" field.",
                    "type": "string"
                },
                "votes_count": {
                    "description": "VotesCount holds the value of the \"votes_count\" field.",
                    "type": "integer"
                }
            }
        },
        "generated.CandidateEdges": {
            "type": "object",
            "properties": {
                "election": {
                    "description": "Election holds the value of the election edge.",
                    "allOf": [
                        {
                            "$ref": "#/definitions/generated.Election"
                        }
                    ]
                },
                "votes": {
                    "description": "Votes holds the value of the votes edge.",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/generated.Vote"
                    }
                }
            }
        },
        "generated.Comment": {
            "type": "object",
            "properties": {
                "contents": {
                    "description": "Contents holds the value of the \"contents\" field.",
                    "type": "string"
                },
                "create_time": {
                    "description": "CreateTime holds the value of the \"create_time\" field.",
                    "type": "string"
                },
                "edges": {
                    "description": "Edges holds the relations/edges for other nodes in the graph.\nThe values are being populated by the CommentQuery when eager-loading is set.",
                    "allOf": [
                        {
                            "$ref": "#/definitions/generated.CommentEdges"
                        }
                    ]
                },
                "id": {
                    "description": "ID of the ent.",
                    "type": "integer"
                },
                "update_time": {
                    "description": "UpdateTime holds the value of the \"update_time\" field.",
                    "type": "string"
                }
            }
        },
        "generated.CommentEdges": {
            "type": "object",
            "properties": {
                "children": {
                    "description": "Children holds the value of the children edge.",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/generated.Comment"
                    }
                },
                "election": {
                    "description": "Election holds the value of the election edge.",
                    "allOf": [
                        {
                            "$ref": "#/definitions/generated.Election"
                        }
                    ]
                },
                "parent": {
                    "description": "Parent holds the value of the parent edge.",
                    "allOf": [
                        {
                            "$ref": "#/definitions/generated.Comment"
                        }
                    ]
                },
                "user": {
                    "description": "User holds the value of the user edge.",
                    "allOf": [
                        {
                            "$ref": "#/definitions/generated.User"
                        }
                    ]
                }
            }
        },
        "generated.Election": {
            "type": "object",
            "properties": {
                "description": {
                    "description": "Description holds the value of the \"description\" field.",
                    "type": "string"
                },
                "edges": {
                    "description": "Edges holds the relations/edges for other nodes in the graph.\nThe values are being populated by the ElectionQuery when eager-loading is set.",
                    "allOf": [
                        {
                            "$ref": "#/definitions/generated.ElectionEdges"
                        }
                    ]
                },
                "id": {
                    "description": "ID of the ent.",
                    "type": "integer"
                },
                "title": {
                    "description": "Title holds the value of the \"title\" field.",
                    "type": "string"
                }
            }
        },
        "generated.ElectionEdges": {
            "type": "object",
            "properties": {
                "candidates": {
                    "description": "Candidates holds the value of the candidates edge.",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/generated.Candidate"
                    }
                },
                "comments": {
                    "description": "Comments holds the value of the comments edge.",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/generated.Comment"
                    }
                },
                "settings": {
                    "description": "Settings holds the value of the settings edge.",
                    "allOf": [
                        {
                            "$ref": "#/definitions/generated.ElectionSettings"
                        }
                    ]
                },
                "tags": {
                    "description": "Tags holds the value of the tags edge.",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/generated.Tag"
                    }
                },
                "user": {
                    "description": "User holds the value of the user edge.",
                    "allOf": [
                        {
                            "$ref": "#/definitions/generated.User"
                        }
                    ]
                }
            }
        },
        "generated.ElectionSettings": {
            "type": "object",
            "properties": {
                "allow_comments": {
                    "description": "AllowComments holds the value of the \"allow_comments\" field.",
                    "type": "boolean"
                },
                "edges": {
                    "description": "Edges holds the relations/edges for other nodes in the graph.\nThe values are being populated by the ElectionSettingsQuery when eager-loading is set.",
                    "allOf": [
                        {
                            "$ref": "#/definitions/generated.ElectionSettingsEdges"
                        }
                    ]
                },
                "end_date": {
                    "description": "EndDate holds the value of the \"end_date\" field.",
                    "type": "string"
                },
                "id": {
                    "description": "ID of the ent.",
                    "type": "integer"
                },
                "is_active": {
                    "description": "IsActive holds the value of the \"is_active\" field.",
                    "type": "boolean"
                },
                "is_anonymous": {
                    "description": "IsAnonymous holds the value of the \"is_anonymous\" field.",
                    "type": "boolean"
                },
                "max_votes": {
                    "description": "MaxVotes holds the value of the \"max_votes\" field.",
                    "type": "integer"
                },
                "start_date": {
                    "description": "StartDate holds the value of the \"start_date\" field.",
                    "type": "string"
                }
            }
        },
        "generated.ElectionSettingsEdges": {
            "type": "object",
            "properties": {
                "election": {
                    "description": "Election holds the value of the election edge.",
                    "allOf": [
                        {
                            "$ref": "#/definitions/generated.Election"
                        }
                    ]
                }
            }
        },
        "generated.Profile": {
            "type": "object",
            "properties": {
                "address": {
                    "description": "Address holds the value of the \"address\" field.",
                    "type": "string"
                },
                "bio": {
                    "description": "Bio holds the value of the \"bio\" field.",
                    "type": "string"
                },
                "birthdate": {
                    "description": "Birthdate holds the value of the \"birthdate\" field.",
                    "type": "string"
                },
                "edges": {
                    "description": "Edges holds the relations/edges for other nodes in the graph.\nThe values are being populated by the ProfileQuery when eager-loading is set.",
                    "allOf": [
                        {
                            "$ref": "#/definitions/generated.ProfileEdges"
                        }
                    ]
                },
                "first_name": {
                    "description": "FirstName holds the value of the \"first_name\" field.",
                    "type": "string"
                },
                "id": {
                    "description": "ID of the ent.",
                    "type": "integer"
                },
                "last_name": {
                    "description": "LastName holds the value of the \"last_name\" field.",
                    "type": "string"
                },
                "phone_number": {
                    "description": "PhoneNumber holds the value of the \"phone_number\" field.",
                    "type": "string"
                },
                "photo_url": {
                    "description": "PhotoURL holds the value of the \"photo_url\" field.",
                    "type": "string"
                }
            }
        },
        "generated.ProfileEdges": {
            "type": "object",
            "properties": {
                "user": {
                    "description": "User holds the value of the user edge.",
                    "allOf": [
                        {
                            "$ref": "#/definitions/generated.User"
                        }
                    ]
                }
            }
        },
        "generated.Tag": {
            "type": "object",
            "properties": {
                "edges": {
                    "description": "Edges holds the relations/edges for other nodes in the graph.\nThe values are being populated by the TagQuery when eager-loading is set.",
                    "allOf": [
                        {
                            "$ref": "#/definitions/generated.TagEdges"
                        }
                    ]
                },
                "id": {
                    "description": "ID of the ent.",
                    "type": "integer"
                },
                "name": {
                    "description": "Name holds the value of the \"name\" field.",
                    "type": "string"
                }
            }
        },
        "generated.TagEdges": {
            "type": "object",
            "properties": {
                "elections": {
                    "description": "Elections holds the value of the elections edge.",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/generated.Election"
                    }
                }
            }
        },
        "generated.User": {
            "type": "object",
            "properties": {
                "create_time": {
                    "description": "CreateTime holds the value of the \"create_time\" field.",
                    "type": "string"
                },
                "edges": {
                    "description": "Edges holds the relations/edges for other nodes in the graph.\nThe values are being populated by the UserQuery when eager-loading is set.",
                    "allOf": [
                        {
                            "$ref": "#/definitions/generated.UserEdges"
                        }
                    ]
                },
                "email": {
                    "description": "Email holds the value of the \"email\" field.",
                    "type": "string"
                },
                "id": {
                    "description": "ID of the ent.",
                    "type": "integer"
                },
                "is_active": {
                    "description": "IsActive holds the value of the \"is_active\" field.",
                    "type": "boolean"
                },
                "is_organizer": {
                    "description": "IsOrganizer holds the value of the \"is_organizer\" field.",
                    "type": "boolean"
                },
                "last_login": {
                    "description": "LastLogin holds the value of the \"last_login\" field.",
                    "type": "string"
                },
                "update_time": {
                    "description": "UpdateTime holds the value of the \"update_time\" field.",
                    "type": "string"
                }
            }
        },
        "generated.UserEdges": {
            "type": "object",
            "properties": {
                "comments": {
                    "description": "Comments holds the value of the comments edge.",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/generated.Comment"
                    }
                },
                "elections": {
                    "description": "Elections holds the value of the elections edge.",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/generated.Election"
                    }
                },
                "profile": {
                    "description": "Profile holds the value of the profile edge.",
                    "allOf": [
                        {
                            "$ref": "#/definitions/generated.Profile"
                        }
                    ]
                },
                "votes": {
                    "description": "Votes holds the value of the votes edge.",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/generated.Vote"
                    }
                }
            }
        },
        "generated.Vote": {
            "type": "object",
            "properties": {
                "create_time": {
                    "description": "CreateTime holds the value of the \"create_time\" field.",
                    "type": "string"
                },
                "edges": {
                    "description": "Edges holds the relations/edges for other nodes in the graph.\nThe values are being populated by the VoteQuery when eager-loading is set.",
                    "allOf": [
                        {
                            "$ref": "#/definitions/generated.VoteEdges"
                        }
                    ]
                },
                "id": {
                    "description": "ID of the ent.",
                    "type": "integer"
                },
                "is_active": {
                    "description": "IsActive holds the value of the \"is_active\" field.",
                    "type": "boolean"
                }
            }
        },
        "generated.VoteEdges": {
            "type": "object",
            "properties": {
                "candidate": {
                    "description": "Candidate holds the value of the candidate edge.",
                    "allOf": [
                        {
                            "$ref": "#/definitions/generated.Candidate"
                        }
                    ]
                },
                "user": {
                    "description": "User holds the value of the user edge.",
                    "allOf": [
                        {
                            "$ref": "#/definitions/generated.User"
                        }
                    ]
                }
            }
        },
        "routes.Credentials": {
            "type": "object",
            "properties": {
                "email": {
                    "description": "Электронная почта пользователя\nrequired: true",
                    "type": "string"
                },
                "is_organizer": {
                    "description": "Пользователь является организатором.",
                    "type": "boolean"
                },
                "password": {
                    "description": "Пароль пользователя\nrequired: true",
                    "type": "string"
                }
            }
        },
        "routes.TokenResponse": {
            "type": "object",
            "properties": {
                "token": {
                    "description": "JWT-токен",
                    "type": "string"
                }
            }
        },
        "services.CandidateCreate": {
            "type": "object",
            "properties": {
                "description": {
                    "type": "string"
                },
                "electionId": {
                    "type": "integer"
                },
                "name": {
                    "type": "string"
                }
            }
        },
        "services.CandidateDelete": {
            "type": "object",
            "properties": {
                "electionId": {
                    "type": "integer"
                },
                "id": {
                    "type": "integer"
                }
            }
        },
        "services.CandidateUpdate": {
            "type": "object",
            "properties": {
                "description": {
                    "type": "string"
                },
                "id": {
                    "type": "integer"
                },
                "name": {
                    "type": "string"
                },
                "photo_url": {
                    "type": "string"
                }
            }
        },
        "services.ElectionCreate": {
            "type": "object",
            "properties": {
                "description": {
                    "description": "Description — описание выборов\nЭто обязательное поле, максимальная длина 1000 символов.",
                    "type": "string",
                    "maxLength": 1000
                },
                "title": {
                    "description": "Title — название выборов\nЭто обязательное поле, минимальная длина 8 символов, максимальная длина 64 символа.",
                    "type": "string",
                    "maxLength": 64,
                    "minLength": 8
                },
                "user_id": {
                    "description": "UserID - идентификатор пользователя, которые создает выборы\nЭто обязательное поле.",
                    "type": "integer"
                }
            }
        },
        "services.ElectionUpdate": {
            "type": "object",
            "properties": {
                "description": {
                    "description": "Description — новое описание выборов\nЭто необязательное поле при обновлении данных.",
                    "type": "string"
                },
                "id": {
                    "description": "ID — уникальный идентификатор выбора, который необходимо обновить\nЭто обязательное поле для обновления информации о конкретном выборе.",
                    "type": "integer"
                },
                "title": {
                    "description": "Title — новое название выборов\nЭто обязательное поле при обновлении данных.",
                    "type": "string"
                }
            }
        },
        "services.ProfileUpdate": {
            "type": "object",
            "properties": {
                "address": {
                    "type": "string"
                },
                "bio": {
                    "type": "string"
                },
                "birthdate": {
                    "type": "string"
                },
                "first_name": {
                    "type": "string"
                },
                "last_name": {
                    "type": "string"
                },
                "phone_number": {
                    "type": "string"
                },
                "photo_url": {
                    "type": "string"
                },
                "userID": {
                    "type": "integer"
                }
            }
        },
        "services.TagCreate": {
            "type": "object",
            "properties": {
                "election_id": {
                    "type": "integer"
                },
                "name": {
                    "type": "string"
                }
            }
        },
        "services.TagsUpdate": {
            "type": "object",
            "properties": {
                "election_id": {
                    "type": "integer"
                },
                "names": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                }
            }
        },
        "services.VoteCreate": {
            "type": "object",
            "properties": {
                "candidate_id": {
                    "type": "integer"
                },
                "user_id": {
                    "type": "integer"
                }
            }
        },
        "services.VoteDelete": {
            "type": "object",
            "properties": {
                "candidate_id": {
                    "type": "integer"
                },
                "user_id": {
                    "type": "integer"
                }
            }
        }
    },
    "securityDefinitions": {
        "Bearer": {
            "description": "Type \"Bearer\" followed by a space and JWT token.",
            "type": "apiKey",
            "name": "Authorization",
            "in": "header"
        }
    }
}