definitions:
  generated.Candidate:
    properties:
      create_time:
        description: CreateTime holds the value of the "create_time" field.
        type: string
      description:
        description: Description holds the value of the "description" field.
        type: string
      edges:
        allOf:
        - $ref: '#/definitions/generated.CandidateEdges'
        description: |-
          Edges holds the relations/edges for other nodes in the graph.
          The values are being populated by the CandidateQuery when eager-loading is set.
      id:
        description: ID of the ent.
        type: integer
      name:
        description: Name holds the value of the "name" field.
        type: string
      photo_url:
        description: PhotoURL holds the value of the "photo_url" field.
        type: string
      update_time:
        description: UpdateTime holds the value of the "update_time" field.
        type: string
      votes_count:
        description: VotesCount holds the value of the "votes_count" field.
        type: integer
    type: object
  generated.CandidateEdges:
    properties:
      election:
        allOf:
        - $ref: '#/definitions/generated.Election'
        description: Election holds the value of the election edge.
      votes:
        description: Votes holds the value of the votes edge.
        items:
          $ref: '#/definitions/generated.Vote'
        type: array
    type: object
  generated.Comment:
    properties:
      contents:
        description: Contents holds the value of the "contents" field.
        type: string
      create_time:
        description: CreateTime holds the value of the "create_time" field.
        type: string
      edges:
        allOf:
        - $ref: '#/definitions/generated.CommentEdges'
        description: |-
          Edges holds the relations/edges for other nodes in the graph.
          The values are being populated by the CommentQuery when eager-loading is set.
      id:
        description: ID of the ent.
        type: integer
      update_time:
        description: UpdateTime holds the value of the "update_time" field.
        type: string
    type: object
  generated.CommentEdges:
    properties:
      children:
        description: Children holds the value of the children edge.
        items:
          $ref: '#/definitions/generated.Comment'
        type: array
      election:
        allOf:
        - $ref: '#/definitions/generated.Election'
        description: Election holds the value of the election edge.
      parent:
        allOf:
        - $ref: '#/definitions/generated.Comment'
        description: Parent holds the value of the parent edge.
      user:
        allOf:
        - $ref: '#/definitions/generated.User'
        description: User holds the value of the user edge.
    type: object
  generated.Election:
    properties:
      completed:
        description: Completed holds the value of the "completed" field.
        type: boolean
      description:
        description: Description holds the value of the "description" field.
        type: string
      edges:
        allOf:
        - $ref: '#/definitions/generated.ElectionEdges'
        description: |-
          Edges holds the relations/edges for other nodes in the graph.
          The values are being populated by the ElectionQuery when eager-loading is set.
      id:
        description: ID of the ent.
        type: integer
      title:
        description: Title holds the value of the "title" field.
        type: string
    type: object
  generated.ElectionEdges:
    properties:
      candidates:
        description: Candidates holds the value of the candidates edge.
        items:
          $ref: '#/definitions/generated.Candidate'
        type: array
      comments:
        description: Comments holds the value of the comments edge.
        items:
          $ref: '#/definitions/generated.Comment'
        type: array
      filters:
        allOf:
        - $ref: '#/definitions/generated.ElectionFilters'
        description: Filters holds the value of the filters edge.
      settings:
        allOf:
        - $ref: '#/definitions/generated.ElectionSettings'
        description: Settings holds the value of the settings edge.
      tags:
        description: Tags holds the value of the tags edge.
        items:
          $ref: '#/definitions/generated.Tag'
        type: array
      user:
        allOf:
        - $ref: '#/definitions/generated.User'
        description: User holds the value of the user edge.
    type: object
  generated.ElectionFilters:
    properties:
      edges:
        allOf:
        - $ref: '#/definitions/generated.ElectionFiltersEdges'
        description: |-
          Edges holds the relations/edges for other nodes in the graph.
          The values are being populated by the ElectionFiltersQuery when eager-loading is set.
      has_address:
        description: HasAddress holds the value of the "has_address" field.
        type: boolean
      has_bio:
        description: HasBio holds the value of the "has_bio" field.
        type: boolean
      has_birthdate:
        description: HasBirthdate holds the value of the "has_birthdate" field.
        type: boolean
      has_first_name:
        description: HasFirstName holds the value of the "has_first_name" field.
        type: boolean
      has_last_name:
        description: HasLastName holds the value of the "has_last_name" field.
        type: boolean
      has_phone_number:
        description: HasPhoneNumber holds the value of the "has_phone_number" field.
        type: boolean
      has_photo_url:
        description: HasPhotoURL holds the value of the "has_photo_url" field.
        type: boolean
      id:
        description: ID of the ent.
        type: integer
    type: object
  generated.ElectionFiltersEdges:
    properties:
      election:
        allOf:
        - $ref: '#/definitions/generated.Election'
        description: Election holds the value of the election edge.
    type: object
  generated.ElectionSettings:
    properties:
      allow_comments:
        description: AllowComments holds the value of the "allow_comments" field.
        type: boolean
      create_time:
        description: CreateTime holds the value of the "create_time" field.
        type: string
      duration:
        description: Duration holds the value of the "duration" field.
        type: string
      edges:
        allOf:
        - $ref: '#/definitions/generated.ElectionSettingsEdges'
        description: |-
          Edges holds the relations/edges for other nodes in the graph.
          The values are being populated by the ElectionSettingsQuery when eager-loading is set.
      id:
        description: ID of the ent.
        type: integer
      is_active:
        description: IsActive holds the value of the "is_active" field.
        type: boolean
      is_anonymous:
        description: IsAnonymous holds the value of the "is_anonymous" field.
        type: boolean
      max_votes:
        description: MaxVotes holds the value of the "max_votes" field.
        type: integer
    type: object
  generated.ElectionSettingsEdges:
    properties:
      election:
        allOf:
        - $ref: '#/definitions/generated.Election'
        description: Election holds the value of the election edge.
    type: object
  generated.Profile:
    properties:
      address:
        description: Address holds the value of the "address" field.
        type: string
      bio:
        description: Bio holds the value of the "bio" field.
        type: string
      birthdate:
        description: Birthdate holds the value of the "birthdate" field.
        type: string
      edges:
        allOf:
        - $ref: '#/definitions/generated.ProfileEdges'
        description: |-
          Edges holds the relations/edges for other nodes in the graph.
          The values are being populated by the ProfileQuery when eager-loading is set.
      first_name:
        description: FirstName holds the value of the "first_name" field.
        type: string
      id:
        description: ID of the ent.
        type: integer
      last_name:
        description: LastName holds the value of the "last_name" field.
        type: string
      phone_number:
        description: PhoneNumber holds the value of the "phone_number" field.
        type: string
      photo_url:
        description: PhotoURL holds the value of the "photo_url" field.
        type: string
    type: object
  generated.ProfileEdges:
    properties:
      user:
        allOf:
        - $ref: '#/definitions/generated.User'
        description: User holds the value of the user edge.
    type: object
  generated.Tag:
    properties:
      edges:
        allOf:
        - $ref: '#/definitions/generated.TagEdges'
        description: |-
          Edges holds the relations/edges for other nodes in the graph.
          The values are being populated by the TagQuery when eager-loading is set.
      id:
        description: ID of the ent.
        type: integer
      name:
        description: Name holds the value of the "name" field.
        type: string
    type: object
  generated.TagEdges:
    properties:
      elections:
        description: Elections holds the value of the elections edge.
        items:
          $ref: '#/definitions/generated.Election'
        type: array
    type: object
  generated.User:
    properties:
      create_time:
        description: CreateTime holds the value of the "create_time" field.
        type: string
      edges:
        allOf:
        - $ref: '#/definitions/generated.UserEdges'
        description: |-
          Edges holds the relations/edges for other nodes in the graph.
          The values are being populated by the UserQuery when eager-loading is set.
      email:
        description: Email holds the value of the "email" field.
        type: string
      id:
        description: ID of the ent.
        type: integer
      is_active:
        description: IsActive holds the value of the "is_active" field.
        type: boolean
      is_organizer:
        description: IsOrganizer holds the value of the "is_organizer" field.
        type: boolean
      last_login:
        description: LastLogin holds the value of the "last_login" field.
        type: string
      update_time:
        description: UpdateTime holds the value of the "update_time" field.
        type: string
    type: object
  generated.UserEdges:
    properties:
      comments:
        description: Comments holds the value of the comments edge.
        items:
          $ref: '#/definitions/generated.Comment'
        type: array
      elections:
        description: Elections holds the value of the elections edge.
        items:
          $ref: '#/definitions/generated.Election'
        type: array
      profile:
        allOf:
        - $ref: '#/definitions/generated.Profile'
        description: Profile holds the value of the profile edge.
      votes:
        description: Votes holds the value of the votes edge.
        items:
          $ref: '#/definitions/generated.Vote'
        type: array
    type: object
  generated.Vote:
    properties:
      create_time:
        description: CreateTime holds the value of the "create_time" field.
        type: string
      edges:
        allOf:
        - $ref: '#/definitions/generated.VoteEdges'
        description: |-
          Edges holds the relations/edges for other nodes in the graph.
          The values are being populated by the VoteQuery when eager-loading is set.
      id:
        description: ID of the ent.
        type: integer
      is_active:
        description: IsActive holds the value of the "is_active" field.
        type: boolean
    type: object
  generated.VoteEdges:
    properties:
      candidate:
        allOf:
        - $ref: '#/definitions/generated.Candidate'
        description: Candidate holds the value of the candidate edge.
      user:
        allOf:
        - $ref: '#/definitions/generated.User'
        description: User holds the value of the user edge.
    type: object
  routes.Credentials:
    properties:
      email:
        description: |-
          Электронная почта пользователя
          required: true
        type: string
      is_organizer:
        description: Пользователь является организатором.
        type: boolean
      password:
        description: |-
          Пароль пользователя
          required: true
        type: string
    type: object
  routes.TokenResponse:
    properties:
      token:
        description: JWT-токен
        type: string
    type: object
  services.AgeGroup:
    properties:
      between_12_and_18:
        type: integer
      between_18_and_25:
        type: integer
      between_25_and_40:
        type: integer
      between_40_and_60:
        type: integer
      no_age:
        type: integer
      over_60:
        type: integer
      under_12:
        type: integer
    type: object
  services.CandidateCreate:
    properties:
      description:
        type: string
      electionId:
        type: integer
      name:
        type: string
    type: object
  services.CandidateDelete:
    properties:
      electionId:
        type: integer
      id:
        type: integer
    type: object
  services.CandidateUpdate:
    properties:
      description:
        type: string
      id:
        type: integer
      name:
        type: string
      photo_url:
        type: string
    type: object
  services.CommentCreate:
    properties:
      contents:
        type: string
      electionId:
        type: integer
      parent_id:
        type: integer
      userId:
        type: integer
    type: object
  services.CommentInfo:
    properties:
      avg_comment_length:
        type: integer
      comments_per_user:
        type: number
      total_comments:
        type: integer
    type: object
  services.ElectionCreate:
    properties:
      candidates:
        items:
          properties:
            description:
              type: string
            name:
              type: string
          type: object
        minItems: 1
        type: array
      description:
        maxLength: 1000
        type: string
      filters:
        properties:
          has_address:
            type: boolean
          has_bio:
            type: boolean
          has_birthdate:
            type: boolean
          has_first_name:
            type: boolean
          has_last_name:
            type: boolean
          has_phone_number:
            type: boolean
          has_photo_url:
            type: boolean
        type: object
      settings:
        properties:
          allow_comments:
            type: boolean
          duration:
            type: string
          is_active:
            type: boolean
          is_anonymous:
            type: boolean
          max_votes:
            type: integer
        type: object
      tags:
        items:
          type: string
        type: array
      title:
        maxLength: 64
        minLength: 8
        type: string
      user_id:
        type: integer
    required:
    - candidates
    type: object
  services.ElectionFiltersUpdate:
    properties:
      electionID:
        type: integer
      has_address:
        type: boolean
      has_bio:
        type: boolean
      has_birthdate:
        type: boolean
      has_first_name:
        type: boolean
      has_last_name:
        type: boolean
      has_phone_number:
        type: boolean
      has_photo_url:
        type: boolean
    type: object
  services.ElectionSettingsUpdate:
    properties:
      allow_comments:
        type: boolean
      duration:
        type: string
      electionID:
        type: integer
      is_active:
        type: boolean
      is_anonymous:
        type: boolean
      max_votes:
        type: integer
    type: object
  services.ElectionUpdate:
    properties:
      completed:
        type: boolean
      description:
        type: string
      id:
        type: integer
      title:
        type: string
    type: object
  services.ProfileUpdate:
    properties:
      address:
        type: string
      bio:
        type: string
      birthdate:
        type: string
      first_name:
        type: string
      last_name:
        type: string
      phone_number:
        type: string
      photo_url:
        type: string
      userID:
        type: integer
    type: object
  services.Statistics:
    properties:
      age_groups:
        $ref: '#/definitions/services.AgeGroup'
      comment_info:
        $ref: '#/definitions/services.CommentInfo'
    type: object
  services.TagCreate:
    properties:
      electionId:
        type: integer
      name:
        type: string
    type: object
  services.TagsUpdate:
    properties:
      electionId:
        type: integer
      names:
        items:
          type: string
        type: array
    type: object
  services.VoteCreate:
    properties:
      candidate_id:
        type: integer
      user_id:
        type: integer
    type: object
info:
  contact: {}
paths:
  /elections:
    get:
      consumes:
      - application/json
      description: Эта функция возвращает список всех доступных выборов.
      produces:
      - application/json
      responses:
        "200":
          description: Список выборов
          schema:
            items:
              $ref: '#/definitions/generated.Election'
            type: array
        "400":
          description: Ошибка запроса
          schema:
            type: string
        "500":
          description: Ошибка сервера
          schema:
            type: string
      summary: Получить все выборы
      tags:
      - Выборы
    post:
      consumes:
      - application/json
      description: Создает новые выборы.
      parameters:
      - description: Данные для создания выборов
        in: body
        name: election
        required: true
        schema:
          $ref: '#/definitions/services.ElectionCreate'
      produces:
      - application/json
      responses:
        "201":
          description: Успешно создано, возвращает идентификатор созданных выборов
          schema:
            additionalProperties:
              type: integer
            type: object
        "400":
          description: Неверный формат запроса или данные в теле запроса
          schema:
            type: string
        "401":
          description: Неавторизованный доступ
          schema:
            type: string
        "403":
          description: Доступ запрещен
          schema:
            type: string
        "500":
          description: Ошибка сервера
          schema:
            type: string
      security:
      - Bearer: []
      summary: Создать выборы
      tags:
      - Выборы
  /elections/{id}:
    delete:
      consumes:
      - application/json
      description: Эта функция удаляет выборы по ID.
      parameters:
      - description: ID выборов для удаления
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "204":
          description: Успешно удалено, нет контента
          schema:
            type: string
        "400":
          description: Неверный формат запроса
          schema:
            type: string
        "404":
          description: Выборы с указанным ID не найдены
          schema:
            type: string
        "500":
          description: Ошибка сервера
          schema:
            type: string
      summary: Удалить выборы
      tags:
      - Выборы
    get:
      consumes:
      - application/json
      description: Эта функция возвращает информацию о конкретных выборах по ID.
      parameters:
      - description: ID выборов
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Информация о выборах
          schema:
            $ref: '#/definitions/generated.Election'
        "400":
          description: Неверный формат ID
          schema:
            type: string
        "404":
          description: Выборы не найдены
          schema:
            type: string
      summary: Получить выборы по ID
      tags:
      - Выборы
    put:
      consumes:
      - application/json
      description: Эта функция обновляет данные выборов по ID.
      parameters:
      - description: ID выборов для обновления
        in: path
        name: id
        required: true
        type: integer
      - description: Данные для обновления выборов
        in: body
        name: election
        required: true
        schema:
          $ref: '#/definitions/services.ElectionUpdate'
      produces:
      - application/json
      responses:
        "200":
          description: Успешно обновлено, возвращает идентификатор обновленных выборов
          schema:
            additionalProperties:
              type: integer
            type: object
        "400":
          description: Неверный формат запроса
          schema:
            type: string
        "404":
          description: Выборы с указанным ID не найдены
          schema:
            type: string
        "500":
          description: Ошибка сервера
          schema:
            type: string
      summary: Обновить выборы
      tags:
      - Выборы
  /elections/{id}/candidates:
    delete:
      consumes:
      - application/json
      description: Удаляет кандидата.
      parameters:
      - description: ID выборов
        in: path
        name: id
        required: true
        type: integer
      - description: Данные для удаления кандидата
        in: body
        name: candidate
        required: true
        schema:
          $ref: '#/definitions/services.CandidateDelete'
      produces:
      - application/json
      responses:
        "204":
          description: Кандидат успешно удален
          schema:
            type: string
        "400":
          description: Неверный формат запроса
          schema:
            type: string
        "404":
          description: Кандидат не найден
          schema:
            type: string
        "500":
          description: Ошибка сервера
          schema:
            type: string
      summary: Удалить кандидата
      tags:
      - Кандидаты
    get:
      consumes:
      - application/json
      description: Эта функция возвращает список всех кандидатов для выбранных выборов
        по ID.
      parameters:
      - description: ID выборов
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Список кандидатов
          schema:
            items:
              $ref: '#/definitions/generated.Candidate'
            type: array
        "400":
          description: Неверный формат ID
          schema:
            type: string
        "500":
          description: Ошибка сервера
          schema:
            type: string
      summary: Получить всех кандидатов
      tags:
      - Кандидаты
    post:
      consumes:
      - application/json
      description: Создает нового кандидата на основе данных, переданных в теле запроса.
      parameters:
      - description: ID выборов
        in: path
        name: id
        required: true
        type: integer
      - description: Данные для создания кандидата
        in: body
        name: candidate
        required: true
        schema:
          $ref: '#/definitions/services.CandidateCreate'
      produces:
      - application/json
      responses:
        "201":
          description: Успешно создан, возвращает идентификатор созданного кандидата
          schema:
            additionalProperties:
              type: integer
            type: object
        "400":
          description: Неверный формат запроса
          schema:
            type: string
        "500":
          description: Ошибка сервера
          schema:
            type: string
      summary: Создать кандидата
      tags:
      - Кандидаты
    put:
      consumes:
      - application/json
      description: Обновляет информацию о кандидате.
      parameters:
      - description: ID выборов
        in: path
        name: id
        required: true
        type: integer
      - description: Данные для обновления кандидата
        in: body
        name: candidate
        required: true
        schema:
          $ref: '#/definitions/services.CandidateUpdate'
      produces:
      - application/json
      responses:
        "200":
          description: Успешно обновлено, возвращает идентификатор обновленного кандидата
          schema:
            additionalProperties:
              type: integer
            type: object
        "400":
          description: Неверный формат запроса
          schema:
            type: string
        "404":
          description: Кандидат не найден
          schema:
            type: string
        "500":
          description: Ошибка сервера
          schema:
            type: string
      summary: Обновить кандидата
      tags:
      - Кандидаты
  /elections/{id}/comments:
    get:
      consumes:
      - application/json
      description: Возвращает список всех комментариев, связанных с указанными выборами.
      parameters:
      - description: ID выборов
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Список комментариев
          schema:
            items:
              $ref: '#/definitions/generated.Comment'
            type: array
        "400":
          description: Неверный формат ID выборов
          schema:
            type: string
        "401":
          description: Неавторизованный доступ
          schema:
            type: string
        "500":
          description: Ошибка сервера
          schema:
            type: string
      security:
      - Bearer: []
      summary: Получить все комментарии для выборов
      tags:
      - Комментарии
    post:
      consumes:
      - application/json
      description: Создает новый комментарий для указанного выбора.
      parameters:
      - description: ID выборов
        in: path
        name: id
        required: true
        type: integer
      - description: Данные для создания комментария
        in: body
        name: comment
        required: true
        schema:
          $ref: '#/definitions/services.CommentCreate'
      produces:
      - application/json
      responses:
        "201":
          description: Успешно создано, возвращает идентификатор созданного комментария
          schema:
            additionalProperties:
              type: integer
            type: object
        "400":
          description: Неверный формат запроса или ID выборов
          schema:
            type: string
        "401":
          description: Неавторизованный доступ
          schema:
            type: string
        "500":
          description: Ошибка сервера
          schema:
            type: string
      security:
      - Bearer: []
      summary: Создать комментарий
      tags:
      - Комментарии
  /elections/{id}/filters:
    get:
      consumes:
      - application/json
      description: Возвращает фильтры для указанных выборов.
      parameters:
      - description: ID выборов
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Фильтры выборов
          schema:
            $ref: '#/definitions/generated.ElectionFilters'
        "400":
          description: Неверный ID выборов
          schema:
            type: string
        "404":
          description: Выборы не найдены
          schema:
            type: string
        "500":
          description: Ошибка сервера
          schema:
            type: string
      summary: Получить фильтры выборов
      tags:
      - Фильтры
    put:
      consumes:
      - application/json
      description: Обновляет фильтры для указанных выборов.
      parameters:
      - description: ID выборов
        in: path
        name: id
        required: true
        type: integer
      - description: Обновленные данные фильтров
        in: body
        name: filters
        required: true
        schema:
          $ref: '#/definitions/services.ElectionFiltersUpdate'
      produces:
      - application/json
      responses:
        "204":
          description: Фильтры успешно обновлены
          schema:
            type: string
        "400":
          description: Неверный ID выборов или входные данные
          schema:
            type: string
        "404":
          description: Выборы не найдены
          schema:
            type: string
        "500":
          description: Ошибка сервера
          schema:
            type: string
      summary: Обновить фильтры выборов
      tags:
      - Фильтры
  /elections/{id}/settings:
    get:
      consumes:
      - application/json
      description: Возвращает настройки выборов по ID.
      parameters:
      - description: ID выборов
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Настройки выборов
          schema:
            $ref: '#/definitions/generated.ElectionSettings'
        "400":
          description: Неверный формат ID
          schema:
            type: string
        "404":
          description: Выборы не найдены
          schema:
            type: string
        "500":
          description: Ошибка сервера
          schema:
            type: string
      summary: Получить настройки выборов
      tags:
      - Настройки
    put:
      consumes:
      - application/json
      description: Обновляет настройки для указанных выборов.
      parameters:
      - description: ID выборов
        in: path
        name: id
        required: true
        type: integer
      - description: Обновленные данные настроек
        in: body
        name: settings
        required: true
        schema:
          $ref: '#/definitions/services.ElectionSettingsUpdate'
      produces:
      - application/json
      responses:
        "204":
          description: Настройки успешно обновлены
          schema:
            type: string
        "400":
          description: Неверный ID выборов или входные данные
          schema:
            type: string
        "404":
          description: Выборы не найдены
          schema:
            type: string
        "500":
          description: Ошибка сервера
          schema:
            type: string
      summary: Обновить настройки выборов
      tags:
      - Настройки
  /elections/{id}/tags:
    get:
      consumes:
      - application/json
      description: Возвращает список тегов, связанных с конкретными выборами.
      parameters:
      - description: ID выборов
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Список тегов
          schema:
            items:
              $ref: '#/definitions/generated.Tag'
            type: array
        "400":
          description: Неверный формат запроса
          schema:
            type: string
        "500":
          description: Внутренняя ошибка сервера
          schema:
            type: string
      summary: Получить теги выборов
      tags:
      - Теги
    post:
      consumes:
      - application/json
      description: Создает новый тег и ассоциирует его с указанными выборами.
      parameters:
      - description: ID выборов
        in: path
        name: id
        required: true
        type: integer
      - description: Данные для создания тега (только имя)
        in: body
        name: tag
        required: true
        schema:
          $ref: '#/definitions/services.TagCreate'
      produces:
      - application/json
      responses:
        "201":
          description: ID созданного тега
          schema:
            $ref: '#/definitions/services.TagCreate'
        "400":
          description: Неверный формат запроса
          schema:
            type: string
        "500":
          description: Внутренняя ошибка сервера
          schema:
            type: string
      security:
      - Bearer: []
      summary: Создать тег для выборов
      tags:
      - Теги
    put:
      consumes:
      - application/json
      description: Обновляет теги, связанные с конкретными выборами. Все существующие
        теги будут заменены на предоставленные.
      parameters:
      - description: ID выборов
        in: path
        name: id
        required: true
        type: integer
      - description: Новый список тегов
        in: body
        name: tags
        required: true
        schema:
          $ref: '#/definitions/services.TagsUpdate'
      produces:
      - application/json
      responses:
        "204":
          description: Теги успешно обновлены
          schema:
            type: string
        "400":
          description: Неверный формат запроса
          schema:
            type: string
        "500":
          description: Внутренняя ошибка сервера
          schema:
            type: string
      security:
      - Bearer: []
      summary: Обновить теги выборов
      tags:
      - Теги
  /elections/created:
    get:
      consumes:
      - application/json
      description: Эта функция возвращает список выборов, созданных текущим пользователем.
      produces:
      - application/json
      responses:
        "200":
          description: Список выборов, созданных пользователем
          schema:
            items:
              $ref: '#/definitions/generated.Election'
            type: array
        "401":
          description: Неавторизованный доступ
          schema:
            additionalProperties:
              type: string
            type: object
        "500":
          description: Ошибка сервера
          schema:
            additionalProperties:
              type: string
            type: object
      security:
      - Bearer: []
      summary: Получить выборы, созданные пользователем
      tags:
      - Выборы
  /elections/filtered:
    get:
      consumes:
      - application/json
      description: Возвращает список выборов, отфильтрованных по определенным критериям,
        доступных текущему пользователю.
      produces:
      - application/json
      responses:
        "200":
          description: Отфильтрованный список выборов
          schema:
            items:
              $ref: '#/definitions/generated.Election'
            type: array
        "401":
          description: Неавторизованный доступ
          schema:
            additionalProperties:
              type: string
            type: object
        "500":
          description: Ошибка сервера
          schema:
            additionalProperties:
              type: string
            type: object
      security:
      - Bearer: []
      summary: Получить отфильтрованные выборы
      tags:
      - Выборы
  /elections/statistics:
    get:
      consumes:
      - application/json
      description: Возвращает статистику по всем выборам, созданным текущим пользователем.
      produces:
      - application/json
      responses:
        "200":
          description: Статистика по выборам
          schema:
            $ref: '#/definitions/services.Statistics'
        "401":
          description: Неавторизованный доступ
          schema:
            additionalProperties:
              type: string
            type: object
        "500":
          description: Ошибка сервера
          schema:
            additionalProperties:
              type: string
            type: object
      security:
      - Bearer: []
      summary: Получить статистику по выборам пользователя
      tags:
      - Выборы
  /login:
    post:
      consumes:
      - application/json
      description: Аутентификация пользователя и возврат JWT-токена
      parameters:
      - description: Учетные данные пользователя
        in: body
        name: credentials
        required: true
        schema:
          $ref: '#/definitions/routes.Credentials'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/routes.TokenResponse'
        "400":
          description: Неверный формат запроса
          schema:
            additionalProperties:
              type: string
            type: object
        "401":
          description: Неверный пароль
          schema:
            additionalProperties:
              type: string
            type: object
        "500":
          description: Внутренняя ошибка сервера
          schema:
            additionalProperties:
              type: string
            type: object
      summary: Вход пользователя
      tags:
      - Аутентификация
  /profiles:
    get:
      consumes:
      - application/json
      description: Возвращает профиль текущего аутентифицированного пользователя.
      produces:
      - application/json
      responses:
        "200":
          description: Профиль пользователя
          schema:
            $ref: '#/definitions/generated.Profile'
        "401":
          description: Неавторизованный доступ
          schema:
            additionalProperties:
              type: string
            type: object
        "500":
          description: Внутренняя ошибка сервера
          schema:
            additionalProperties:
              type: string
            type: object
      security:
      - Bearer: []
      summary: Получить профиль пользователя
      tags:
      - Профиль
    put:
      consumes:
      - application/json
      description: Обновляет профиль текущего аутентифицированного пользователя.
      parameters:
      - description: Данные для обновления профиля
        in: body
        name: profile
        required: true
        schema:
          $ref: '#/definitions/services.ProfileUpdate'
      produces:
      - application/json
      responses:
        "204":
          description: Профиль успешно обновлен
          schema:
            type: string
        "400":
          description: Неверный формат запроса
          schema:
            additionalProperties:
              type: string
            type: object
        "401":
          description: Неавторизованный доступ
          schema:
            additionalProperties:
              type: string
            type: object
        "500":
          description: Внутренняя ошибка сервера
          schema:
            additionalProperties:
              type: string
            type: object
      security:
      - Bearer: []
      summary: Обновить профиль пользователя
      tags:
      - Профиль
  /signup:
    post:
      consumes:
      - application/json
      description: Регистрация нового пользователя
      parameters:
      - description: Учетные данные пользователя
        in: body
        name: credentials
        required: true
        schema:
          $ref: '#/definitions/routes.Credentials'
      produces:
      - application/json
      responses:
        "201":
          description: Успешно создано, возвращает идентификатор созданного пользователя
          schema:
            type: integer
        "400":
          description: Неверный формат запроса или ошибка при создании пользователя
          schema:
            additionalProperties:
              type: string
            type: object
      summary: Регистрация пользователя
      tags:
      - Аутентификация
  /votes:
    get:
      consumes:
      - application/json
      description: Возвращает список голосов текущего пользователя на указанных выборах.
      parameters:
      - description: ID выборов
        in: query
        name: election_id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Список голосов пользователя
          schema:
            items:
              $ref: '#/definitions/generated.Vote'
            type: array
        "400":
          description: Неверный формат запроса или отсутствует параметр
          schema:
            additionalProperties:
              type: string
            type: object
        "401":
          description: Неавторизованный доступ
          schema:
            additionalProperties:
              type: string
            type: object
        "500":
          description: Внутренняя ошибка сервера
          schema:
            additionalProperties:
              type: string
            type: object
      security:
      - Bearer: []
      summary: Получить голоса пользователя на конкретных выборах
      tags:
      - Голоса
    post:
      consumes:
      - application/json
      description: Создает новый голос на основе данных, переданных в теле запроса.
      parameters:
      - description: Данные для создания голоса
        in: body
        name: vote
        required: true
        schema:
          $ref: '#/definitions/services.VoteCreate'
      produces:
      - application/json
      responses:
        "201":
          description: Успешно создано, возвращает идентификатор созданного голоса
          schema:
            additionalProperties:
              type: integer
            type: object
        "400":
          description: Неверный формат запроса
          schema:
            type: string
        "500":
          description: Ошибка сервера
          schema:
            type: string
      summary: Создать новый голос
      tags:
      - Голоса
  /votes/voted:
    get:
      consumes:
      - application/json
      description: Возвращает булевое значение, указывающее, проголосовал ли пользователь
        на указанных выборах.
      parameters:
      - description: ID выборов
        in: query
        name: election_id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Статус голосования пользователя
          schema:
            additionalProperties:
              type: boolean
            type: object
        "400":
          description: Неверный формат запроса или отсутствует параметр
          schema:
            additionalProperties:
              type: string
            type: object
        "401":
          description: Неавторизованный доступ
          schema:
            additionalProperties:
              type: string
            type: object
        "500":
          description: Внутренняя ошибка сервера
          schema:
            additionalProperties:
              type: string
            type: object
      security:
      - Bearer: []
      summary: Проверить, проголосовал ли пользователь на выборах
      tags:
      - Голоса
securityDefinitions:
  Bearer:
    description: Type "Bearer" followed by a space and JWT token.
    in: header
    name: Authorization
    type: apiKey
swagger: "2.0"
